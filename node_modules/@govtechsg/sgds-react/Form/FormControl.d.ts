import * as React from 'react';
import { BsPrefixProps, BsPrefixRefForwardingComponent } from '../utils/helpers';
export type FormControlElement = HTMLInputElement | HTMLTextAreaElement;
export interface FormControlProps extends BsPrefixProps, React.HTMLAttributes<FormControlElement> {
    /** Input size variants */
    size?: 'sm' | 'lg';
    /**
     * Render the input as plain text. Generally used along side `readOnly`.
     */
    plaintext?: boolean;
    /** Make the control readonly */
    readOnly?: boolean;
    /** Make the control disabled */
    disabled?: boolean;
    /**
     * The `value` attribute of underlying input
     *
     * @controllable onChange
     * */
    value?: string | string[] | number;
    /** A callback fired when the `value` prop changes */
    onChange?: React.ChangeEventHandler<FormControlElement>;
    /**
     * The HTML input `type`, which is only relevant if `as` is `'input'` (the default).
     */
    type?: string;
    /** Add "valid" validation styles to the control */
    isValid?: boolean;
    /** Add "invalid" validation styles to the control and accompanying label */
    isInvalid?: boolean;
}
declare const _default: BsPrefixRefForwardingComponent<"input", FormControlProps> & {
    Feedback: BsPrefixRefForwardingComponent<"div", import("./Feedback").FeedbackProps>;
    Group: BsPrefixRefForwardingComponent<"div", import("./FormControlGroup").FormControlGroupProps>;
};
export default _default;
