'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const containerSizes = PropTypes__default["default"].oneOfType([
    PropTypes__default["default"].bool,
    PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),
]);
const propTypes = {
    /**
     * @default 'container'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Allow the Container to fill all of its available horizontal space.
     * @type {(true|"sm"|"md"|"lg"|"xl"|"xxl")}
     */
    fluid: containerSizes,
    /**
     * You can use a custom element for this component
     */
    as: PropTypes__default["default"].elementType,
};
const defaultProps = {
    fluid: false,
};
const Container = React__namespace.forwardRef(({ bsPrefix, fluid, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', className, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'container');
    const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, fluid ? `${prefix}${suffix}` : prefix) }));
});
Container.displayName = 'Container';
Container.propTypes = propTypes;
Container.defaultProps = defaultProps;

exports.Container = Container;
