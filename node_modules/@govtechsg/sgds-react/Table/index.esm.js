'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const TableRow = React.forwardRef(({ as: Component = 'tr', ...props }, ref) => {
    return (React.createElement(Component, { ...props, ref: ref }));
});
TableRow.displayName = 'TableRow';

const TableHeader = React.forwardRef(({ as: Component = 'thead', ...props }, ref) => {
    return (React.createElement(Component, { ...props, ref: ref }));
});
TableHeader.displayName = 'TableHeader';

const TableHeaderCell = React.forwardRef(({ as: Component = 'th', ...props }, ref) => {
    return (React.createElement(Component, { ...props, ref: ref }));
});
TableHeaderCell.displayName = 'TableHeaderCell';

const propTypes$1 = {
    /**
     * Handles the click event on the sort label. User is expected to pass in the sort
     * handler function that will sort the respective table column.
     *
     * @param e The click event.
     */
    onClick: PropTypes.func,
    /**
     * Whether sorting is currently active on the column.
     */
    active: PropTypes.bool,
    /**
     * Whether the column is currently sorted by ascending ('asc') or descending ('desc') order.
     */
    direction: PropTypes.oneOf(['asc', 'desc']),
    as: PropTypes.elementType,
    bsPrefix: PropTypes.string,
};
const TableSortLabel = React.forwardRef(({ onClick, direction = 'asc', active = false, as: Component = 'span', ...props }, ref) => {
    const getIcon = () => {
        if (!active) {
            return React.createElement("i", { className: "bi bi-arrow-down-up ms-2 align-self-center" });
        }
        return direction === 'asc' ? (React.createElement("i", { className: "bi bi-sort-up-alt ms-2 align-self-center" })) : (React.createElement("i", { className: "bi bi-sort-down ms-2 align-self-center" }));
    };
    return (React.createElement(Component, { ...props, ref: ref, role: "button", tabIndex: "0", onClick: onClick },
        props.children,
        " ",
        getIcon()));
});
TableSortLabel.displayName = 'TableSortLabel';
TableSortLabel.propTypes = propTypes$1;

const TableBody = React.forwardRef(({ as: Component = 'tbody', ...props }, ref) => {
    return React.createElement(Component, { ...props, ref: ref });
});
TableBody.displayName = 'TableBody';

const TableDataCell = React.forwardRef(({ as: Component = 'td', ...props }, ref) => {
    return (React.createElement(Component, { ...props, ref: ref }));
});
TableDataCell.displayName = 'TableDataCell';

const propTypes = {
    /**
     * @default 'table'
     */
    bsPrefix: PropTypes.string,
    /**
   * Adds zebra-striping to any table row within the `<tbody>`.
   */
    striped: PropTypes.bool,
    /**
     * Adds borders on all sides of the table and cells.
     */
    bordered: PropTypes.bool,
    /**
     * Removes all borders on the table and cells, including table header.
     */
    borderless: PropTypes.bool,
    /**
     * Enable a hover state on table rows within a `<tbody>`.
     */
    hover: PropTypes.bool,
    /**
     * Make tables more compact by cutting cell padding in half by setting
     * size as `sm`.
     */
    size: PropTypes.string,
    /**
     * Invert the colors of the table â€” with light text on dark backgrounds
     * by setting variant as `dark`.
     */
    variant: PropTypes.string,
    /**
     * Responsive tables allow tables to be scrolled horizontally with ease.
     * Across every breakpoint, use `responsive` for horizontally
     * scrolling tables. Responsive tables are wrapped automatically in a `div`.
     * Use `responsive="sm"`, `responsive="md"`, `responsive="lg"`, or
     * `responsive="xl"` as needed to create responsive tables up to
     * a particular breakpoint. From that breakpoint and up, the table will
     * behave normally and not scroll horizontally.
     */
    responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
};
const Table = React.forwardRef(({ bsPrefix, className, striped, bordered, borderless, hover, size, variant, responsive, ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');
    const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);
    const table = (React.createElement(SGDSWrapper, { as: "table", ...props, className: classes, ref: ref }));
    if (responsive) {
        let responsiveClass = `${decoratedBsPrefix}-responsive`;
        if (typeof responsive === 'string') {
            responsiveClass = `${responsiveClass}-${responsive}`;
        }
        return (React.createElement("div", { className: responsiveClass, tabIndex: 0 }, table));
    }
    return table;
});
Table.displayName = 'Table';
Table.propTypes = propTypes;
var Table$1 = Object.assign(Table, {
    Row: TableRow,
    Header: TableHeader,
    HeaderCell: TableHeaderCell,
    SortLabel: TableSortLabel,
    Body: TableBody,
    DataCell: TableDataCell,
});

export { Table$1 as Table, TableBody, TableDataCell, TableHeader, TableHeaderCell, TableRow, TableSortLabel };
