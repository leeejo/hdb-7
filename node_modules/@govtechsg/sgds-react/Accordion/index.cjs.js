'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var uncontrollable = require('uncontrollable');
var css = require('dom-helpers/css');
var Transition = require('react-transition-group/Transition');
var transitionEndListener = require('../utils/transitionEndListener');
var createChainedFunction = require('../utils/createChainedFunction');
var triggerBrowserReflow = require('../utils/triggerBrowserReflow');
var TransitionWrapper = require('../utils/TransitionWrapper');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var css__default = /*#__PURE__*/_interopDefaultLegacy(css);
var transitionEndListener__default = /*#__PURE__*/_interopDefaultLegacy(transitionEndListener);
var createChainedFunction__default = /*#__PURE__*/_interopDefaultLegacy(createChainedFunction);
var triggerBrowserReflow__default = /*#__PURE__*/_interopDefaultLegacy(triggerBrowserReflow);
var TransitionWrapper__default = /*#__PURE__*/_interopDefaultLegacy(TransitionWrapper);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const MARGINS = {
    height: ['marginTop', 'marginBottom'],
    width: ['marginLeft', 'marginRight'],
};
function getDefaultDimensionValue(dimension, elem) {
    const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
    const value = elem[offset];
    const margins = MARGINS[dimension];
    return (value +
        // @ts-ignore
        parseInt(css__default["default"](elem, margins[0]), 10) +
        // @ts-ignore
        parseInt(css__default["default"](elem, margins[1]), 10));
}
const collapseStyles = {
    [Transition.EXITED]: 'collapse',
    [Transition.EXITING]: 'collapsing',
    [Transition.ENTERING]: 'collapsing',
    [Transition.ENTERED]: 'collapse show',
};
const propTypes$6 = {
    /**
     * Show the component; triggers the expand or collapse animation
     */
    in: PropTypes__default["default"].bool,
    /**
     * Wait until the first "enter" transition to mount the component (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the component (remove it from the DOM) when it is collapsed
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * Run the expand animation when the component mounts, if it is initially
     * shown
     */
    appear: PropTypes__default["default"].bool,
    /**
     * Duration of the collapse animation in milliseconds, to ensure that
     * finishing callbacks are fired even if the original browser transition end
     * events are canceled
     */
    timeout: PropTypes__default["default"].number,
    /**
     * Callback fired before the component expands
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to expand
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has expanded
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired before the component collapses
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to collapse
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has collapsed
     */
    onExited: PropTypes__default["default"].func,
    /**
     * The dimension used when collapsing, or a function that returns the
     * dimension
     */
    dimension: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].oneOf(['height', 'width']),
        PropTypes__default["default"].func,
    ]),
    /**
     * Function that returns the height or width of the animating DOM node
     *
     * Allows for providing some custom logic for how much the Collapse component
     * should animate in its specified dimension. Called with the current
     * dimension prop value and the DOM node.
     *
     * @default element.offsetWidth | element.offsetHeight
     */
    getDimensionValue: PropTypes__default["default"].func,
    /**
     * ARIA role of collapsible element
     */
    role: PropTypes__default["default"].string,
    /**
     * You must provide a single JSX child element to this component and that element cannot be a \<React.Fragment\>
     */
    children: PropTypes__default["default"].element.isRequired,
};
const defaultProps = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    getDimensionValue: getDefaultDimensionValue,
};
const Collapse = React__default["default"].forwardRef(({ onEnter, onEntering, onEntered, onExit, onExiting, className, children, dimension = 'height', getDimensionValue = getDefaultDimensionValue, ...props }, ref) => {
    /* Compute dimension */
    const computedDimension = typeof dimension === 'function' ? dimension() : dimension;
    /* -- Expanding -- */
    const handleEnter = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = '0';
    }, onEnter), [computedDimension, onEnter]);
    const handleEntering = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
        elem.style[computedDimension] = `${elem[scroll]}px`;
    }, onEntering), [computedDimension, onEntering]);
    const handleEntered = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = null;
    }, onEntered), [computedDimension, onEntered]);
    /* -- Collapsing -- */
    const handleExit = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
        triggerBrowserReflow__default["default"](elem);
    }, onExit), [onExit, getDimensionValue, computedDimension]);
    const handleExiting = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = null;
    }, onExiting), [computedDimension, onExiting]);
    return (React__default["default"].createElement(TransitionWrapper__default["default"], { ref: ref, addEndListener: transitionEndListener__default["default"], ...props, "aria-expanded": props.role ? props.in : null, onEnter: handleEnter, onEntering: handleEntering, onEntered: handleEntered, onExit: handleExit, onExiting: handleExiting, childRef: children.ref }, (state, innerProps) => React__default["default"].cloneElement(children, {
        ...innerProps,
        className: classNames__default["default"](className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal'),
    })));
});
// @ts-ignore
Collapse.propTypes = propTypes$6;
// @ts-ignore
Collapse.defaultProps = defaultProps;

function isAccordionItemSelected(activeEventKey, eventKey) {
    return Array.isArray(activeEventKey)
        ? activeEventKey.includes(eventKey)
        : activeEventKey === eventKey;
}
const context$1 = React__namespace.createContext({});
context$1.displayName = 'AccordionContext';

const propTypes$5 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /**
     * A key that corresponds to the toggler that triggers this collapse's expand or collapse.
     */
    eventKey: PropTypes__default["default"].string.isRequired,
    /** Children prop should only contain a single child, and is enforced as such */
    children: PropTypes__default["default"].element.isRequired,
};
const AccordionCollapse = React__namespace.forwardRef(({ as: Component = 'div', bsPrefix, className, children, eventKey, ...props }, ref) => {
    const { activeEventKey } = React.useContext(context$1);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');
    return (React__namespace.createElement(Collapse, { ref: ref, in: isAccordionItemSelected(activeEventKey, eventKey), ...props, className: classNames__default["default"](className, bsPrefix) },
        React__namespace.createElement(Component, null, React__namespace.Children.only(children))));
});
AccordionCollapse.propTypes = propTypes$5;
AccordionCollapse.displayName = 'AccordionCollapse';

const context = React__namespace.createContext({
    eventKey: '',
});
context.displayName = 'AccordionItemContext';

const propTypes$4 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-body' */
    bsPrefix: PropTypes__default["default"].string,
};
const AccordionBody = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');
    const { eventKey } = React.useContext(context);
    return (React__namespace.createElement(AccordionCollapse, { eventKey: eventKey },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) })));
});
AccordionBody.propTypes = propTypes$4;
AccordionBody.displayName = 'AccordionBody';

const propTypes$3 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-button' */
    bsPrefix: PropTypes__default["default"].string,
    /** A callback function for when this component is clicked */
    onClick: PropTypes__default["default"].func,
};
function useAccordionButton(eventKey, onClick) {
    const { activeEventKey, onSelect, alwaysOpen } = React.useContext(context$1);
    return (e) => {
        /*
          Compare the event key in context with the given event key.
          If they are the same, then collapse the component.
        */
        let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
        if (alwaysOpen) {
            if (Array.isArray(activeEventKey)) {
                if (activeEventKey.includes(eventKey)) {
                    eventKeyPassed = activeEventKey.filter((k) => k !== eventKey);
                }
                else {
                    eventKeyPassed = [...activeEventKey, eventKey];
                }
            }
            else {
                // activeEventKey is undefined.
                eventKeyPassed = [eventKey];
            }
        }
        onSelect?.(eventKeyPassed, e);
        onClick?.(e);
    };
}
const AccordionButton = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'button', bsPrefix, className, onClick, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');
    const { eventKey } = React.useContext(context);
    const accordionOnClick = useAccordionButton(eventKey, onClick);
    const { activeEventKey } = React.useContext(context$1);
    if (Component === 'button') {
        props.type = 'button';
    }
    return (React__namespace.createElement(Component, { ref: ref, onClick: accordionOnClick, ...props, "aria-expanded": eventKey === activeEventKey, className: classNames__default["default"](className, bsPrefix, eventKey !== activeEventKey && 'collapsed') }));
});
AccordionButton.propTypes = propTypes$3;
AccordionButton.displayName = 'AccordionButton';

const propTypes$2 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-header' */
    bsPrefix: PropTypes__default["default"].string,
    /** Click handler for the `AccordionButton` element */
    onClick: PropTypes__default["default"].func,
};
const AccordionHeader = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'h2', bsPrefix, className, children, onClick, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) },
        React__namespace.createElement(AccordionButton, { onClick: onClick }, children)));
});
AccordionHeader.propTypes = propTypes$2;
AccordionHeader.displayName = 'AccordionHeader';

const propTypes$1 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-item' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * A unique key used to control this item's collapse/expand.
     * @required
     */
    eventKey: PropTypes__default["default"].string.isRequired,
};
const AccordionItem = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', bsPrefix, className, eventKey, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');
    const contextValue = React.useMemo(() => ({
        eventKey,
    }), [eventKey]);
    return (React__namespace.createElement(context.Provider, { value: contextValue },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) })));
});
AccordionItem.propTypes = propTypes$1;
AccordionItem.displayName = 'AccordionItem';

const propTypes = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion' */
    bsPrefix: PropTypes__default["default"].string,
    /** The current active key that corresponds to the currently expanded card */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** The default active key that is expanded on start */
    defaultActiveKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** Renders accordion edge-to-edge with its parent container */
    flush: PropTypes__default["default"].bool,
    /** Allow accordion items to stay open when another item is opened */
    alwaysOpen: PropTypes__default["default"].bool,
};
const Accordion = React__namespace.forwardRef((props, ref) => {
    const { 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div', activeKey, bsPrefix, className, onSelect, flush, alwaysOpen, ...controlledProps } = uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect',
    });
    const prefix = useBootstrapPrefix(bsPrefix, 'accordion');
    const contextValue = React.useMemo(() => ({
        activeEventKey: activeKey,
        onSelect,
        alwaysOpen,
    }), [activeKey, onSelect, alwaysOpen]);
    return (React__namespace.createElement(context$1.Provider, { value: contextValue },
        React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...controlledProps, className: classNames__default["default"](className, prefix, flush && `${prefix}-flush`) })));
});
Accordion.displayName = 'Accordion';
Accordion.propTypes = propTypes;
var Accordion$1 = Object.assign(Accordion, {
    Button: AccordionButton,
    Collapse: AccordionCollapse,
    Item: AccordionItem,
    Header: AccordionHeader,
    Body: AccordionBody,
});

exports.Accordion = Accordion$1;
exports.AccordionBody = AccordionBody;
exports.AccordionButton = AccordionButton;
exports.AccordionCollapse = AccordionCollapse;
exports.AccordionContext = context$1;
exports.AccordionHeader = AccordionHeader;
exports.AccordionItem = AccordionItem;
exports.useAccordionButton = useAccordionButton;
