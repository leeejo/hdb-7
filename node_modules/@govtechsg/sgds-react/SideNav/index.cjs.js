'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var uncontrollable = require('uncontrollable');
var Button$1 = require('@restart/ui/Button');
var useMergedRefs = require('@restart/hooks/useMergedRefs');
var css = require('dom-helpers/css');
var Transition = require('react-transition-group/Transition');
var transitionEndListener = require('../utils/transitionEndListener');
var createChainedFunction = require('../utils/createChainedFunction');
var triggerBrowserReflow = require('../utils/triggerBrowserReflow');
var TransitionWrapper = require('../utils/TransitionWrapper');
var Anchor = require('@restart/ui/Anchor');
var NavItem = require('@restart/ui/NavItem');
var SelectableContext = require('@restart/ui/SelectableContext');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var useMergedRefs__default = /*#__PURE__*/_interopDefaultLegacy(useMergedRefs);
var css__default = /*#__PURE__*/_interopDefaultLegacy(css);
var transitionEndListener__default = /*#__PURE__*/_interopDefaultLegacy(transitionEndListener);
var createChainedFunction__default = /*#__PURE__*/_interopDefaultLegacy(createChainedFunction);
var triggerBrowserReflow__default = /*#__PURE__*/_interopDefaultLegacy(triggerBrowserReflow);
var TransitionWrapper__default = /*#__PURE__*/_interopDefaultLegacy(TransitionWrapper);
var Anchor__default = /*#__PURE__*/_interopDefaultLegacy(Anchor);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

function isSideNavItemSelected(activeEventKey, eventKey) {
    return Array.isArray(activeEventKey)
        ? activeEventKey.includes(eventKey)
        : activeEventKey === eventKey;
}
const context$1 = React__namespace.createContext({});
context$1.displayName = 'SideNavContext';

const context = React__namespace.createContext({
    eventKey: '',
});
context.displayName = 'SideNavItemContext';

const propTypes$7 = {
    /**
     * @default 'btn'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * One or more button variant combinations
     *
     * buttons may be one of a variety of visual variants such as:
     *
     * `'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'link'`
     *
     * as well as "outline" versions (prefixed by 'outline-*')
     *
     * `'outline-primary', 'outline-secondary', 'outline-success', 'outline-danger', 'outline-warning', 'outline-info', 'outline-dark', 'outline-light'`
     */
    variant: PropTypes__default["default"].string,
    /**
     * Specifies a large or small button.
     *
     * @type ('sm'|'lg')
     */
    size: PropTypes__default["default"].string,
    /** Manually set the visual state of the button to `:active` */
    active: PropTypes__default["default"].bool,
    /**
     * Disables the Button, preventing mouse events,
     * even if the underlying component is an `<a>` element
     */
    disabled: PropTypes__default["default"].bool,
    /** Providing a `href` will render an `<a>` element, _styled_ as a button. */
    href: PropTypes__default["default"].string,
    /**
     * Defines HTML button type attribute.
     *
     * @default 'button'
     */
    type: PropTypes__default["default"].oneOf(['button', 'reset', 'submit', null]),
    as: PropTypes__default["default"].elementType,
};
const defaultProps$2 = {
    variant: 'primary',
    active: false,
    disabled: false,
};
const Button = React__namespace.forwardRef(({ as, bsPrefix, variant, size, active, className, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'btn');
    const [buttonProps, { tagName }] = Button$1.useButtonProps({
        tagName: as,
        ...props,
    });
    const Component = tagName;
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ...props, ...buttonProps, ref: ref, className: classNames__default["default"](className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled') }));
});
Button.displayName = 'Button';
Button.propTypes = propTypes$7;
Button.defaultProps = defaultProps$2;

const propTypes$6 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'sidenav-button' */
    bsPrefix: PropTypes__default["default"].string,
    /** A callback function for when this component is clicked */
    onClick: PropTypes__default["default"].func,
    /** Providing a `href` will render an `<a>` element, _styled_ as a button. */
    href: PropTypes__default["default"].string,
};
function useSideNavButton(eventKey, onClick) {
    const { activeEventKey, onSelect, alwaysOpen } = React.useContext(context$1);
    return (e) => {
        /*
          Compare the event key in context with the given event key.
          If they are the same, then collapse the component.
        */
        let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
        if (alwaysOpen) {
            if (Array.isArray(activeEventKey)) {
                if (activeEventKey.includes(eventKey)) {
                    eventKeyPassed = activeEventKey.filter((k) => k !== eventKey);
                }
                else {
                    eventKeyPassed = [...activeEventKey, eventKey];
                }
            }
            else {
                // activeEventKey is undefined.
                eventKeyPassed = [eventKey];
            }
        }
        onSelect?.(eventKeyPassed, e);
        onClick?.(e);
    };
}
const setCollapseCSS = (activeEventKey, eventKey) => {
    if (Array.isArray(activeEventKey)) {
        return !activeEventKey.includes(eventKey) && 'collapsed';
    }
    if (typeof activeEventKey === 'string') {
        return activeEventKey !== eventKey && 'collapsed';
    }
    return 'collapsed';
};
const SideNavButton = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = Button, bsPrefix, className, onClick, children, ...props }, ref) => {
    const btnRef = React__namespace.useRef(null);
    const mergedRef = useMergedRefs__default["default"](ref, btnRef);
    const { eventKey } = React.useContext(context);
    const sideNavOnClick = useSideNavButton(eventKey, onClick);
    const { activeEventKey } = React.useContext(context$1);
    if (Component === 'button') {
        props.type = 'button';
    }
    return (React__namespace.createElement(Component, { ref: mergedRef, variant: '', onClick: sideNavOnClick, ...props, "aria-expanded": eventKey === activeEventKey, "aria-haspopup": "menu", className: classNames__default["default"](className, setCollapseCSS(activeEventKey, eventKey)) },
        children,
        !props.href && React__namespace.createElement("i", { className: "bi bi-chevron-down" })));
});
SideNavButton.propTypes = propTypes$6;
SideNavButton.displayName = 'SideNavButton';

const MARGINS = {
    height: ['marginTop', 'marginBottom'],
    width: ['marginLeft', 'marginRight'],
};
function getDefaultDimensionValue(dimension, elem) {
    const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
    const value = elem[offset];
    const margins = MARGINS[dimension];
    return (value +
        // @ts-ignore
        parseInt(css__default["default"](elem, margins[0]), 10) +
        // @ts-ignore
        parseInt(css__default["default"](elem, margins[1]), 10));
}
const collapseStyles = {
    [Transition.EXITED]: 'collapse',
    [Transition.EXITING]: 'collapsing',
    [Transition.ENTERING]: 'collapsing',
    [Transition.ENTERED]: 'collapse show',
};
const propTypes$5 = {
    /**
     * Show the component; triggers the expand or collapse animation
     */
    in: PropTypes__default["default"].bool,
    /**
     * Wait until the first "enter" transition to mount the component (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the component (remove it from the DOM) when it is collapsed
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * Run the expand animation when the component mounts, if it is initially
     * shown
     */
    appear: PropTypes__default["default"].bool,
    /**
     * Duration of the collapse animation in milliseconds, to ensure that
     * finishing callbacks are fired even if the original browser transition end
     * events are canceled
     */
    timeout: PropTypes__default["default"].number,
    /**
     * Callback fired before the component expands
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to expand
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has expanded
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired before the component collapses
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to collapse
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has collapsed
     */
    onExited: PropTypes__default["default"].func,
    /**
     * The dimension used when collapsing, or a function that returns the
     * dimension
     */
    dimension: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].oneOf(['height', 'width']),
        PropTypes__default["default"].func,
    ]),
    /**
     * Function that returns the height or width of the animating DOM node
     *
     * Allows for providing some custom logic for how much the Collapse component
     * should animate in its specified dimension. Called with the current
     * dimension prop value and the DOM node.
     *
     * @default element.offsetWidth | element.offsetHeight
     */
    getDimensionValue: PropTypes__default["default"].func,
    /**
     * ARIA role of collapsible element
     */
    role: PropTypes__default["default"].string,
    /**
     * You must provide a single JSX child element to this component and that element cannot be a \<React.Fragment\>
     */
    children: PropTypes__default["default"].element.isRequired,
};
const defaultProps$1 = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    getDimensionValue: getDefaultDimensionValue,
};
const Collapse = React__default["default"].forwardRef(({ onEnter, onEntering, onEntered, onExit, onExiting, className, children, dimension = 'height', getDimensionValue = getDefaultDimensionValue, ...props }, ref) => {
    /* Compute dimension */
    const computedDimension = typeof dimension === 'function' ? dimension() : dimension;
    /* -- Expanding -- */
    const handleEnter = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = '0';
    }, onEnter), [computedDimension, onEnter]);
    const handleEntering = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
        elem.style[computedDimension] = `${elem[scroll]}px`;
    }, onEntering), [computedDimension, onEntering]);
    const handleEntered = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = null;
    }, onEntered), [computedDimension, onEntered]);
    /* -- Collapsing -- */
    const handleExit = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
        triggerBrowserReflow__default["default"](elem);
    }, onExit), [onExit, getDimensionValue, computedDimension]);
    const handleExiting = React.useMemo(() => createChainedFunction__default["default"]((elem) => {
        elem.style[computedDimension] = null;
    }, onExiting), [computedDimension, onExiting]);
    return (React__default["default"].createElement(TransitionWrapper__default["default"], { ref: ref, addEndListener: transitionEndListener__default["default"], ...props, "aria-expanded": props.role ? props.in : null, onEnter: handleEnter, onEntering: handleEntering, onEntered: handleEntered, onExit: handleExit, onExiting: handleExiting, childRef: children.ref }, (state, innerProps) => React__default["default"].cloneElement(children, {
        ...innerProps,
        className: classNames__default["default"](className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal'),
    })));
});
// @ts-ignore
Collapse.propTypes = propTypes$5;
// @ts-ignore
Collapse.defaultProps = defaultProps$1;

const propTypes$4 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** Children prop should only contain a single child, and is enforced as such */
    children: PropTypes__default["default"].node,
};
const SideNavCollapse = React__namespace.forwardRef(({ as: Component = 'div', bsPrefix, className, children, ...props }, ref) => {
    const { activeEventKey } = React.useContext(context$1);
    const { eventKey: itemEventKey } = React.useContext(context);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'sidenav-collapse');
    return (React__namespace.createElement(Collapse, { ref: ref, in: isSideNavItemSelected(activeEventKey, itemEventKey), ...props, className: classNames__default["default"](className, bsPrefix) },
        React__namespace.createElement(Component, null,
            React__namespace.createElement("ul", { className: "list-unstyled" }, React__namespace.Children.map(children, child => (React__namespace.createElement("li", null, React__namespace.cloneElement(child))))))));
});
SideNavCollapse.propTypes = propTypes$4;
SideNavCollapse.displayName = 'SideNavCollapse';

const propTypes$3 = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-item' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * A unique key used to control this item's collapse/expand.
     * @required
     */
    eventKey: PropTypes__default["default"].string.isRequired,
};
const SideNavItem = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'li', bsPrefix, className, eventKey, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'sidenav-item');
    const contextValue = React.useMemo(() => ({
        eventKey,
    }), [eventKey]);
    return (React__namespace.createElement(context.Provider, { value: contextValue },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) })));
});
SideNavItem.propTypes = propTypes$3;
SideNavItem.displayName = 'SideNavItem';

const propTypes$2 = {
    /**
     * @default 'nav-link'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The active state of the NavItem item.
     */
    active: PropTypes__default["default"].bool,
    /**
     * The disabled state of the NavItem item.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * The ARIA role for the `NavLink`, In the context of a 'tablist' parent Nav,
     * the role defaults to 'tab'
     * */
    role: PropTypes__default["default"].string,
    /** The HTML href attribute for the `NavLink` */
    href: PropTypes__default["default"].string,
    /**
     * Uniquely identifies the `NavItem` amongst its siblings,
     * used to determine and control the active state of the parent `Nav`
     */
    eventKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /** @default 'a' */
    as: PropTypes__default["default"].elementType,
};
const defaultProps = {
    disabled: false,
};
const NavLink = React__namespace.forwardRef(({ bsPrefix, className, as: Component = Anchor__default["default"], active, eventKey, 
// onClick,
...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'nav-link');
    const [navItemProps, meta] = NavItem.useNavItem({
        key: SelectableContext.makeEventKey(eventKey, props.href),
        active,
        ...props,
    });
    return (React__namespace.createElement(Component, { ...props, ...navItemProps, ref: ref, className: classNames__default["default"](className, bsPrefix, props.disabled && 'disabled', meta.isActive && 'active'), "aria-current": meta.isActive ? "page" : "false" }));
});
NavLink.displayName = 'NavLink';
NavLink.propTypes = propTypes$2;
NavLink.defaultProps = defaultProps;

const propTypes$1 = {
    eventKey: PropTypes__default["default"].string.isRequired
};
const SideNavLink = React__namespace.forwardRef(({ eventKey, ...props }, ref) => {
    const { activeLinkKey } = React__namespace.useContext(context$1);
    return (React__namespace.createElement(NavLink, { ...props, ref: ref, eventKey: eventKey, active: activeLinkKey === eventKey }));
});
SideNavLink.displayName = 'SideNavLink';
SideNavLink.propTypes = propTypes$1;

const propTypes = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'sidenav' */
    bsPrefix: PropTypes__default["default"].string,
    /** The current active key that corresponds to the currently expanded card */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** The default active key that is expanded on start */
    defaultActiveKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** Allow accordion items to stay open when another item is opened */
    alwaysOpen: PropTypes__default["default"].bool,
    /** The current active NavLink that corresponds to the currently expanded card */
    activeNavLinkKey: PropTypes__default["default"].string,
};
const SideNav = React__namespace.forwardRef((props, ref) => {
    const { 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'ul', activeKey, bsPrefix, className, onSelect, alwaysOpen, activeNavLinkKey = '', ...controlledProps } = uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect',
    });
    const prefix = useBootstrapPrefix(bsPrefix, 'sidenav');
    const contextValue = React.useMemo(() => ({
        activeEventKey: activeKey,
        onSelect,
        alwaysOpen,
        activeLinkKey: activeNavLinkKey,
    }), [activeKey, onSelect, alwaysOpen, activeNavLinkKey]);
    return (React__namespace.createElement(context$1.Provider, { value: contextValue },
        React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...controlledProps, className: classNames__default["default"](className, prefix, 'list-unstyled') })));
});
SideNav.displayName = 'SideNav';
SideNav.propTypes = propTypes;
var SideNav$1 = Object.assign(SideNav, {
    Button: SideNavButton,
    Collapse: SideNavCollapse,
    Item: SideNavItem,
    Link: SideNavLink,
});

exports.SideNav = SideNav$1;
exports.SideNavButton = SideNavButton;
exports.SideNavCollapse = SideNavCollapse;
exports.SideNavItem = SideNavItem;
exports.SideNavLink = SideNavLink;
