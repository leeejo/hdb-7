'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext, cloneElement } from 'react';
import PropTypes from 'prop-types';
import { map } from '../utils/ElementChildren';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const ROUND_PRECISION = 1000;
/**
 * Validate that children, if any, are instances of `<ProgressBar>`.
 */
function onlyProgressBar(props, propName, componentName) {
    const children = props[propName];
    if (!children) {
        return null;
    }
    let error = null;
    React.Children.forEach(children, (child) => {
        if (error) {
            return;
        }
        /**
         * Compare types in a way that works with libraries that patch and proxy
         * components like react-hot-loader.
         *
         * see https://github.com/gaearon/react-hot-loader#checking-element-types
         */
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        const element = React.createElement(ProgressBar, null);
        if (child.type === element.type)
            return;
        const childType = child.type;
        const childIdentifier = React.isValidElement(child)
            ? childType.displayName || childType.name || childType
            : child;
        error = new Error(`Children of ${componentName} can contain only ProgressBar ` +
            `components. Found ${childIdentifier}.`);
    });
    return error;
}
const propTypes = {
    /**
     * Minimum value progress can begin from
     */
    min: PropTypes.number,
    /**
     * Current value of progress
     */
    now: PropTypes.number,
    /**
     * Maximum value progress can reach
     */
    max: PropTypes.number,
    /**
     * Show label that represents visual percentage.
     * EG. 60%
     */
    label: PropTypes.node,
    /**
     * Forwards to aria-label attribute on element with role="progressbar"
     *
     */
    ariaLabel: PropTypes.string,
    /**
     * Hide's the label visually.
     */
    visuallyHidden: PropTypes.bool,
    /**
     * Uses a gradient to create a striped effect.
     */
    striped: PropTypes.bool,
    /**
     * Animate's the stripes from right to left
     */
    animated: PropTypes.bool,
    /**
     * @private
     * @default 'progress-bar'
     */
    bsPrefix: PropTypes.string,
    /**
     * Sets the background class of the progress bar.
     *
     * @type ('success'|'danger'|'warning'|'info')
     */
    variant: PropTypes.string,
    /**
     * Child elements (only allows elements of type <ProgressBar />)
     */
    children: onlyProgressBar,
    /**
     * @private
     */
    isChild: PropTypes.bool,
};
const defaultProps = {
    min: 0,
    max: 100,
    animated: false,
    isChild: false,
    visuallyHidden: false,
    striped: false,
    ariaLabel: 'progressbar',
};
function getPercentage(now, min, max) {
    const percentage = ((now - min) / (max - min)) * 100;
    return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar({ min, now, max, label, visuallyHidden, striped, animated, className, style, variant, bsPrefix, ariaLabel = 'progressbar', ...props }, ref) {
    return (React.createElement("div", { ref: ref, ...props, role: "progressbar", className: classNames(className, `${bsPrefix}-bar`, {
            [`bg-${variant}`]: variant,
            [`${bsPrefix}-bar-animated`]: animated,
            [`${bsPrefix}-bar-striped`]: animated || striped,
        }), style: { width: `${getPercentage(now, min, max)}%`, ...style }, "aria-valuenow": now, "aria-valuemin": min, "aria-valuemax": max, "aria-label": ariaLabel }, visuallyHidden ? (React.createElement("span", { className: "visually-hidden" }, label)) : (label)));
}
renderProgressBar.propTypes = propTypes;
const ProgressBar = React.forwardRef(({ isChild, ...props }, ref) => {
    props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');
    if (isChild) {
        return renderProgressBar(props, ref);
    }
    const { min, now, max, label, visuallyHidden, striped, animated, bsPrefix, variant, className, children, ariaLabel, ...wrapperProps } = props;
    return (React.createElement(SGDSWrapper, { ref: ref, ...wrapperProps, className: classNames(className, bsPrefix) }, children
        ? map(children, (child) => cloneElement(child, { isChild: true }))
        : renderProgressBar({
            min,
            now,
            max,
            label,
            visuallyHidden,
            striped,
            animated,
            bsPrefix,
            variant,
            ariaLabel,
        }, ref)));
});
ProgressBar.displayName = 'ProgressBar';
ProgressBar.propTypes = propTypes;
ProgressBar.defaultProps = defaultProps;

export { ProgressBar };
