'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const colSize = PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.number,
    PropTypes.string,
    PropTypes.oneOf(['auto']),
]);
const stringOrNumber = PropTypes.oneOfType([
    PropTypes.number,
    PropTypes.string,
]);
const column = PropTypes.oneOfType([
    colSize,
    PropTypes.shape({
        size: colSize,
        order: stringOrNumber,
        offset: stringOrNumber,
    }),
]);
const propTypes = {
    /**
     * @default 'col'
     */
    bsPrefix: PropTypes.string,
    as: PropTypes.elementType,
    /**
     * The number of columns to span on extra small devices (<576px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    xs: column,
    /**
     * The number of columns to span on small devices (≥576px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    sm: column,
    /**
     * The number of columns to span on medium devices (≥768px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    md: column,
    /**
     * The number of columns to span on large devices (≥992px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    lg: column,
    /**
     * The number of columns to span on extra large devices (≥1200px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    xl: column,
    /**
     * The number of columns to span on extra extra large devices (≥1400px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    xxl: column,
};
function useCol({ as, bsPrefix, className, ...props }) {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'col');
    const spans = [];
    const classes = [];
    DEVICE_SIZES.forEach((brkPoint) => {
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let span;
        let offset;
        let order;
        if (typeof propValue === 'object' && propValue != null) {
            ({ span, offset, order } = propValue);
        }
        else {
            span = propValue;
        }
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (span)
            spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
        if (order != null)
            classes.push(`order${infix}-${order}`);
        if (offset != null)
            classes.push(`offset${infix}-${offset}`);
    });
    return [
        { ...props, className: classNames(className, ...spans, ...classes) },
        {
            as,
            bsPrefix,
            spans,
        },
    ];
}
const Col = React.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
(props, ref) => {
    const [{ className, ...colProps }, { as: Component = 'div', bsPrefix, spans },] = useCol(props);
    return (React.createElement(Component, { ...colProps, ref: ref, className: classNames(className, !spans.length && bsPrefix) }));
});
Col.displayName = 'Col';
Col.propTypes = propTypes;

export { Col };
