'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var propTypesExtra = require('prop-types-extra');
var uncontrollable = require('uncontrollable');
var useEventCallback = require('@restart/hooks/useEventCallback');
var Transition = require('react-transition-group/Transition');
var transitionEndListener = require('../utils/transitionEndListener');
var triggerBrowserReflow = require('../utils/triggerBrowserReflow');
var TransitionWrapper = require('../utils/TransitionWrapper');
var createWithBsPrefix = require('../utils/createWithBsPrefix');
var divWithClassName = require('../utils/divWithClassName');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var useEventCallback__default = /*#__PURE__*/_interopDefaultLegacy(useEventCallback);
var transitionEndListener__default = /*#__PURE__*/_interopDefaultLegacy(transitionEndListener);
var triggerBrowserReflow__default = /*#__PURE__*/_interopDefaultLegacy(triggerBrowserReflow);
var TransitionWrapper__default = /*#__PURE__*/_interopDefaultLegacy(TransitionWrapper);
var createWithBsPrefix__default = /*#__PURE__*/_interopDefaultLegacy(createWithBsPrefix);
var divWithClassName__default = /*#__PURE__*/_interopDefaultLegacy(divWithClassName);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const propTypes$2 = {
    /**
     * Show the component; triggers the fade in or fade out animation
     */
    in: PropTypes__default["default"].bool,
    /**
     * Wait until the first "enter" transition to mount the component (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the component (remove it from the DOM) when it is faded out
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * Run the fade in animation when the component mounts, if it is initially
     * shown
     */
    appear: PropTypes__default["default"].bool,
    /**
     * Duration of the fade animation in milliseconds, to ensure that finishing
     * callbacks are fired even if the original browser transition end events are
     * canceled
     */
    timeout: PropTypes__default["default"].number,
    /**
     * Callback fired before the component fades in
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to fade in
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the has component faded in
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired before the component fades out
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to fade out
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has faded out
     */
    onExited: PropTypes__default["default"].func,
    /**
     * You must provide a single JSX child element to this component and that element cannot be a \<React.Fragment\>
     */
    children: PropTypes__default["default"].element.isRequired,
    /**
     * Applies additional specified classes during the transition. Takes an object
     * where the keys correspond to the Transition status
     */
    transitionClasses: PropTypes__default["default"].object,
};
const defaultProps$2 = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
};
const fadeStyles = {
    [Transition.ENTERING]: 'show',
    [Transition.ENTERED]: 'show',
};
const Fade = React__namespace.forwardRef(({ className, children, transitionClasses = {}, ...props }, ref) => {
    const handleEnter = React.useCallback((node, isAppearing) => {
        triggerBrowserReflow__default["default"](node);
        props.onEnter?.(node, isAppearing);
    }, [props]);
    return (React__namespace.createElement(TransitionWrapper__default["default"], { ref: ref, addEndListener: transitionEndListener__default["default"], ...props, onEnter: handleEnter, childRef: children.ref }, (status, innerProps) => React__namespace.cloneElement(children, {
        ...innerProps,
        className: classNames__default["default"]('fade', className, children.props.className, 
        //@ts-ignore
        fadeStyles[status], transitionClasses[status]),
    })));
});
Fade.propTypes = propTypes$2;
Fade.defaultProps = defaultProps$2;
Fade.displayName = 'Fade';

const propTypes$1 = {
    'aria-label': PropTypes__default["default"].string,
    onClick: PropTypes__default["default"].func,
    /**
     * Render different color variant for the button.
     *
     * Omitting this will render the default dark color.
     */
    variant: PropTypes__default["default"].oneOf(['white']),
};
const defaultProps$1 = {
    'aria-label': 'Close',
};
const CloseButton = React__namespace.forwardRef(({ className, variant, ...props }, ref) => (React__namespace.createElement("button", { ref: ref, type: "button", className: classNames__default["default"]('btn-close', variant && `btn-close-${variant}`, className), ...props })));
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes$1;
CloseButton.defaultProps = defaultProps$1;

const AlertLink = createWithBsPrefix__default["default"]('alert-link', {
    Component: 'a',
});

const DivStyledAsH4 = divWithClassName__default["default"]('h4');
const AlertHeading = createWithBsPrefix__default["default"]('alert-heading', {
    Component: DivStyledAsH4,
});

const propTypes = {
    /**
     * @default 'alert'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The Alert visual variant
     *
     * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light'}
     */
    variant: PropTypes__default["default"].string,
    /**
     * Renders a properly aligned dismiss button, as well as
     * adding extra horizontal padding to the Alert.
     */
    dismissible: PropTypes__default["default"].bool,
    /**
     * Controls the visual state of the Alert.
     *
     * @controllable onClose
     */
    show: PropTypes__default["default"].bool,
    /**
     * Callback fired when alert is closed.
     *
     * @controllable show
     */
    onClose: PropTypes__default["default"].func,
    /**
     * Sets the text for alert close button.
     */
    closeLabel: PropTypes__default["default"].string,
    /**
     * Animate the alert dismissal. Defaults to using `<Fade>` animation or use
     * `false` to disable. A custom `react-transition-group` Transition can also
     * be provided.
     */
    transition: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, propTypesExtra.elementType]),
};
const defaultProps = {
    variant: 'primary',
    show: true,
    transition: Fade,
    closeLabel: 'Close alert',
};
const Alert = React__namespace.forwardRef((uncontrolledProps, ref) => {
    const { bsPrefix, show, as: Component = 'div', closeLabel, className, children, variant, onClose, dismissible, transition, ...props } = uncontrollable.useUncontrolled(uncontrolledProps, {
        show: 'onClose',
    });
    const prefix = useBootstrapPrefix(bsPrefix, 'alert');
    const handleClose = useEventCallback__default["default"]((e) => {
        if (onClose) {
            onClose(false, e);
        }
    });
    const Transition = transition === true ? Fade : transition;
    const alert = (React__namespace.createElement(SGDSWrapper, { as: Component, role: "alert", ...(!Transition ? props : undefined), ref: ref, className: classNames__default["default"](className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`) },
        children,
        dismissible && (React__namespace.createElement(CloseButton, { onClick: handleClose, "aria-label": closeLabel, className: `btn-sm` }))));
    if (!Transition)
        return show ? alert : null;
    return (React__namespace.createElement(Transition, { unmountOnExit: true, ...props, ref: undefined, in: show }, alert));
});
Alert.displayName = 'Alert';
Alert.defaultProps = defaultProps;
Alert.propTypes = propTypes;
var Alert$1 = Object.assign(Alert, {
    Link: AlertLink,
    Heading: AlertHeading,
});

exports.Alert = Alert$1;
exports.AlertHeading = AlertHeading;
exports.AlertLink = AlertLink;
