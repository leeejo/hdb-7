'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var uncontrollable = require('uncontrollable');
var css = require('dom-helpers/css');
var Transition = require('react-transition-group/Transition');
var transitionEnd = require('dom-helpers/transitionEnd');
var useMergedRefs = require('@restart/hooks/useMergedRefs');
var ReactDOM = require('react-dom');
var propTypesExtra = require('prop-types-extra');
var useEventCallback = require('@restart/hooks/useEventCallback');
var camelize = require('dom-helpers/camelize');
var Anchor = require('@restart/ui/Anchor');
var Button$1 = require('@restart/ui/Button');
var warning = require('warning');
var DropdownToggle$1 = require('@restart/ui/DropdownToggle');
var DropdownContext$1 = require('@restart/ui/DropdownContext');
require('invariant');
var BaseDropdown = require('@restart/ui/Dropdown');
var DropdownItem$1 = require('@restart/ui/DropdownItem');
var DropdownMenu$1 = require('@restart/ui/DropdownMenu');
var useIsomorphicEffect = require('@restart/hooks/useIsomorphicEffect');
var addEventListener = require('dom-helpers/addEventListener');
var canUseDOM = require('dom-helpers/canUseDOM');
var ownerDocument = require('dom-helpers/ownerDocument');
var removeEventListener = require('dom-helpers/removeEventListener');
var getScrollbarSize = require('dom-helpers/scrollbarSize');
var useCallbackRef = require('@restart/hooks/useCallbackRef');
var useWillUnmount = require('@restart/hooks/useWillUnmount');
var BaseModal = require('@restart/ui/Modal');
var addClass = require('dom-helpers/addClass');
var qsa = require('dom-helpers/querySelectorAll');
var removeClass = require('dom-helpers/removeClass');
var ModalManager = require('@restart/ui/ModalManager');
var BaseNav = require('@restart/ui/Nav');
var NavItem$1 = require('@restart/ui/NavItem');
var SelectableContext = require('@restart/ui/SelectableContext');
var BaseOverlay = require('@restart/ui/Overlay');
var hasClass = require('dom-helpers/hasClass');
var contains = require('dom-helpers/contains');
var useTimeout = require('@restart/hooks/useTimeout');
var hooks = require('@restart/hooks');
var BaseTabs = require('@restart/ui/Tabs');
var TabContext = require('@restart/ui/TabContext');
var TabPanel = require('@restart/ui/TabPanel');
var NoopTransition = require('@restart/ui/NoopTransition');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var css__default = /*#__PURE__*/_interopDefaultLegacy(css);
var Transition__default = /*#__PURE__*/_interopDefaultLegacy(Transition);
var transitionEnd__default = /*#__PURE__*/_interopDefaultLegacy(transitionEnd);
var useMergedRefs__default = /*#__PURE__*/_interopDefaultLegacy(useMergedRefs);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
var useEventCallback__default = /*#__PURE__*/_interopDefaultLegacy(useEventCallback);
var camelize__default = /*#__PURE__*/_interopDefaultLegacy(camelize);
var Anchor__default = /*#__PURE__*/_interopDefaultLegacy(Anchor);
var warning__default = /*#__PURE__*/_interopDefaultLegacy(warning);
var DropdownContext__default = /*#__PURE__*/_interopDefaultLegacy(DropdownContext$1);
var BaseDropdown__default = /*#__PURE__*/_interopDefaultLegacy(BaseDropdown);
var useIsomorphicEffect__default = /*#__PURE__*/_interopDefaultLegacy(useIsomorphicEffect);
var addEventListener__default = /*#__PURE__*/_interopDefaultLegacy(addEventListener);
var canUseDOM__default = /*#__PURE__*/_interopDefaultLegacy(canUseDOM);
var ownerDocument__default = /*#__PURE__*/_interopDefaultLegacy(ownerDocument);
var removeEventListener__default = /*#__PURE__*/_interopDefaultLegacy(removeEventListener);
var getScrollbarSize__default = /*#__PURE__*/_interopDefaultLegacy(getScrollbarSize);
var useCallbackRef__default = /*#__PURE__*/_interopDefaultLegacy(useCallbackRef);
var useWillUnmount__default = /*#__PURE__*/_interopDefaultLegacy(useWillUnmount);
var BaseModal__default = /*#__PURE__*/_interopDefaultLegacy(BaseModal);
var addClass__default = /*#__PURE__*/_interopDefaultLegacy(addClass);
var qsa__default = /*#__PURE__*/_interopDefaultLegacy(qsa);
var removeClass__default = /*#__PURE__*/_interopDefaultLegacy(removeClass);
var ModalManager__default = /*#__PURE__*/_interopDefaultLegacy(ModalManager);
var BaseNav__default = /*#__PURE__*/_interopDefaultLegacy(BaseNav);
var SelectableContext__default = /*#__PURE__*/_interopDefaultLegacy(SelectableContext);
var BaseOverlay__default = /*#__PURE__*/_interopDefaultLegacy(BaseOverlay);
var hasClass__default = /*#__PURE__*/_interopDefaultLegacy(hasClass);
var contains__default = /*#__PURE__*/_interopDefaultLegacy(contains);
var useTimeout__default = /*#__PURE__*/_interopDefaultLegacy(useTimeout);
var BaseTabs__default = /*#__PURE__*/_interopDefaultLegacy(BaseTabs);
var TabContext__default = /*#__PURE__*/_interopDefaultLegacy(TabContext);
var NoopTransition__default = /*#__PURE__*/_interopDefaultLegacy(NoopTransition);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
const { Consumer, Provider } = ThemeContext;
function ThemeProvider({ prefixes = {}, dir, children }) {
    const contextValue = React.useMemo(() => ({
        prefixes: { ...prefixes },
        dir,
    }), [prefixes, dir]);
    return React__namespace.createElement(Provider, { value: contextValue }, children);
}
ThemeProvider.propTypes = {
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
};
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
// `sgds-${defaultPrefix}`
function useIsRTL() {
    const { dir } = React.useContext(ThemeContext);
    return dir === 'rtl';
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

function parseDuration(node, property) {
    const str = css__default["default"](node, property) || '';
    const mult = str.indexOf('ms') === -1 ? 1000 : 1;
    return parseFloat(str) * mult;
}
function transitionEndListener(element, handler) {
    const duration = parseDuration(element, 'transitionDuration');
    const delay = parseDuration(element, 'transitionDelay');
    const remove = transitionEnd__default["default"](element, (e) => {
        if (e.target === element) {
            remove();
            handler(e);
        }
    }, duration + delay);
}

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */
function createChainedFunction(...funcs) {
    return funcs
        .filter((f) => f != null)
        .reduce((acc, f) => {
        if (typeof f !== 'function') {
            throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
        }
        if (acc === null)
            return f;
        return function chainedFunction(...args) {
            // @ts-ignore
            acc.apply(this, args);
            // @ts-ignore
            f.apply(this, args);
        };
    }, null);
}

// reading a dimension prop will cause the browser to recalculate,
// which will let our animations work
function triggerBrowserReflow(node) {
    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
    node.offsetHeight;
}

function safeFindDOMNode(componentOrElement) {
    if (componentOrElement && 'setState' in componentOrElement) {
        return ReactDOM__default["default"].findDOMNode(componentOrElement);
    }
    return (componentOrElement ?? null);
}

// Normalizes Transition callbacks when nodeRef is used.
const TransitionWrapper = React__default["default"].forwardRef(({ onEnter, onEntering, onEntered, onExit, onExiting, onExited, addEndListener, children, childRef, ...props }, ref) => {
    const nodeRef = React.useRef(null);
    const mergedRef = useMergedRefs__default["default"](nodeRef, childRef);
    const attachRef = (r) => {
        mergedRef(safeFindDOMNode(r));
    };
    const normalize = (callback) => (param) => {
        if (callback && nodeRef.current) {
            callback(nodeRef.current, param);
        }
    };
    /* eslint-disable react-hooks/exhaustive-deps */
    const handleEnter = React.useCallback(normalize(onEnter), [onEnter]);
    const handleEntering = React.useCallback(normalize(onEntering), [onEntering]);
    const handleEntered = React.useCallback(normalize(onEntered), [onEntered]);
    const handleExit = React.useCallback(normalize(onExit), [onExit]);
    const handleExiting = React.useCallback(normalize(onExiting), [onExiting]);
    const handleExited = React.useCallback(normalize(onExited), [onExited]);
    const handleAddEndListener = React.useCallback(normalize(addEndListener), [
        addEndListener,
    ]);
    /* eslint-enable react-hooks/exhaustive-deps */
    return (React__default["default"].createElement(Transition__default["default"], { ref: ref, ...props, onEnter: handleEnter, onEntered: handleEntered, onEntering: handleEntering, onExit: handleExit, onExited: handleExited, onExiting: handleExiting, addEndListener: handleAddEndListener, nodeRef: nodeRef }, typeof children === 'function'
        ? (status, innerProps) => children(status, {
            ...innerProps,
            ref: attachRef,
        })
        : React__default["default"].cloneElement(children, {
            ref: attachRef,
        })));
});

const MARGINS = {
    height: ['marginTop', 'marginBottom'],
    width: ['marginLeft', 'marginRight'],
};
function getDefaultDimensionValue(dimension, elem) {
    const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
    const value = elem[offset];
    const margins = MARGINS[dimension];
    return (value +
        // @ts-ignore
        parseInt(css__default["default"](elem, margins[0]), 10) +
        // @ts-ignore
        parseInt(css__default["default"](elem, margins[1]), 10));
}
const collapseStyles = {
    [Transition.EXITED]: 'collapse',
    [Transition.EXITING]: 'collapsing',
    [Transition.ENTERING]: 'collapsing',
    [Transition.ENTERED]: 'collapse show',
};
const propTypes$1k = {
    /**
     * Show the component; triggers the expand or collapse animation
     */
    in: PropTypes__default["default"].bool,
    /**
     * Wait until the first "enter" transition to mount the component (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the component (remove it from the DOM) when it is collapsed
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * Run the expand animation when the component mounts, if it is initially
     * shown
     */
    appear: PropTypes__default["default"].bool,
    /**
     * Duration of the collapse animation in milliseconds, to ensure that
     * finishing callbacks are fired even if the original browser transition end
     * events are canceled
     */
    timeout: PropTypes__default["default"].number,
    /**
     * Callback fired before the component expands
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to expand
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has expanded
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired before the component collapses
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to collapse
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has collapsed
     */
    onExited: PropTypes__default["default"].func,
    /**
     * The dimension used when collapsing, or a function that returns the
     * dimension
     */
    dimension: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].oneOf(['height', 'width']),
        PropTypes__default["default"].func,
    ]),
    /**
     * Function that returns the height or width of the animating DOM node
     *
     * Allows for providing some custom logic for how much the Collapse component
     * should animate in its specified dimension. Called with the current
     * dimension prop value and the DOM node.
     *
     * @default element.offsetWidth | element.offsetHeight
     */
    getDimensionValue: PropTypes__default["default"].func,
    /**
     * ARIA role of collapsible element
     */
    role: PropTypes__default["default"].string,
    /**
     * You must provide a single JSX child element to this component and that element cannot be a \<React.Fragment\>
     */
    children: PropTypes__default["default"].element.isRequired,
};
const defaultProps$x = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    getDimensionValue: getDefaultDimensionValue,
};
const Collapse = React__default["default"].forwardRef(({ onEnter, onEntering, onEntered, onExit, onExiting, className, children, dimension = 'height', getDimensionValue = getDefaultDimensionValue, ...props }, ref) => {
    /* Compute dimension */
    const computedDimension = typeof dimension === 'function' ? dimension() : dimension;
    /* -- Expanding -- */
    const handleEnter = React.useMemo(() => createChainedFunction((elem) => {
        elem.style[computedDimension] = '0';
    }, onEnter), [computedDimension, onEnter]);
    const handleEntering = React.useMemo(() => createChainedFunction((elem) => {
        const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
        elem.style[computedDimension] = `${elem[scroll]}px`;
    }, onEntering), [computedDimension, onEntering]);
    const handleEntered = React.useMemo(() => createChainedFunction((elem) => {
        elem.style[computedDimension] = null;
    }, onEntered), [computedDimension, onEntered]);
    /* -- Collapsing -- */
    const handleExit = React.useMemo(() => createChainedFunction((elem) => {
        elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
        triggerBrowserReflow(elem);
    }, onExit), [onExit, getDimensionValue, computedDimension]);
    const handleExiting = React.useMemo(() => createChainedFunction((elem) => {
        elem.style[computedDimension] = null;
    }, onExiting), [computedDimension, onExiting]);
    return (React__default["default"].createElement(TransitionWrapper, { ref: ref, addEndListener: transitionEndListener, ...props, "aria-expanded": props.role ? props.in : null, onEnter: handleEnter, onEntering: handleEntering, onEntered: handleEntered, onExit: handleExit, onExiting: handleExiting, childRef: children.ref }, (state, innerProps) => React__default["default"].cloneElement(children, {
        ...innerProps,
        className: classNames__default["default"](className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal'),
    })));
});
// @ts-ignore
Collapse.propTypes = propTypes$1k;
// @ts-ignore
Collapse.defaultProps = defaultProps$x;

function isAccordionItemSelected(activeEventKey, eventKey) {
    return Array.isArray(activeEventKey)
        ? activeEventKey.includes(eventKey)
        : activeEventKey === eventKey;
}
const context$8 = React__namespace.createContext({});
context$8.displayName = 'AccordionContext';

const propTypes$1j = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /**
     * A key that corresponds to the toggler that triggers this collapse's expand or collapse.
     */
    eventKey: PropTypes__default["default"].string.isRequired,
    /** Children prop should only contain a single child, and is enforced as such */
    children: PropTypes__default["default"].element.isRequired,
};
const AccordionCollapse = React__namespace.forwardRef(({ as: Component = 'div', bsPrefix, className, children, eventKey, ...props }, ref) => {
    const { activeEventKey } = React.useContext(context$8);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');
    return (React__namespace.createElement(Collapse, { ref: ref, in: isAccordionItemSelected(activeEventKey, eventKey), ...props, className: classNames__default["default"](className, bsPrefix) },
        React__namespace.createElement(Component, null, React__namespace.Children.only(children))));
});
AccordionCollapse.propTypes = propTypes$1j;
AccordionCollapse.displayName = 'AccordionCollapse';

const context$7 = React__namespace.createContext({
    eventKey: '',
});
context$7.displayName = 'AccordionItemContext';

const propTypes$1i = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-body' */
    bsPrefix: PropTypes__default["default"].string,
};
const AccordionBody = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');
    const { eventKey } = React.useContext(context$7);
    return (React__namespace.createElement(AccordionCollapse, { eventKey: eventKey },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) })));
});
AccordionBody.propTypes = propTypes$1i;
AccordionBody.displayName = 'AccordionBody';

const propTypes$1h = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-button' */
    bsPrefix: PropTypes__default["default"].string,
    /** A callback function for when this component is clicked */
    onClick: PropTypes__default["default"].func,
};
function useAccordionButton(eventKey, onClick) {
    const { activeEventKey, onSelect, alwaysOpen } = React.useContext(context$8);
    return (e) => {
        /*
          Compare the event key in context with the given event key.
          If they are the same, then collapse the component.
        */
        let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
        if (alwaysOpen) {
            if (Array.isArray(activeEventKey)) {
                if (activeEventKey.includes(eventKey)) {
                    eventKeyPassed = activeEventKey.filter((k) => k !== eventKey);
                }
                else {
                    eventKeyPassed = [...activeEventKey, eventKey];
                }
            }
            else {
                // activeEventKey is undefined.
                eventKeyPassed = [eventKey];
            }
        }
        onSelect?.(eventKeyPassed, e);
        onClick?.(e);
    };
}
const AccordionButton = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'button', bsPrefix, className, onClick, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');
    const { eventKey } = React.useContext(context$7);
    const accordionOnClick = useAccordionButton(eventKey, onClick);
    const { activeEventKey } = React.useContext(context$8);
    if (Component === 'button') {
        props.type = 'button';
    }
    return (React__namespace.createElement(Component, { ref: ref, onClick: accordionOnClick, ...props, "aria-expanded": eventKey === activeEventKey, className: classNames__default["default"](className, bsPrefix, eventKey !== activeEventKey && 'collapsed') }));
});
AccordionButton.propTypes = propTypes$1h;
AccordionButton.displayName = 'AccordionButton';

const propTypes$1g = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-header' */
    bsPrefix: PropTypes__default["default"].string,
    /** Click handler for the `AccordionButton` element */
    onClick: PropTypes__default["default"].func,
};
const AccordionHeader = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'h2', bsPrefix, className, children, onClick, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) },
        React__namespace.createElement(AccordionButton, { onClick: onClick }, children)));
});
AccordionHeader.propTypes = propTypes$1g;
AccordionHeader.displayName = 'AccordionHeader';

const propTypes$1f = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-item' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * A unique key used to control this item's collapse/expand.
     * @required
     */
    eventKey: PropTypes__default["default"].string.isRequired,
};
const AccordionItem = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', bsPrefix, className, eventKey, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');
    const contextValue = React.useMemo(() => ({
        eventKey,
    }), [eventKey]);
    return (React__namespace.createElement(context$7.Provider, { value: contextValue },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) })));
});
AccordionItem.propTypes = propTypes$1f;
AccordionItem.displayName = 'AccordionItem';

const propTypes$1e = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion' */
    bsPrefix: PropTypes__default["default"].string,
    /** The current active key that corresponds to the currently expanded card */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** The default active key that is expanded on start */
    defaultActiveKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** Renders accordion edge-to-edge with its parent container */
    flush: PropTypes__default["default"].bool,
    /** Allow accordion items to stay open when another item is opened */
    alwaysOpen: PropTypes__default["default"].bool,
};
const Accordion = React__namespace.forwardRef((props, ref) => {
    const { 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div', activeKey, bsPrefix, className, onSelect, flush, alwaysOpen, ...controlledProps } = uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect',
    });
    const prefix = useBootstrapPrefix(bsPrefix, 'accordion');
    const contextValue = React.useMemo(() => ({
        activeEventKey: activeKey,
        onSelect,
        alwaysOpen,
    }), [activeKey, onSelect, alwaysOpen]);
    return (React__namespace.createElement(context$8.Provider, { value: contextValue },
        React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...controlledProps, className: classNames__default["default"](className, prefix, flush && `${prefix}-flush`) })));
});
Accordion.displayName = 'Accordion';
Accordion.propTypes = propTypes$1e;
var Accordion$1 = Object.assign(Accordion, {
    Button: AccordionButton,
    Collapse: AccordionCollapse,
    Item: AccordionItem,
    Header: AccordionHeader,
    Body: AccordionBody,
});

const propTypes$1d = {
    /**
     * Show the component; triggers the fade in or fade out animation
     */
    in: PropTypes__default["default"].bool,
    /**
     * Wait until the first "enter" transition to mount the component (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the component (remove it from the DOM) when it is faded out
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * Run the fade in animation when the component mounts, if it is initially
     * shown
     */
    appear: PropTypes__default["default"].bool,
    /**
     * Duration of the fade animation in milliseconds, to ensure that finishing
     * callbacks are fired even if the original browser transition end events are
     * canceled
     */
    timeout: PropTypes__default["default"].number,
    /**
     * Callback fired before the component fades in
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to fade in
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the has component faded in
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired before the component fades out
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to fade out
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has faded out
     */
    onExited: PropTypes__default["default"].func,
    /**
     * You must provide a single JSX child element to this component and that element cannot be a \<React.Fragment\>
     */
    children: PropTypes__default["default"].element.isRequired,
    /**
     * Applies additional specified classes during the transition. Takes an object
     * where the keys correspond to the Transition status
     */
    transitionClasses: PropTypes__default["default"].object,
};
const defaultProps$w = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
};
const fadeStyles$1 = {
    [Transition.ENTERING]: 'show',
    [Transition.ENTERED]: 'show',
};
const Fade = React__namespace.forwardRef(({ className, children, transitionClasses = {}, ...props }, ref) => {
    const handleEnter = React.useCallback((node, isAppearing) => {
        triggerBrowserReflow(node);
        props.onEnter?.(node, isAppearing);
    }, [props]);
    return (React__namespace.createElement(TransitionWrapper, { ref: ref, addEndListener: transitionEndListener, ...props, onEnter: handleEnter, childRef: children.ref }, (status, innerProps) => React__namespace.cloneElement(children, {
        ...innerProps,
        className: classNames__default["default"]('fade', className, children.props.className, 
        //@ts-ignore
        fadeStyles$1[status], transitionClasses[status]),
    })));
});
Fade.propTypes = propTypes$1d;
Fade.defaultProps = defaultProps$w;
Fade.displayName = 'Fade';

const propTypes$1c = {
    'aria-label': PropTypes__default["default"].string,
    onClick: PropTypes__default["default"].func,
    /**
     * Render different color variant for the button.
     *
     * Omitting this will render the default dark color.
     */
    variant: PropTypes__default["default"].oneOf(['white']),
};
const defaultProps$v = {
    'aria-label': 'Close',
};
const CloseButton = React__namespace.forwardRef(({ className, variant, ...props }, ref) => (React__namespace.createElement("button", { ref: ref, type: "button", className: classNames__default["default"]('btn-close', variant && `btn-close-${variant}`, className), ...props })));
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes$1c;
CloseButton.defaultProps = defaultProps$v;

const pascalCase = (str) => str[0].toUpperCase() + camelize__default["default"](str).slice(1);
// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`
function createWithBsPrefix(prefix, { displayName = pascalCase(prefix), Component, defaultProps, propTypes } = {}) {
    const BsComponent = React__namespace.forwardRef(({ className, bsPrefix, as: Tag = Component || 'div', ...props }, ref) => {
        const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);
        return (React__namespace.createElement(Tag, { ref: ref, className: classNames__default["default"](className, resolvedPrefix), ...props }));
    });
    BsComponent.defaultProps = defaultProps;
    BsComponent.propTypes = propTypes;
    BsComponent.displayName = displayName;
    return BsComponent;
}

const AlertLink = createWithBsPrefix('alert-link', {
    Component: 'a',
});

var divWithClassName = (className) => React__namespace.forwardRef((p, ref) => (React__namespace.createElement("div", { ...p, ref: ref, className: classNames__default["default"](p.className, className) })));

const DivStyledAsH4 = divWithClassName('h4');
const AlertHeading = createWithBsPrefix('alert-heading', {
    Component: DivStyledAsH4,
});

const propTypes$1b = {
    /**
     * @default 'alert'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The Alert visual variant
     *
     * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light'}
     */
    variant: PropTypes__default["default"].string,
    /**
     * Renders a properly aligned dismiss button, as well as
     * adding extra horizontal padding to the Alert.
     */
    dismissible: PropTypes__default["default"].bool,
    /**
     * Controls the visual state of the Alert.
     *
     * @controllable onClose
     */
    show: PropTypes__default["default"].bool,
    /**
     * Callback fired when alert is closed.
     *
     * @controllable show
     */
    onClose: PropTypes__default["default"].func,
    /**
     * Sets the text for alert close button.
     */
    closeLabel: PropTypes__default["default"].string,
    /**
     * Animate the alert dismissal. Defaults to using `<Fade>` animation or use
     * `false` to disable. A custom `react-transition-group` Transition can also
     * be provided.
     */
    transition: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, propTypesExtra.elementType]),
};
const defaultProps$u = {
    variant: 'primary',
    show: true,
    transition: Fade,
    closeLabel: 'Close alert',
};
const Alert = React__namespace.forwardRef((uncontrolledProps, ref) => {
    const { bsPrefix, show, as: Component = 'div', closeLabel, className, children, variant, onClose, dismissible, transition, ...props } = uncontrollable.useUncontrolled(uncontrolledProps, {
        show: 'onClose',
    });
    const prefix = useBootstrapPrefix(bsPrefix, 'alert');
    const handleClose = useEventCallback__default["default"]((e) => {
        if (onClose) {
            onClose(false, e);
        }
    });
    const Transition = transition === true ? Fade : transition;
    const alert = (React__namespace.createElement(SGDSWrapper, { as: Component, role: "alert", ...(!Transition ? props : undefined), ref: ref, className: classNames__default["default"](className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`) },
        children,
        dismissible && (React__namespace.createElement(CloseButton, { onClick: handleClose, "aria-label": closeLabel, className: `btn-sm` }))));
    if (!Transition)
        return show ? alert : null;
    return (React__namespace.createElement(Transition, { unmountOnExit: true, ...props, ref: undefined, in: show }, alert));
});
Alert.displayName = 'Alert';
Alert.defaultProps = defaultProps$u;
Alert.propTypes = propTypes$1b;
var Alert$1 = Object.assign(Alert, {
    Link: AlertLink,
    Heading: AlertHeading,
});

const propTypes$1a = {
    /** @default 'badge' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The visual style of the badge
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}
     */
    bg: PropTypes__default["default"].string,
    /**
     * Add the `pill` modifier to make badges more rounded with
     * some additional horizontal padding
     */
    pill: PropTypes__default["default"].bool,
    /**
     * Sets badge text color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}
     */
    text: PropTypes__default["default"].string,
    /** @default span */
    as: PropTypes__default["default"].elementType,
    textIndicator: PropTypes__default["default"].bool,
    dotIndicator: PropTypes__default["default"].bool,
};
const defaultProps$t = {
    bg: 'primary',
    pill: false,
    textIndicator: false,
    dotIndicator: false
};
const Badge = React__namespace.forwardRef(({ bsPrefix, bg, pill, text, className, textIndicator, dotIndicator, as: Component = 'span', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'badge');
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...props, className: classNames__default["default"](className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`, (textIndicator || dotIndicator) && 'position-absolute top-0 start-100 translate-middle', dotIndicator && 'p-2 border border-light rounded-circle') },
        dotIndicator && React__namespace.createElement("span", { className: 'visually-hidden' }, "New alerts"),
        props.children));
});
Badge.displayName = 'Badge';
Badge.propTypes = propTypes$1a;
Badge.defaultProps = defaultProps$t;

const propTypes$19 = {
    /**
     * @default 'breadcrumb-item'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Adds a visual "active" state to a Breadcrumb
     * Item and disables the link.
     */
    active: PropTypes__default["default"].bool,
    /**
     * `href` attribute for the inner `a` element
     */
    href: PropTypes__default["default"].string,
    /**
     * You can use a custom element type for this component's inner link.
     */
    linkAs: PropTypes__default["default"].elementType,
    /**
     * `title` attribute for the inner `a` element
     */
    title: PropTypes__default["default"].node,
    /**
     * `target` attribute for the inner `a` element
     */
    target: PropTypes__default["default"].string,
    /**
     * Additional props passed as-is to the underlying link for non-active items.
     */
    linkProps: PropTypes__default["default"].object,
    as: PropTypes__default["default"].elementType,
};
const defaultProps$s = {
    active: false,
    linkProps: {},
};
const BreadcrumbItem = React__namespace.forwardRef(({ bsPrefix, active, children, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'li', linkAs: LinkComponent = Anchor__default["default"], linkProps, href, title, target, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](prefix, className, { active }), "aria-current": active ? 'page' : undefined }, active ? (children) : (React__namespace.createElement(LinkComponent, { ...linkProps, href: href, title: title, target: target }, children))));
});
BreadcrumbItem.displayName = 'BreadcrumbItem';
BreadcrumbItem.propTypes = propTypes$19;
BreadcrumbItem.defaultProps = defaultProps$s;

const propTypes$18 = {
    /**
     * @default 'breadcrumb'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * ARIA label for the nav element
     * https://www.w3.org/TR/wai-aria-practices/#breadcrumb
     */
    ariaLabel: PropTypes__default["default"].string,
    /**
     * Additional props passed as-is to the underlying `<ol>` element
     */
    listProps: PropTypes__default["default"].object,
    as: PropTypes__default["default"].elementType,
};
const defaultProps$r = {
    ariaLabel: 'breadcrumb',
    listProps: {},
};
const Breadcrumb = React__namespace.forwardRef(({ bsPrefix, className, listProps, children, ariaLabel, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as = 'nav', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');
    return (React__namespace.createElement(SGDSWrapper, { as: as, "aria-label": ariaLabel, className: className, ref: ref, ...props },
        React__namespace.createElement("ol", { ...listProps, className: classNames__default["default"](prefix, listProps?.className) }, children)));
});
Breadcrumb.displayName = 'Breadcrumb';
Breadcrumb.propTypes = propTypes$18;
Breadcrumb.defaultProps = defaultProps$r;
var Breadcrumb$1 = Object.assign(Breadcrumb, {
    Item: BreadcrumbItem,
});

const propTypes$17 = {
    /**
     * @default 'btn'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * One or more button variant combinations
     *
     * buttons may be one of a variety of visual variants such as:
     *
     * `'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'link'`
     *
     * as well as "outline" versions (prefixed by 'outline-*')
     *
     * `'outline-primary', 'outline-secondary', 'outline-success', 'outline-danger', 'outline-warning', 'outline-info', 'outline-dark', 'outline-light'`
     */
    variant: PropTypes__default["default"].string,
    /**
     * Specifies a large or small button.
     *
     * @type ('sm'|'lg')
     */
    size: PropTypes__default["default"].string,
    /** Manually set the visual state of the button to `:active` */
    active: PropTypes__default["default"].bool,
    /**
     * Disables the Button, preventing mouse events,
     * even if the underlying component is an `<a>` element
     */
    disabled: PropTypes__default["default"].bool,
    /** Providing a `href` will render an `<a>` element, _styled_ as a button. */
    href: PropTypes__default["default"].string,
    /**
     * Defines HTML button type attribute.
     *
     * @default 'button'
     */
    type: PropTypes__default["default"].oneOf(['button', 'reset', 'submit', null]),
    as: PropTypes__default["default"].elementType,
};
const defaultProps$q = {
    variant: 'primary',
    active: false,
    disabled: false,
};
const Button = React__namespace.forwardRef(({ as, bsPrefix, variant, size, active, className, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'btn');
    const [buttonProps, { tagName }] = Button$1.useButtonProps({
        tagName: as,
        ...props,
    });
    const Component = tagName;
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ...props, ...buttonProps, ref: ref, className: classNames__default["default"](className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled') }));
});
Button.displayName = 'Button';
Button.propTypes = propTypes$17;
Button.defaultProps = defaultProps$q;

const propTypes$16 = {
    /**
     * @default 'btn-group'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Sets the size for all Buttons in the group.
     *
     * @type ('sm'|'lg')
     */
    size: PropTypes__default["default"].string,
    /** Make the set of Buttons appear vertically stacked. */
    vertical: PropTypes__default["default"].bool,
    /**
     * An ARIA role describing the button group. Usually the default
     * "group" role is fine. An `aria-label` or `aria-labelledby`
     * prop is also recommended.
     */
    role: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
};
const defaultProps$p = {
    vertical: false,
    role: 'group',
};
const ButtonGroup = React__namespace.forwardRef(({ bsPrefix, size, vertical, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...rest }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');
    let baseClass = prefix;
    if (vertical)
        baseClass = `${prefix}-vertical`;
    return (React__namespace.createElement(Component, { ...rest, ref: ref, className: classNames__default["default"](className, baseClass, size && `${prefix}-${size}`) }));
});
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.propTypes = propTypes$16;
ButtonGroup.defaultProps = defaultProps$p;

const propTypes$15 = {
    /**
     * @default 'card-img'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Defines image position inside
     * the card.
     *
     * @type {('top'|'bottom')}
     */
    variant: PropTypes__default["default"].oneOf(['top', 'bottom']),
    as: PropTypes__default["default"].elementType,
};
const CardImg = React__namespace.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
({ bsPrefix, className, variant, as: Component = 'img', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'card-img');
    return (React__namespace.createElement(Component, { ref: ref, className: classNames__default["default"](variant ? `${prefix}-${variant}` : prefix, className), ...props }));
});
CardImg.displayName = 'CardImg';
CardImg.propTypes = propTypes$15;

const context$6 = React__namespace.createContext(null);
context$6.displayName = 'CardHeaderContext';

const propTypes$14 = {
    /**
     * @default 'card-header'
     */
    bsPrefix: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
};
const CardHeader = React__namespace.forwardRef(({ bsPrefix, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'card-header');
    const contextValue = React.useMemo(() => ({
        cardHeaderBsPrefix: prefix,
    }), [prefix]);
    return (React__namespace.createElement(context$6.Provider, { value: contextValue },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, prefix) })));
});
CardHeader.displayName = 'CardHeader';
CardHeader.propTypes = propTypes$14;

const CardTitle = createWithBsPrefix('card-title', {
    Component: 'h3',
});
const DivStyledAsH6 = divWithClassName('h6');
const CardSubtitle = createWithBsPrefix('card-subtitle', {
    Component: DivStyledAsH6,
});
const CardLink = createWithBsPrefix('card-link', { Component: 'a' });
const CardStretchedLink = createWithBsPrefix('card-link stretched-link', {
    Component: 'a',
});
const CardText = createWithBsPrefix('card-text', { Component: 'p' });
const CardFooter = createWithBsPrefix('card-footer');
const CardImgOverlay = createWithBsPrefix('card-img-overlay');
const CardUnit = createWithBsPrefix('card-unit', { Component: 'div' });
const CardBody = createWithBsPrefix('card-body');

const propTypes$13 = {
    /**
     * @default 'card'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Sets card background
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    bg: PropTypes__default["default"].string,
    /**
     * Sets card text color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light'|'white'|'muted')}
     */
    text: PropTypes__default["default"].string,
    /**
     * Sets card border color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    border: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    variant: PropTypes__default["default"].oneOf([
        'card-action',
        'card-action-quantity-toggle',
    ]),
};
const Card = React__namespace.forwardRef(({ bsPrefix, className, bg, text, border, children, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'card');
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...props, className: classNames__default["default"](className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`) }, children));
});
Card.displayName = 'Card';
Card.propTypes = propTypes$13;
var Card$1 = Object.assign(Card, {
    Img: CardImg,
    Title: CardTitle,
    Subtitle: CardSubtitle,
    Body: CardBody,
    Link: CardLink,
    StretchedLink: CardStretchedLink,
    Text: CardText,
    Header: CardHeader,
    Footer: CardFooter,
    ImgOverlay: CardImgOverlay,
    Unit: CardUnit,
});

const propTypes$12 = {
    /**
     * Specify whether the feedback is for valid or invalid fields
     *
     * @type {('valid'|'invalid')}
     */
    type: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
};
const Feedback = React__namespace.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
({ as: Component = 'div', className, type = 'valid', ...props }, ref) => {
    return (React__namespace.createElement(Component, { ...props, ref: ref, className: classNames__default["default"](className, `${type}-feedback`) }));
});
Feedback.displayName = 'Feedback';
Feedback.propTypes = propTypes$12;

const FormContext = React__namespace.createContext({});

const propTypes$11 = {
    /**
     * @default 'form-check-input'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The underlying HTML element to use when rendering the FormCheckInput.
     *
     * @type {('input'|elementType)}
     */
    as: PropTypes__default["default"].elementType,
    /** A HTML id attribute, necessary for proper form accessibility. */
    id: PropTypes__default["default"].string,
    /** The type of checkable. */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox']).isRequired,
    /** Manually style the input as valid */
    isValid: PropTypes__default["default"].bool,
    /** Manually style the input as invalid */
    isInvalid: PropTypes__default["default"].bool,
};
const FormCheckInput = React__namespace.forwardRef(({ id, bsPrefix, className, type = 'checkbox', isValid = false, isInvalid = false, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input', ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');
    return (React__namespace.createElement(Component, { ...props, ref: ref, type: type, id: id || controlId, className: classNames__default["default"](className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid') }));
});
FormCheckInput.displayName = 'FormCheckInput';
FormCheckInput.propTypes = propTypes$11;

const propTypes$10 = {
    /**
     * @default 'form-check-label'
     */
    bsPrefix: PropTypes__default["default"].string,
    /** The HTML for attribute for associating the label with an input */
    htmlFor: PropTypes__default["default"].string,
};
const FormCheckLabel = React__namespace.forwardRef(({ bsPrefix, className, htmlFor, ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-label');
    return (React__namespace.createElement("label", { ...props, ref: ref, htmlFor: htmlFor || controlId, className: classNames__default["default"](className, bsPrefix) }));
});
FormCheckLabel.displayName = 'FormCheckLabel';
FormCheckLabel.propTypes = propTypes$10;

const propTypes$$ = {
    /**
     * @default 'form-check'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * bsPrefix override for the base switch class.
     *
     * @default 'form-switch'
     */
    bsSwitchPrefix: PropTypes__default["default"].string,
    /**
     * The FormCheck `ref` will be forwarded to the underlying input element,
     * which means it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
    /**
     * The underlying HTML element to use when rendering the FormCheck.
     *
     * @type {('input'|elementType)}
     */
    as: PropTypes__default["default"].elementType,
    /**
     * A HTML id attribute, necessary for proper form accessibility.
     * An id is recommended for allowing label clicks to toggle the check control.
     *
     * This is **required** when `type="switch"` due to how they are rendered.
     */
    id: PropTypes__default["default"].string,
    /**
     * Groups controls horizontally with other `FormCheck`s.
     */
    inline: PropTypes__default["default"].bool,
    /**
     * Disables the control.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * `title` attribute for the underlying `FormCheckLabel`.
     */
    title: PropTypes__default["default"].string,
    /**
     * Label for the control.
     */
    label: PropTypes__default["default"].node,
    /**
     * aria-label for label element.
     */
    ariaLabel: PropTypes__default["default"].string,
    /**
     * The type of checkable.
     * @type {('radio' | 'checkbox' | 'switch')}
     */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox', 'switch']),
    /** Manually style the input as valid */
    isValid: PropTypes__default["default"].bool,
    /** Manually style the input as invalid */
    isInvalid: PropTypes__default["default"].bool,
    /** A message to display when the input is in a validation state */
    feedback: PropTypes__default["default"].node,
    feedbackType: PropTypes__default["default"].oneOf(['invalid', 'valid'])
};
const FormCheck = React__namespace.forwardRef(({ id, bsPrefix, bsSwitchPrefix, inline = false, disabled = false, isValid = false, isInvalid = false, feedback, feedbackType, className, style, title = '', type = 'checkbox', label, ariaLabel, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as = 'input', ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');
    bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');
    const { controlId } = React.useContext(FormContext);
    const innerFormContext = React.useMemo(() => ({
        controlId: id || controlId,
    }), [controlId, id]);
    const input = (React__namespace.createElement(FormCheckInput, { ...props, type: type === 'switch' ? 'checkbox' : type, ref: ref, isValid: isValid, isInvalid: isInvalid, disabled: disabled, as: as }));
    return (React__namespace.createElement(FormContext.Provider, { value: innerFormContext },
        React__namespace.createElement("div", { style: style, className: classNames__default["default"](className, label && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix) },
            input,
            React__namespace.createElement(FormCheckLabel, { title: title, "aria-label": ariaLabel }, label),
            feedback && React__namespace.createElement(Feedback, { type: feedbackType }, feedback))));
});
FormCheck.displayName = 'FormCheck';
FormCheck.propTypes = propTypes$$;
var FormCheck$1 = Object.assign(FormCheck, {
    Input: FormCheckInput,
    Label: FormCheckLabel,
});

const propTypes$_ = {
    /**
     * The type of checkable.
     * @type {('radio' | 'checkbox' | 'switch')}
     */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox', 'switch']),
    /**
     * Disables the control.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * Sets card background
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    bg: PropTypes__default["default"].string,
    /**
     * Sets card text color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light'|'white'|'muted')}
     */
    text: PropTypes__default["default"].string,
    /**
     * Sets card border color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    border: PropTypes__default["default"].string,
    /** Category title of the Card */
    categoryTitle: PropTypes__default["default"].node
};
const defaultProps$o = {
    disabled: false,
    type: 'checkbox',
};
const SelectableCard = ({ children, bg, text, border, categoryTitle, ...props }) => {
    const formCheckRef = React__namespace.useRef(null);
    const cardRef = React__namespace.useRef(null);
    const formCheckProps = props;
    const cardProps = { bg, text, border };
    const handleSelect = () => {
        formCheckRef?.current?.click();
    };
    return (React__namespace.createElement(Card$1, { ref: cardRef, onClick: handleSelect, tabIndex: 0, variant: "card-action", className: props.checked && !props.disabled
            ? 'is-active'
            : undefined, ...cardProps },
        React__namespace.createElement(Card$1.Body, null,
            React__namespace.createElement(Card$1.Subtitle, { as: "h6", className: "text-muted" },
                React__namespace.createElement("div", null, categoryTitle),
                React__namespace.createElement("div", { className: "card-input" },
                    React__namespace.createElement(FormCheck$1, { ref: formCheckRef, ...formCheckProps, onClick: handleSelect }))),
            children)));
};
SelectableCard.displayName = 'SelectableCard';
SelectableCard.defaultProps = defaultProps$o;
SelectableCard.propTypes = propTypes$_;

var CardGroup = createWithBsPrefix('card-group');

const DEVICE_SIZES$1 = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const colSize = PropTypes__default["default"].oneOfType([
    PropTypes__default["default"].bool,
    PropTypes__default["default"].number,
    PropTypes__default["default"].string,
    PropTypes__default["default"].oneOf(['auto']),
]);
const stringOrNumber = PropTypes__default["default"].oneOfType([
    PropTypes__default["default"].number,
    PropTypes__default["default"].string,
]);
const column = PropTypes__default["default"].oneOfType([
    colSize,
    PropTypes__default["default"].shape({
        size: colSize,
        order: stringOrNumber,
        offset: stringOrNumber,
    }),
]);
const propTypes$Z = {
    /**
     * @default 'col'
     */
    bsPrefix: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    /**
     * The number of columns to span on extra small devices (<576px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    xs: column,
    /**
     * The number of columns to span on small devices (≥576px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    sm: column,
    /**
     * The number of columns to span on medium devices (≥768px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    md: column,
    /**
     * The number of columns to span on large devices (≥992px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    lg: column,
    /**
     * The number of columns to span on extra large devices (≥1200px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    xl: column,
    /**
     * The number of columns to span on extra extra large devices (≥1400px)
     *
     * @type {(boolean|"auto"|number|{ span: boolean|"auto"|number, offset: number, order: "first"|"last"|number })}
     */
    xxl: column,
};
function useCol({ as, bsPrefix, className, ...props }) {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'col');
    const spans = [];
    const classes = [];
    DEVICE_SIZES$1.forEach((brkPoint) => {
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let span;
        let offset;
        let order;
        if (typeof propValue === 'object' && propValue != null) {
            ({ span, offset, order } = propValue);
        }
        else {
            span = propValue;
        }
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (span)
            spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
        if (order != null)
            classes.push(`order${infix}-${order}`);
        if (offset != null)
            classes.push(`offset${infix}-${offset}`);
    });
    return [
        { ...props, className: classNames__default["default"](className, ...spans, ...classes) },
        {
            as,
            bsPrefix,
            spans,
        },
    ];
}
const Col = React__namespace.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
(props, ref) => {
    const [{ className, ...colProps }, { as: Component = 'div', bsPrefix, spans },] = useCol(props);
    return (React__namespace.createElement(Component, { ...colProps, ref: ref, className: classNames__default["default"](className, !spans.length && bsPrefix) }));
});
Col.displayName = 'Col';
Col.propTypes = propTypes$Z;

const DAY_LABELS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const setTimeToNoon = (date) => {
    const newDate = new Date(date);
    newDate.setHours(12);
    newDate.setMinutes(0);
    newDate.setSeconds(0);
    newDate.setMilliseconds(0);
    return newDate;
};
const Calendar = React__namespace.forwardRef((props, ref) => {
    const handleClick = (e) => {
        const day = e.currentTarget.getAttribute('data-day');
        const displayDateClone = new Date(props.displayDate);
        const newSelectedDate = setTimeToNoon(displayDateClone);
        newSelectedDate.setDate(parseInt(day));
        props.changeDate(newSelectedDate);
    };
    /**
     * Change the time of all dates in selectedDate to noon.
     * @returns The processed selectedDate.
     */
    const getProcessedSelectedDate = () => {
        if (props.selectedDate instanceof Date) {
            return setTimeToNoon(props.selectedDate);
        }
        else if (props.selectedDate) {
            // selectedDate is of type RangeSelectionValue
            const { start, end } = props.selectedDate;
            const processedStart = start ? setTimeToNoon(start) : undefined;
            const processedEnd = end ? setTimeToNoon(end) : undefined;
            return { start: processedStart, end: processedEnd };
        }
        else {
            return undefined;
        }
    };
    /**
     * Checks if a given date is selected.
     * @param date The given date.
     * @param selectedDate The selected date or date range.
     * @returns true if the given date is selected, false if otherwise.
     */
    const isSelectedDate = (date, selectedDate) => {
        if (selectedDate instanceof Date) {
            return Date.parse(date.toISOString()) === Date.parse(selectedDate.toISOString());
        }
        let { start, end } = selectedDate;
        if (start && end) {
            // if selected end date is before selected start date --> swap
            if (new Date(start).getTime() > new Date(end).getTime()) {
                const temp = start;
                start = end;
                end = temp;
            }
            return Date.parse(date.toISOString()) >= Date.parse(start.toISOString())
                && Date.parse(date.toISOString()) <= Date.parse(end.toISOString());
        }
        else if (start) {
            return Date.parse(date.toISOString()) === Date.parse(start.toISOString());
        }
        else if (end) {
            Date.parse(date.toISOString()) === Date.parse(end.toISOString());
        }
        else {
            return false;
        }
        return false;
    };
    const currentDate = setTimeToNoon(new Date());
    const processedSelectedDate = getProcessedSelectedDate();
    const minimumDate = props.minDate
        ? setTimeToNoon(new Date(props.minDate))
        : null;
    const maximumDate = props.maxDate
        ? setTimeToNoon(new Date(props.maxDate))
        : null;
    const year = props.displayDate.getFullYear();
    const month = props.displayDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const startingDay = firstDay.getDay();
    let monthLength = daysInMonth[month];
    if (month === 1) {
        if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
            monthLength = 29;
        }
    }
    const weeks = [];
    let day = 1;
    for (let i = 0; i < 9; i++) {
        const week = [];
        for (let j = 0; j <= 6; j++) {
            if (day <= monthLength && (i > 0 || j >= startingDay)) {
                let className = undefined;
                const date = new Date(year, month, day, 12, 0, 0, 0);
                const dateString = date.toISOString();
                const beforeMinDate = minimumDate &&
                    Date.parse(dateString) < Date.parse(minimumDate.toISOString());
                const afterMinDate = maximumDate &&
                    Date.parse(dateString) > Date.parse(maximumDate.toISOString());
                let clickHandler = handleClick;
                const style = {
                    cursor: 'pointer',
                    borderRadius: 0,
                };
                if (Date.parse(dateString) === Date.parse(currentDate.toISOString())) {
                    // if date is the current Date
                    className = 'text-primary';
                }
                if (beforeMinDate || afterMinDate) {
                    className = 'text-muted';
                    clickHandler = undefined;
                    style.cursor = 'default';
                }
                if (processedSelectedDate && isSelectedDate(date, processedSelectedDate)) {
                    className = 'bg-primary-100';
                }
                week.push(React__namespace.createElement("td", { key: j, "data-day": day, onClick: clickHandler, style: style, className: className }, day));
                day++;
            }
            else {
                week.push(React__namespace.createElement("td", { key: j }));
            }
        }
        weeks.push(React__namespace.createElement("tr", { key: i }, week));
        if (day > monthLength) {
            break;
        }
    }
    return (React__namespace.createElement("table", { className: "text-center", role: "grid", ref: ref },
        React__namespace.createElement("thead", null,
            React__namespace.createElement("tr", null, DAY_LABELS.map((label, index) => {
                return (React__namespace.createElement("th", { key: index, abbr: label, scope: "col" },
                    React__namespace.createElement("small", null, label.slice(0, 3))));
            }))),
        React__namespace.createElement("tbody", null, weeks)));
});

const context$5 = React__namespace.createContext({
    view: 'day',
    setView: () => { }
});
context$5.displayName = 'DatePickerContext';

const MONTH_LABELS$1 = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
];
const CalendarHeader = ({ ...props }) => {
    const { view, setView } = React.useContext(context$5);
    const handleClickPrevious = () => {
        const newDisplayDate = new Date(props.displayDate);
        newDisplayDate.setDate(1);
        if (view === 'month') {
            newDisplayDate.setFullYear(newDisplayDate.getFullYear() - 1);
            return props.onChange(newDisplayDate);
        }
        else if (view === 'year') {
            newDisplayDate.setFullYear(newDisplayDate.getFullYear() - 10);
            return props.onChange(newDisplayDate);
        }
        else {
            newDisplayDate.setMonth(newDisplayDate.getMonth() - 1);
            return props.onChange(newDisplayDate);
        }
    };
    const handleClickNext = () => {
        const newDisplayDate = new Date(props.displayDate);
        newDisplayDate.setDate(1);
        if (view === 'month') {
            newDisplayDate.setFullYear(newDisplayDate.getFullYear() + 1);
            return props.onChange(newDisplayDate);
        }
        else if (view === 'year') {
            newDisplayDate.setFullYear(newDisplayDate.getFullYear() + 10);
            return props.onChange(newDisplayDate);
        }
        else {
            newDisplayDate.setMonth(newDisplayDate.getMonth() + 1);
            return props.onChange(newDisplayDate);
        }
    };
    const changeView = () => {
        switch (view) {
            case 'day':
                setView('month');
                break;
            case 'month':
                setView('year');
                break;
        }
    };
    const renderHeader = () => {
        if (view === 'month') {
            return `${props.displayDate.getFullYear()}`;
        }
        if (view === 'year')
            return `${props.displayDate.getFullYear() - 5} - ${props.displayDate.getFullYear() + 6}`;
        return `${MONTH_LABELS$1[props.displayDate.getMonth()]} ${props.displayDate.getFullYear()}`;
    };
    return (React__namespace.createElement("div", { className: "text-center d-flex justify-content-between" },
        React__namespace.createElement("button", { onClick: handleClickPrevious, "aria-label": `previous ${view}` },
            React__namespace.createElement("i", { className: "bi bi-chevron-left" })),
        React__namespace.createElement("button", { onClick: changeView, disabled: view === 'year', "aria-live": 'polite' }, renderHeader()),
        React__namespace.createElement("button", { onClick: handleClickNext, "aria-label": `next ${view}` },
            React__namespace.createElement("i", { className: "bi bi-chevron-right" }))));
};

const MONTH_LABELS = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
];
const MonthView = React__namespace.forwardRef(({ displayDate, onClickMonth, ...props }, ref) => {
    const displayMonth = MONTH_LABELS[displayDate.getMonth()];
    return (React__namespace.createElement("div", { className: "sgds monthpicker", ref: ref, ...props }, MONTH_LABELS.map((m, idx) => (React__namespace.createElement("button", { className: classNames__default["default"](displayMonth === m && 'active', 'month'), key: m, onClick: () => onClickMonth(idx) }, m)))));
});

const YearView = React__namespace.forwardRef(({ displayDate, onClickYear, ...props }, ref) => {
    const displayYear = displayDate.getFullYear();
    const startLimit = displayYear - 5;
    const endLimit = displayYear + 6;
    const yearArray = [];
    for (let i = startLimit; i < endLimit + 1; i++) {
        yearArray.push(i);
    }
    return (React__namespace.createElement("div", { className: "sgds yearpicker", ref: ref, ...props }, yearArray.map((y) => (React__namespace.createElement("button", { className: classNames__default["default"](displayYear === y && 'active', 'year'), key: y, onClick: () => onClickYear(y) }, y)))));
});

const context$4 = React__namespace.createContext(null);
context$4.displayName = 'InputGroupContext';

function useWrappedRefWithWarning(ref, componentName) {
    // @ts-ignore
    return ref;
}

const propTypes$Y = {
    as: PropTypes__default["default"].elementType,
    icon: PropTypes__default["default"].element,
};
const FormControlGroup = React__namespace.forwardRef(({ icon, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', bsPrefix, children, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control-group');
    return (React__namespace.createElement(SGDSWrapper, { className: classNames__default["default"](bsPrefix, className), ...props, ref: ref },
        icon &&
            React__namespace.cloneElement(icon, {
                className: classNames__default["default"](icon.props.className, 'form-control-icon'),
            }),
        children));
});
FormControlGroup.displayName = 'FormControlGroup';
FormControlGroup.propTypes = propTypes$Y;

const propTypes$X = {
    /**
     * @default {'form-control'}
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The FormControl `ref` will be forwarded to the underlying input element,
     * which means unless `as` is a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
    /**
     * Input size variants
     *
     * @type {('sm'|'lg')}
     */
    size: PropTypes__default["default"].string,
    /**
     * The underlying HTML element to use when rendering the FormControl.
     *
     * @type {('input'|'textarea'|elementType)}
     */
    as: PropTypes__default["default"].elementType,
    /**
     * Render the input as plain text. Generally used along side `readOnly`.
     */
    plaintext: PropTypes__default["default"].bool,
    /** Make the control readonly */
    readOnly: PropTypes__default["default"].bool,
    /** Make the control disabled */
    disabled: PropTypes__default["default"].bool,
    /**
     * The `value` attribute of underlying input
     *
     * @controllable onChange
     * */
    value: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].string,
        PropTypes__default["default"].arrayOf(PropTypes__default["default"].string),
        PropTypes__default["default"].number,
    ]),
    /** A callback fired when the `value` prop changes */
    onChange: PropTypes__default["default"].func,
    /**
     * The HTML input `type`, which is only relevant if `as` is `'input'` (the default).
     */
    type: PropTypes__default["default"].string,
    /**
     * Uses `controlId` from `<FormGroup>` if not explicitly specified.
     */
    id: PropTypes__default["default"].string,
    /** Add "valid" validation styles to the control */
    isValid: PropTypes__default["default"].bool,
    /** Add "invalid" validation styles to the control and accompanying label */
    isInvalid: PropTypes__default["default"].bool,
};
const FormControl = React__namespace.forwardRef(({ bsPrefix, type, size, id, className, isValid = false, isInvalid = false, plaintext, readOnly, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input', ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');
    let classes;
    if (plaintext) {
        classes = { [`${bsPrefix}-plaintext`]: true };
    }
    else {
        classes = {
            [bsPrefix]: true,
            [`${bsPrefix}-${size}`]: size,
        };
    }
    warning__default["default"](controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.');
    return (React__namespace.createElement(Component, { ...props, type: type, ref: ref, readOnly: readOnly, id: id || controlId, className: classNames__default["default"](className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`) }));
});
FormControl.displayName = 'FormControl';
FormControl.propTypes = propTypes$X;
var FormControl$1 = Object.assign(FormControl, { Feedback, Group: FormControlGroup });

const propTypes$W = {
    /**
     * @default 'dropdown-toggle'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * An html id attribute, necessary for assistive technologies, such as screen readers.
     * @type {string|number}
     */
    id: PropTypes__default["default"].string,
    split: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
    /**
     * to passthrough to the underlying button or whatever from DropdownButton
     * @private
     */
    childBsPrefix: PropTypes__default["default"].string,
    setIsMenuOpen: PropTypes__default["default"].func
};
const FormControlToggle = React__namespace.forwardRef(({ bsPrefix, className, childBsPrefix, setIsMenuOpen, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = FormControl$1, ...props }, ref) => {
    const prefix = 'dropdown-toggle';
    const dropdownContext = React.useContext(DropdownContext__default["default"]);
    const isInputGroup = React.useContext(context$4);
    if (childBsPrefix !== undefined) {
        props.bsPrefix = childBsPrefix;
    }
    const [toggleProps] = DropdownToggle$1.useDropdownToggle();
    toggleProps.ref = useMergedRefs__default["default"](toggleProps.ref, useWrappedRefWithWarning(ref));
    const { "aria-expanded": ariaExpanded, id, ...newToggleProps } = toggleProps;
    if (setIsMenuOpen) {
        React__namespace.useEffect(() => {
            setIsMenuOpen(dropdownContext?.show);
        }, [dropdownContext?.show]);
    }
    // This intentionally forwards size and variant (if set) to the
    // underlying component, to allow it to render size and style variants.
    return (React__namespace.createElement(Component, { className: classNames__default["default"](className, prefix, !!isInputGroup && dropdownContext?.show && 'show'), ...newToggleProps, ...props }));
});
FormControlToggle.displayName = 'FormToggle';
FormControlToggle.propTypes = propTypes$W;

const DropdownContext = React__namespace.createContext({});
DropdownContext.displayName = 'DropdownContext';

const propTypes$V = {
    /** @default 'dropdown-item' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Highlight the menu item as active.
     */
    active: PropTypes__default["default"].bool,
    /**
     * Disable the menu item, making it unselectable.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * Value passed to the `onSelect` handler, useful for identifying the selected menu item.
     */
    eventKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /**
     * HTML `href` attribute corresponding to `a.href`.
     */
    href: PropTypes__default["default"].string,
    /**
     * Callback fired when the menu item is clicked.
     */
    onClick: PropTypes__default["default"].func,
    as: PropTypes__default["default"].elementType,
};
const DropdownItem = React__namespace.forwardRef(({ bsPrefix, className, eventKey, disabled = false, onClick, active, as: Component = Anchor__default["default"], ...props }, ref) => {
    const prefix = 'dropdown-item';
    const [dropdownItemProps, meta] = DropdownItem$1.useDropdownItem({
        key: eventKey,
        href: props.href,
        disabled,
        onClick,
        active,
    });
    return (React__namespace.createElement("li", null,
        React__namespace.createElement(Component, { ...props, ...dropdownItemProps, ref: ref, className: classNames__default["default"](className, prefix, meta.isActive && 'active', disabled && 'disabled') })));
});
DropdownItem.displayName = 'DropdownItem';
DropdownItem.propTypes = propTypes$V;

const context$3 = React__namespace.createContext(null);
context$3.displayName = 'NavbarContext';

const alignDirection = PropTypes__default["default"].oneOf(['start', 'end']);
const alignPropType = PropTypes__default["default"].oneOfType([
    alignDirection,
    PropTypes__default["default"].shape({ sm: alignDirection }),
    PropTypes__default["default"].shape({ md: alignDirection }),
    PropTypes__default["default"].shape({ lg: alignDirection }),
    PropTypes__default["default"].shape({ xl: alignDirection }),
    PropTypes__default["default"].shape({ xxl: alignDirection }),
]);

const propTypes$U = {
    /**
     * @default 'dropdown-menu'
     */
    bsPrefix: PropTypes__default["default"].string,
    /** Controls the visibility of the Dropdown menu  */
    show: PropTypes__default["default"].bool,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */
    renderOnMount: PropTypes__default["default"].bool,
    /** Have the dropdown switch to it's opposite placement when necessary to stay on screen. */
    flip: PropTypes__default["default"].bool,
    /**
     * Aligns the dropdown menu to the specified side of the container. You can also align
     * the menu responsively for breakpoints starting at `sm` and up. The alignment
     * direction will affect the specified breakpoint or larger.
     *
     * *Note: Using responsive alignment will disable Popper usage for positioning.*
     *
     * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
     */
    align: alignPropType,
    onSelect: PropTypes__default["default"].func,
    /**
     * Which event when fired outside the component will cause it to be closed
     *
     * *Note: For custom dropdown components, you will have to pass the
     * `rootCloseEvent` to `<RootCloseWrapper>` in your custom dropdown menu
     * component ([similarly to how it is implemented in `<Dropdown.Menu>`](https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119)).*
     */
    rootCloseEvent: PropTypes__default["default"].oneOf(['click', 'mousedown']),
    /**
     * Control the rendering of the DropdownMenu. All non-menu props
     * (listed here) are passed through to the `as` Component.
     *
     * If providing a custom, non DOM, component. the `show`, `close` and `align` props
     * are also injected and should be handled appropriately.
     */
    as: PropTypes__default["default"].elementType,
    /**
     * A set of popper options and props passed directly to Popper.
     */
    popperConfig: PropTypes__default["default"].object,
    /**
     * Menu color variant.
     *
     * Omitting this will use the default light color.
     */
    variant: PropTypes__default["default"].string,
    /** @private Provides context when used in NavDropdown component  */
    isNav: PropTypes__default["default"].bool,
};
const defaultProps$n = {
    flip: true,
};
function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {
    const topStart = isRTL ? 'top-end' : 'top-start';
    const topEnd = isRTL ? 'top-start' : 'top-end';
    const bottomStart = isRTL ? 'bottom-end' : 'bottom-start';
    const bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';
    // const leftStart = isRTL ? 'right-start' : 'left-start';
    // const leftEnd = isRTL ? 'right-end' : 'left-end';
    const rightStart = isRTL ? 'left-start' : 'right-start';
    const rightEnd = isRTL ? 'left-end' : 'right-end';
    let placement = alignEnd ? bottomEnd : bottomStart;
    if (dropDirection === 'up')
        placement = alignEnd ? topEnd : topStart;
    else if (dropDirection === 'end')
        placement = alignEnd ? rightEnd : rightStart;
    // else if (dropDirection === 'start')
    //   placement = alignEnd ? leftEnd : leftStart;
    return placement;
}
const DropdownMenu = React__namespace.forwardRef(({ bsPrefix, className, align, rootCloseEvent, flip, show: showProps, renderOnMount, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'ul', popperConfig, variant, isNav, ...props }, ref) => {
    let alignEnd = false;
    const isNavbar = React.useContext(context$3);
    const prefix = 'dropdown-menu';
    const { align: contextAlign, drop, isRTL } = React.useContext(DropdownContext);
    align = align || contextAlign;
    const isInputGroup = React.useContext(context$4);
    const alignClasses = [];
    if (align) {
        if (typeof align === 'object') {
            const keys = Object.keys(align);
            warning__default["default"](keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`');
            if (keys.length) {
                const brkPoint = keys[0];
                const direction = align[brkPoint];
                // .dropdown-menu-end is required for responsively aligning
                // left in addition to align left classes.
                alignEnd = direction === 'start';
                alignClasses.push(`${prefix}-${brkPoint}-${direction}`);
            }
        }
        else if (align === 'end') {
            alignEnd = true;
        }
    }
    const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);
    const [menuProps, { hasShown, popper, show, toggle }] = DropdownMenu$1.useDropdownMenu({
        flip,
        rootCloseEvent,
        show: showProps,
        usePopper: !isNavbar && alignClasses.length === 0,
        offset: !isNav ? [0, 10] : undefined,
        popperConfig,
        placement,
    });
    menuProps.ref = useMergedRefs__default["default"](useWrappedRefWithWarning(ref), menuProps.ref);
    useIsomorphicEffect__default["default"](() => {
        // Popper's initial position for the menu is incorrect when
        // renderOnMount=true. Need to call update() to correct it.
        if (show)
            popper?.update();
    }, [show]);
    if (!hasShown && !renderOnMount && !isInputGroup)
        return null;
    // For custom components provide additional, non-DOM, props;
    if (typeof Component !== 'string') {
        menuProps.show = show;
        menuProps.close = () => toggle?.(false);
        menuProps.align = align;
    }
    let style = props.style;
    if (popper?.placement) {
        // we don't need the default popper style,
        // menus are display: none when not shown.
        style = { ...props.style, ...menuProps.style };
        //@ts-ignore
        props['x-placement'] = popper.placement;
    }
    return (React__namespace.createElement(Component, { ...props, ...menuProps, style: style, ...((alignClasses.length || isNavbar) && {
            'data-bs-popper': 'static',
        }), className: classNames__default["default"](className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses) }));
});
DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.propTypes = propTypes$U;
DropdownMenu.defaultProps = defaultProps$n;

const propTypes$T = {
    /**
     * @default 'dropdown-toggle'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * An html id attribute, necessary for assistive technologies, such as screen readers.
     * @type {string|number}
     */
    id: PropTypes__default["default"].string,
    split: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
    /**
     * to passthrough to the underlying button or whatever from DropdownButton
     * @private
     */
    childBsPrefix: PropTypes__default["default"].string,
};
const DropdownToggle = React__namespace.forwardRef(({ bsPrefix, split, className, childBsPrefix, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = Button, ...props }, ref) => {
    const prefix = 'dropdown-toggle';
    const dropdownContext = React.useContext(DropdownContext__default["default"]);
    const isInputGroup = React.useContext(context$4);
    if (childBsPrefix !== undefined) {
        props.bsPrefix = childBsPrefix;
    }
    const [toggleProps] = DropdownToggle$1.useDropdownToggle();
    toggleProps.ref = useMergedRefs__default["default"](toggleProps.ref, useWrappedRefWithWarning(ref));
    // This intentionally forwards size and variant (if set) to the
    // underlying component, to allow it to render size and style variants.
    return (React__namespace.createElement(Component, { className: classNames__default["default"](className, prefix, split && `${prefix}-split`, !!isInputGroup && dropdownContext?.show && 'show'), variant: "outline-secondary", ...toggleProps, ...props, "aria-haspopup": "menu" }));
});
DropdownToggle.displayName = 'DropdownToggle';
DropdownToggle.propTypes = propTypes$T;

const DropdownHeader = createWithBsPrefix('dropdown-header', {
    defaultProps: { role: 'heading' },
});
const DropdownDivider = createWithBsPrefix('dropdown-divider', {
    Component: 'hr',
    defaultProps: { role: 'separator' },
});
const DropdownItemText = createWithBsPrefix('dropdown-item-text', {
    Component: 'span',
});

const propTypes$S = {
    /** @default 'dropdown' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Determines the direction and location of the Menu in relation to it's Toggle.
     *
     * @type {"end"|"up"|"down" }
     */
    drop: PropTypes__default["default"].oneOf(['up', 'end', 'down']),
    as: PropTypes__default["default"].elementType,
    align: alignDirection,
    /**
     * Whether or not the Dropdown is visible.
     *
     * @controllable onToggle
     */
    show: PropTypes__default["default"].bool,
    /**
     * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to
     * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).
     *
     */
    flip: PropTypes__default["default"].bool,
    /**
     * A callback fired when the Dropdown wishes to change visibility. Called with the requested
     * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.
     *
     * ```js
     * function(
     *   isOpen: boolean,
     *   event: SyntheticEvent,
     *   metadata: {
     *     source: 'select' | 'click' | 'rootClose' | 'keydown'
     *   }
     * ): void
     * ```
     *
     * @controllable show
     */
    onToggle: PropTypes__default["default"].func,
    /**
     * A callback fired when a menu item is selected.
     *
     * ```js
     * (eventKey: any, event: Object) => any
     * ```
     */
    onSelect: PropTypes__default["default"].func,
    /**
     * Controls the focus behavior for when the Dropdown is opened. Set to
     * `true` to always focus the first menu item, `keyboard` to focus only when
     * navigating via the keyboard, or `false` to disable completely
     *
     * The Default behavior is `false` **unless** the Menu has a `role="menu"`
     * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).
     */
    focusFirstItemOnShow: PropTypes__default["default"].oneOf([false, true, 'keyboard']),
    /** @private */
    navbar: PropTypes__default["default"].bool,
    /**
     * Controls the auto close behaviour of the dropdown when clicking outside of
     * the button or the list.
     */
    autoClose: PropTypes__default["default"].oneOf([true, 'outside', 'inside', false]),
};
const defaultProps$m = {
    navbar: false,
    align: 'start',
    autoClose: true,
    focusFirstItemOnShow: 'keyboard',
};
const Dropdown = React__namespace.forwardRef((pProps, ref) => {
    const { bsPrefix, drop, show, className, align, onSelect, onToggle, focusFirstItemOnShow, 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div', navbar: _4, autoClose, ...props } = uncontrollable.useUncontrolled(pProps, { show: 'onToggle' });
    const isInputGroup = React.useContext(context$4);
    const prefix = useBootstrapPrefix(bsPrefix, 'dropdown');
    const isRTL = useIsRTL();
    const isClosingPermitted = (source) => {
        // autoClose=false only permits close on button click
        if (autoClose === false)
            return source === 'click';
        // autoClose=inside doesn't permit close on rootClose
        if (autoClose === 'inside')
            return source !== 'rootClose';
        // autoClose=outside doesn't permit close on select
        if (autoClose === 'outside')
            return source !== 'select';
        return true;
    };
    const handleToggle = useEventCallback__default["default"]((nextShow, meta) => {
        if (meta.originalEvent.currentTarget === document &&
            (meta.source !== 'keydown' ||
                meta.originalEvent.key === 'Escape'))
            meta.source = 'rootClose';
        if (isClosingPermitted(meta.source))
            onToggle?.(nextShow, meta);
    });
    const alignEnd = align === 'end';
    const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);
    const contextValue = React.useMemo(() => ({
        align,
        drop,
        isRTL,
    }), [align, drop, isRTL]);
    return (React__namespace.createElement(DropdownContext.Provider, { value: contextValue },
        React__namespace.createElement(BaseDropdown__default["default"], { placement: placement, show: show, onSelect: onSelect, onToggle: handleToggle, focusFirstItemOnShow: focusFirstItemOnShow, itemSelector: `.${prefix}-item:not(.disabled):not(:disabled)` }, isInputGroup ? (props.children) : (React__namespace.createElement(SGDSWrapper, { as: Component, ...props, ref: ref, className: classNames__default["default"](className, show && 'show', prefix, drop === 'up' && 'dropup', drop === 'end' && 'dropend') })))));
});
Dropdown.displayName = 'Dropdown';
Dropdown.propTypes = propTypes$S;
Dropdown.defaultProps = defaultProps$m;
var Dropdown$1 = Object.assign(Dropdown, {
    Toggle: DropdownToggle,
    Menu: DropdownMenu,
    Item: DropdownItem,
    ItemText: DropdownItemText,
    Divider: DropdownDivider,
    Header: DropdownHeader,
});

const propTypes$R = {
    /**
     * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
     * @type {string}
     */
    id: PropTypes__default["default"].string,
    /** An `href` passed to the Toggle component */
    href: PropTypes__default["default"].string,
    /** An `onClick` handler passed to the Toggle component */
    onClick: PropTypes__default["default"].func,
    /** The content of the non-toggle Button.  */
    title: PropTypes__default["default"].node.isRequired,
    /** Disables both Buttons  */
    disabled: PropTypes__default["default"].bool,
    /**
     * Aligns the dropdown menu.
     *
     * _see [DropdownMenu](#dropdown-menu-props) for more details_
     *
     * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
     */
    align: alignPropType,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */
    menuRole: PropTypes__default["default"].string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */
    renderMenuOnMount: PropTypes__default["default"].bool,
    /**
     *  Which event when fired outside the component will cause it to be closed.
     *
     * _see [DropdownMenu](#dropdown-menu-props) for more details_
     */
    rootCloseEvent: PropTypes__default["default"].string,
    /**
     * Menu color variant.
     *
     * Omitting this will use the default light color.
     */
    menuVariant: PropTypes__default["default"].oneOf(['dark']),
    /** @ignore */
    bsPrefix: PropTypes__default["default"].string,
    /** @ignore */
    variant: PropTypes__default["default"].string,
    /** @ignore */
    size: PropTypes__default["default"].string,
};
/**
 * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`
 * are passed directly to the default `Dropdown.Menu`. This component accepts all of
 * [`Dropdown`'s props](#dropdown-props).
 *
 * _All unknown props are passed through to the `Dropdown` component._ Only
 * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,
 * along with menu-related props are passed to the `Dropdown.Menu`
 */
const DropdownButton = React__namespace.forwardRef(({ title, children, bsPrefix, rootCloseEvent, variant, size, menuRole, renderMenuOnMount, disabled, href, id, menuVariant, ...props }, ref) => (React__namespace.createElement(Dropdown$1, { ref: ref, ...props },
    React__namespace.createElement(DropdownToggle, { id: id, href: href, size: size, variant: variant, disabled: disabled, childBsPrefix: bsPrefix },
        title,
        React__namespace.createElement("i", { className: "bi bi-chevron-down" })),
    React__namespace.createElement(DropdownMenu, { role: menuRole, renderOnMount: renderMenuOnMount, rootCloseEvent: rootCloseEvent, variant: menuVariant }, children))));
DropdownButton.displayName = 'DropdownButton';
DropdownButton.propTypes = propTypes$R;

function generateId (componentName = "", elementName = "") {
    return `id-${Math.random().toString().substring(2, 6)}-sgds-${componentName}-${elementName}`;
}

const propTypes$Q = {
    initialValue: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].instanceOf(Date),
        PropTypes__default["default"].shape({
            start: PropTypes__default["default"].instanceOf(Date),
            end: PropTypes__default["default"].instanceOf(Date),
        }),
    ]),
    required: PropTypes__default["default"].bool,
    className: PropTypes__default["default"].string,
    minDate: PropTypes__default["default"].string,
    maxDate: PropTypes__default["default"].string,
    displayDate: PropTypes__default["default"].instanceOf(Date),
    placeholder: PropTypes__default["default"].string,
    onChangeDate: PropTypes__default["default"].func,
    onClear: PropTypes__default["default"].func,
    onBlur: PropTypes__default["default"].func,
    onFocus: PropTypes__default["default"].func,
    autoFocus: PropTypes__default["default"].bool,
    disabled: PropTypes__default["default"].bool,
    calendarPlacement: PropTypes__default["default"].oneOf(['up', 'down']),
    /**
     * dateFormat variants
     *
     * @type {('MM/DD/YYYY'|'DD/MM/YYYY'|'YYYY/MM/DD')}
     */
    dateFormat: PropTypes__default["default"].string,
    id: PropTypes__default["default"].string,
    /**
     * mode variants
     *
     * @type {('single'|'range')}
     */
    mode: PropTypes__default["default"].string,
    flip: PropTypes__default["default"].bool,
    clearBtnVariant: PropTypes__default["default"].string
};
const SEPARATOR = '/';
const makeInputValueString = (date, dateFormat) => {
    if (date === undefined)
        return '';
    const month = date.getMonth() + 1;
    const day = date.getDate();
    //this method is executed during intialState setup... handle a missing state properly
    const separator = SEPARATOR;
    if (dateFormat.match(/MM.DD.YYYY/)) {
        return ((month > 9 ? month : `0${month}`) +
            separator +
            (day > 9 ? day : `0${day}`) +
            separator +
            date.getFullYear());
    }
    else if (dateFormat.match(/DD.MM.YYYY/)) {
        return ((day > 9 ? day : `0${day}`) +
            separator +
            (month > 9 ? month : `0${month}`) +
            separator +
            date.getFullYear());
    }
    else {
        return (date.getFullYear() +
            separator +
            (month > 9 ? month : `0${month}`) +
            separator +
            (day > 9 ? day : `0${day}`));
    }
};
const defaultProps$l = {
    dateFormat: 'DD/MM/YYYY',
    calendarPlacement: 'down',
    mode: 'single',
    displayDate: new Date(),
    flip: true,
};
const DatePicker = React__namespace.forwardRef(({ dateFormat = 'DD/MM/YYYY', calendarPlacement = 'down', mode = 'single', displayDate = new Date(), flip = true, clearBtnVariant = "primary", ...props }, ref) => {
    const isRange = mode === 'range';
    const formControlRef = React.useRef(null);
    const inputRef = useMergedRefs__default["default"](ref, formControlRef);
    const initialState = {
        displayDate: displayDate,
        selectedDate: props.initialValue && ((isRange && !(props.initialValue instanceof Date))
            || (!isRange && props.initialValue instanceof Date))
            ? props.initialValue
            : (isRange ? { start: undefined, end: undefined } : undefined),
        invalid: false,
    };
    const [state, setState] = React.useState(initialState);
    const [view, setView] = React.useState('day');
    const contextValue = React.useMemo(() => ({
        view,
        setView,
    }), [view]);
    const onChangeMonth = (newDisplayDate) => {
        setState({ ...state, displayDate: newDisplayDate });
    };
    const clear = () => {
        setState({
            ...initialState,
            selectedDate: isRange ? { start: undefined, end: undefined } : undefined,
            displayDate: new Date(),
        });
        props.onClear?.();
        props.onChangeDate?.(undefined);
    };
    //triggered only when clicking dates
    const onChangeDateSingle = (newSelectedDate) => {
        setState({
            ...state,
            selectedDate: newSelectedDate,
            displayDate: newSelectedDate,
        });
        formControlRef?.current?.click();
        props.onChangeDate?.(newSelectedDate);
    };
    const onChangeDateRange = (newSelectedDate) => {
        let { start, end } = state.selectedDate;
        if ((!start && !end) || (start && end)) {
            // Selecting start date
            start = newSelectedDate;
            end = undefined;
        }
        else if (start && !end) {
            // Selecting end date
            // if selected end date is before selected start date --> swap
            if (new Date(start).getTime() > newSelectedDate.getTime()) {
                end = start;
                start = newSelectedDate;
            }
            else {
                end = newSelectedDate;
            }
        }
        const newSelectedDates = { start: start, end: end };
        setState({
            ...state,
            selectedDate: newSelectedDates,
            displayDate: newSelectedDate,
        });
        if (newSelectedDates.end) {
            formControlRef?.current?.click();
        }
        props.onChangeDate?.(newSelectedDates);
    };
    const calendarHeader = (React__namespace.createElement(CalendarHeader, { displayDate: state.displayDate, onChange: onChangeMonth }));
    const computeInputValue = () => {
        if (isRange && state.selectedDate) {
            const { start, end } = state.selectedDate;
            const separator = start ? ' - ' : '';
            return (makeInputValueString(start, dateFormat) +
                separator +
                makeInputValueString(end, dateFormat));
        }
        return makeInputValueString(state.selectedDate, dateFormat);
    };
    const defaultPlaceHolder = isRange
        ? `${dateFormat.toLowerCase()} - ${dateFormat.toLowerCase()}`
        : `${dateFormat.toLowerCase()}`;
    const controlProps = {
        value: computeInputValue(),
        required: props.required,
        placeholder: props.placeholder || defaultPlaceHolder,
        ref: inputRef,
        disabled: props.disabled,
        readOnly: true,
        className: props.className,
        isInvalid: state.invalid,
        id: props.id,
    };
    const BodyContent = () => {
        const onClickMonth = (month) => {
            const newDisplayDate = new Date(state.displayDate);
            newDisplayDate.setMonth(month);
            setView('day');
            setState({
                ...state,
                displayDate: newDisplayDate,
            });
        };
        const onClickYear = (year) => {
            const newDisplayDate = new Date(state.displayDate);
            newDisplayDate.setFullYear(year);
            setView('month');
            setState({
                ...state,
                displayDate: newDisplayDate,
            });
        };
        if (view === 'month')
            return (React__namespace.createElement(MonthView, { onClickMonth: onClickMonth, displayDate: state.displayDate }));
        if (view === 'year')
            return (React__namespace.createElement(YearView, { displayDate: state.displayDate, onClickYear: onClickYear }));
        return (React__namespace.createElement(Calendar, { selectedDate: state.selectedDate, displayDate: state.displayDate, changeDate: isRange ? onChangeDateRange : onChangeDateSingle, minDate: props.minDate, maxDate: props.maxDate, mode: mode }));
    };
    const warningCondition = () => {
        const displayDateStr = makeInputValueString(displayDate, dateFormat);
        if (isRange) {
            const { start, end } = props.initialValue;
            return (makeInputValueString(start, dateFormat) === displayDateStr ||
                makeInputValueString(end, dateFormat) === displayDateStr);
        }
        else {
            const initialValue = props.initialValue;
            return (makeInputValueString(initialValue, dateFormat) === displayDateStr);
        }
    };
    if (props.initialValue) {
        warning__default["default"](warningCondition(), 'In DatePicker `single` mode, `initialValue` is `Date` type and `displayDate` prop must be of same value. In range mode, `initialValue` should be of object {start: Date, end: Date} and `displayDate` prop must be of same value as either `start` or `end`');
        if (isRange) {
            const { start, end } = props.initialValue;
            start &&
                end &&
                warning__default["default"](start.getTime() <= end.getTime(), '`end` Date cannot be earlier than `start` Date');
        }
    }
    // Generation of unique id soley on client side 
    const [datepickerMenuId, setDatepickerMenuId] = React.useState("");
    React__namespace.useEffect(() => {
        setDatepickerMenuId(generateId('datepicker', 'ul'));
    }, []);
    return (React__namespace.createElement(context$5.Provider, { value: contextValue },
        React__namespace.createElement(Dropdown$1, { drop: calendarPlacement, className: "form-control-group input-group" },
            React__namespace.createElement(FormControlToggle, { ...controlProps, ref: formControlRef, role: "combobox", "aria-haspopup": "dialog", "aria-controls": datepickerMenuId, "aria-label": "Choose Date" }),
            React__namespace.createElement(Button, { onClick: clear, disabled: props.disabled, variant: clearBtnVariant, "aria-label": "Clear Selection" },
                React__namespace.createElement("i", { className: "bi bi-x" }),
                React__namespace.createElement("span", { className: "visually-hidden" }, "clear")),
            React__namespace.createElement("i", { className: "bi bi-calendar form-control-icon" }),
            React__namespace.createElement(Dropdown$1.Menu, { id: datepickerMenuId, className: "sgds datepicker", as: 'div', role: "dialog", "aria-modal": "true", "aria-label": "Choose Date" },
                React__namespace.createElement(Dropdown$1.Header, { className: "datepicker-header", role: "none" }, calendarHeader),
                React__namespace.createElement("div", { className: "datepicker-body" }, BodyContent())))));
});
DatePicker.displayName = 'DatePicker';
DatePicker.propTypes = propTypes$Q;
DatePicker.defaultProps = defaultProps$l;

const propTypes$P = {
    as: PropTypes__default["default"].elementType,
    /**
     * Sets `id` on `<FormControl>` and `htmlFor` on `<FormGroup.Label>`.
     */
    controlId: PropTypes__default["default"].string,
    /**
     * The FormGroup `ref` will be forwarded to the underlying element.
     * Unless the FormGroup is rendered `as` a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
};
const FormGroup = React__namespace.forwardRef(({ controlId, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const context = React.useMemo(() => ({ controlId }), [controlId]);
    return (React__namespace.createElement(FormContext.Provider, { value: context },
        React__namespace.createElement(Component, { ...props, ref: ref })));
});
FormGroup.displayName = 'FormGroup';
FormGroup.propTypes = propTypes$P;

const propTypes$O = {
    /**
     * @default 'form-label'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Uses `controlId` from `<FormGroup>` if not explicitly specified.
     */
    htmlFor: PropTypes__default["default"].string,
    /**
     * Renders the FormLabel as a `<Col>` component (accepting all the same props),
     * as well as adding additional styling for horizontal forms.
     */
    column: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].oneOf(['sm', 'lg'])]),
    /**
     * The FormLabel `ref` will be forwarded to the underlying element.
     * Unless the FormLabel is rendered `as` a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
    /**
     * Hides the label visually while still allowing it to be
     * read by assistive technologies.
     */
    visuallyHidden: PropTypes__default["default"].bool,
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
};
const defaultProps$k = {
    column: false,
    visuallyHidden: false,
};
const FormLabel = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'label', bsPrefix, column, visuallyHidden, className, htmlFor, ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-label');
    let columnClass = 'col-form-label';
    if (typeof column === 'string')
        columnClass = `${columnClass} ${columnClass}-${column}`;
    const classes = classNames__default["default"](className, bsPrefix, visuallyHidden && 'visually-hidden', column && columnClass);
    warning__default["default"](controlId == null || !htmlFor, '`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.');
    htmlFor = htmlFor || controlId;
    if (column)
        return (React__namespace.createElement(Col, { ref: ref, as: "label", className: classes, htmlFor: htmlFor, ...props }));
    return (
    // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
    React__namespace.createElement(Component, { ref: ref, className: classes, htmlFor: htmlFor, ...props }));
});
FormLabel.displayName = 'FormLabel';
FormLabel.propTypes = propTypes$O;
FormLabel.defaultProps = defaultProps$k;

const propTypes$N = {
    /**
     * @default {'form-select'}
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Size variants
     *
     * @type {('sm'|'lg')}
     */
    size: PropTypes__default["default"].string,
    /** Make the control disabled */
    disabled: PropTypes__default["default"].bool,
    /**
     * The `value` attribute of underlying input
     *
     * @controllable onChange
     * */
    value: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].string,
        PropTypes__default["default"].arrayOf(PropTypes__default["default"].string),
        PropTypes__default["default"].number,
    ]),
    /** A callback fired when the `value` prop changes */
    onChange: PropTypes__default["default"].func,
    /** Add "valid" validation styles to the control */
    isValid: PropTypes__default["default"].bool,
    /** Add "invalid" validation styles to the control and accompanying label */
    isInvalid: PropTypes__default["default"].bool,
};
const FormSelect = React__namespace.forwardRef(({ bsPrefix, size, className, isValid = false, isInvalid = false, id, ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-select');
    return (React__namespace.createElement("select", { ...props, ref: ref, className: classNames__default["default"](className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`), id: id || controlId }));
});
FormSelect.displayName = 'FormSelect';
FormSelect.propTypes = propTypes$N;

const propTypes$M = {
    /** @default 'form-text' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The FormText `ref` will be forwarded to the underlying element.
     * Unless the FormText is rendered `as` a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
    /**
     * A convenience prop for add the `text-muted` class,
     * since it's so commonly used here.
     */
    muted: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
};
const FormText = React__namespace.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
({ bsPrefix, className, as: Component = 'small', muted, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-text');
    return (React__namespace.createElement(Component, { ...props, ref: ref, className: classNames__default["default"](className, bsPrefix, muted && 'text-muted') }));
});
FormText.displayName = 'FormText';
FormText.propTypes = propTypes$M;

const Switch = React__namespace.forwardRef((props, ref) => (React__namespace.createElement(FormCheck$1, { ...props, ref: ref, type: "switch" })));
Switch.displayName = 'Switch';
var Switch$1 = Object.assign(Switch, {
    Input: FormCheck$1.Input,
    Label: FormCheck$1.Label,
});

const propTypes$L = {
    /**
     * The Form `ref` will be forwarded to the underlying element,
     * which means, unless it's rendered `as` a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
    /**
     * Mark a form as having been validated. Setting it to `true` will
     * toggle any validation styles on the forms elements.
     */
    validated: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
};
const Form = React__namespace.forwardRef(({ className, validated, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'form', ...props }, ref) => (React__namespace.createElement(Component, { ...props, ref: ref, className: classNames__default["default"](className, validated && 'was-validated') })));
Form.displayName = 'Form';
Form.propTypes = propTypes$L;
var Form$1 = Object.assign(Form, {
    Group: FormGroup,
    Control: FormControl$1,
    Check: FormCheck$1,
    Switch: Switch$1,
    Label: FormLabel,
    Text: FormText,
    // Range: FormRange,
    Select: FormSelect,
});

const propTypes$K = {
    /**
     * One or more button variant combinations
     *
     * buttons may be one of a variety of visual variants such as:
     *
     * `'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'link'`
     *
     * as well as "outline" versions (prefixed by 'outline-*')
     *
     * `'outline-primary', 'outline-secondary', 'outline-success', 'outline-danger', 'outline-warning', 'outline-info', 'outline-dark', 'outline-light'`
     */
    variant: PropTypes__default["default"].string,
    /**
     * Specifies a large or small button.
     *
     * @type ('sm'|'lg')
     */
    size: PropTypes__default["default"].oneOf(['sm', 'lg']),
    /**
     * Disables the Button, preventing mouse events,
     * even if the underlying component is an `<a>` element
     */
    disabled: PropTypes__default["default"].bool,
    controlId: PropTypes__default["default"].string.isRequired,
    onChangeFile: PropTypes__default["default"].func.isRequired,
    selectedFile: PropTypes__default["default"].oneOfType([PropTypes__default["default"].object]),
    checkedIcon: PropTypes__default["default"].element,
    cancelIcon: PropTypes__default["default"].element,
    multiple: PropTypes__default["default"].bool,
    accept: PropTypes__default["default"].string,
    buttonClassName: PropTypes__default["default"].string,
};
const CHECKED_ICON = React__namespace.createElement("i", { className: "bi bi-check-lg check-icon" });
const CANCEL_ICON = React__namespace.createElement("i", { className: "bi bi-x-circle x-circle-icon" });
// const defaultProps = {
//   variant: 'primary',
//   disabled: false,
//   checkedIcon: CHECKED_ICON,
//   cancelIcon: CANCEL_ICON,
//   multiple: false,
// };
const FileUpload = ({ controlId, variant = "primary", onChangeFile, selectedFile, disabled = false, size, children, checkedIcon = CHECKED_ICON, cancelIcon = CANCEL_ICON, multiple = false, accept, buttonClassName }) => {
    const inputRef = React.useRef(null);
    const fileNames = selectedFile ? Object.entries(selectedFile).map((e) => e[1].name) : [];
    const inputOnChangeHandler = (e) => {
        let fileList = e.target.files;
        //instead if using event object, instantiate a new dataTransfer obj to standardize with removeFile() data obj
        var dt = new DataTransfer();
        for (let i = 0; i < fileList.length; i++) {
            dt.items.add(fileList[i]);
        }
        onChangeFile(dt.files);
    };
    const handleUpload = () => {
        inputRef?.current?.click();
    };
    const removeFileHandler = (index, e) => {
        e.preventDefault();
        const attachments = document.getElementById(controlId).files; // <-- reference your file input here
        let fileBuffer = new DataTransfer();
        // append the file list to an array iteratively
        for (let i = 0; i < attachments.length; i++) {
            // Exclude file in specified index
            if (index !== i)
                fileBuffer.items.add(attachments[i]);
        }
        // Assign buffer to file input
        document.getElementById(controlId).files =
            fileBuffer.files; // <-- according to your file input reference
        onChangeFile(fileBuffer.files);
    };
    const listItems = fileNames.map((item, index) => {
        return (React__namespace.createElement("li", { key: index, className: "fileupload-list-item" },
            React__namespace.cloneElement(checkedIcon, {
                className: classNames__default["default"](checkedIcon.props.className, 'me-2'),
            }),
            React__namespace.createElement("span", { id: item?.split(' ').join(''), className: "filename" }, item),
            React__namespace.createElement("button", { onClick: (e) => removeFileHandler(index, e), "aria-label": "remove file", "aria-describedby": item?.split(' ').join(''), className: "bg-transparent border-0 ms-2" }, React__namespace.cloneElement(cancelIcon, {
                className: classNames__default["default"](cancelIcon.props.className),
            }))));
    });
    return (React__namespace.createElement(React__namespace.Fragment, null,
        React__namespace.createElement(Form$1.Group, { controlId: controlId },
            React__namespace.createElement(Form$1.Control, { onChange: inputOnChangeHandler, ref: inputRef, type: "file", multiple: multiple, className: "d-none", accept: accept }),
            React__namespace.createElement(Button, { onClick: handleUpload, size: size, variant: variant, disabled: disabled, className: buttonClassName }, children)),
        React__namespace.createElement(SGDSWrapper, { as: "ul", className: "fileupload-list" }, listItems)));
};
FileUpload.displayName = 'FileUpload';
FileUpload.propTypes = propTypes$K;
// FileUpload.defaultProps = defaultProps;

const propTypes$J = {
    as: PropTypes__default["default"].elementType,
    bsPrefix: PropTypes__default["default"].string,
};
const FooterBottomCopyrights = React__namespace.forwardRef(({ as: Component = 'div', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-copyrights');
    return (React__namespace.createElement(Component, { ref: ref, className: classNames__default["default"](className, bsPrefix, 'row'), ...props },
        React__namespace.createElement("div", { className: "col" },
            React__namespace.createElement("div", { className: "d-flex justify-content-lg-end" }, children))));
});
FooterBottomCopyrights.propTypes = propTypes$J;
FooterBottomCopyrights.displayName = 'FooterBottomCopyrights';

const propTypes$I = {
    as: PropTypes__default["default"].elementType,
    bsPrefix: PropTypes__default["default"].string
};
const FooterBottomLinks = React__namespace.forwardRef(({ as: Component = 'div', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-mandatory-links');
    return (React__namespace.createElement(Component, { ref: ref, className: classNames__default["default"](className, bsPrefix, 'row'), ...props },
        React__namespace.createElement("div", { className: "col" },
            React__namespace.createElement("ul", null, React__namespace.Children.map(children, (child) => (React__namespace.createElement("li", null, React__namespace.cloneElement(child))))))));
});
FooterBottomLinks.propTypes = propTypes$I;
FooterBottomLinks.displayName = 'FooterBottomLinks';

const FooterBottom = React__namespace.forwardRef(({ as: Component = 'section', children, bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-bottom');
    return (React__namespace.createElement(Component, { ref: ref, className: classNames__default["default"](className, bsPrefix), ...props },
        React__namespace.createElement("div", { className: "container-fluid" }, children)));
});
var FooterBottom$1 = Object.assign(FooterBottom, {
    Links: FooterBottomLinks,
    Copyrights: FooterBottomCopyrights
});

const FooterTopContactLinks = React__namespace.forwardRef(({ as: Component = 'div', children, bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-contact-links');
    return (React__namespace.createElement(Component, { className: classNames__default["default"](bsPrefix, 'row', className), ref: ref, ...props },
        React__namespace.createElement("div", { className: "col" },
            React__namespace.createElement("div", { className: "d-flex justify-content-lg-end" },
                React__namespace.createElement("ul", null,
                    " ",
                    React__namespace.Children.map(children, (child) => (React__namespace.createElement("li", null, React__namespace.cloneElement(child)))))))));
});

const propTypes$H = {
    headerTitle: PropTypes__default["default"].node,
    titleClass: PropTypes__default["default"].string,
    descriptionClass: PropTypes__default["default"].string,
    columnClass: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    bsPrefix: PropTypes__default["default"].string
};
const defaultProps$j = {
    columnClass: 'col-lg-6',
};
const FooterTopHeader = React.forwardRef(({ as: Component = 'div', headerTitle, children, bsPrefix, className, titleClass, descriptionClass, columnClass = 'col-lg-6', ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-header');
    return (React__namespace.createElement(Component, { className: classNames__default["default"](bsPrefix, className, 'row'), ref: ref, ...props },
        React__namespace.createElement("div", { className: classNames__default["default"]('col', columnClass) },
            React__namespace.createElement("div", { className: classNames__default["default"]('title', titleClass) }, headerTitle),
            React__namespace.createElement("div", { className: classNames__default["default"]('description', descriptionClass) }, children))));
});
FooterTopHeader.defaultProps = defaultProps$j;
FooterTopHeader.propTypes = propTypes$H;
FooterTopHeader.displayName = 'FooterTopHeader';

const context$2 = React__namespace.createContext({
    noOfItem: 0
});
context$2.displayName = 'FooterTopItemGrpContext';

const propTypes$G = {
    itemTitle: PropTypes__default["default"].node,
    titleClass: PropTypes__default["default"].string,
    linksClass: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
};
const FooterTopItem = React__namespace.forwardRef(({ as: Component = 'div', itemTitle, children, className, titleClass, linksClass, ...props }, ref) => {
    const { noOfItem } = React__namespace.useContext(context$2);
    const colSize = noOfItem < 5 ? 'col-lg-3' : 'col-lg-2';
    return (React__namespace.createElement(Component, { className: classNames__default["default"](colSize, className), ref: ref, ...props },
        React__namespace.createElement("div", { className: classNames__default["default"]('title', titleClass) }, itemTitle),
        React__namespace.createElement("ul", { className: classNames__default["default"]('links', linksClass) }, React__namespace.Children.map(children, (child) => (React__namespace.createElement("li", null, React__namespace.cloneElement(child)))))));
});
FooterTopItem.displayName = 'FooterTopItem';
FooterTopItem.propTypes = propTypes$G;

const propTypes$F = {
    as: PropTypes__default["default"].elementType,
    bsPrefix: PropTypes__default["default"].string,
};
const FooterTopItemGroup = React__namespace.forwardRef(({ as: Component = 'div', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-items');
    const noOfChildren = React__namespace.Children.count(children);
    const contextValue = React__namespace.useMemo(() => ({ noOfItem: noOfChildren }), [noOfChildren]);
    warning__default["default"](noOfChildren <= 6, 'Number of Footer Items should not exceed 6');
    return (React__namespace.createElement(context$2.Provider, { value: contextValue },
        React__namespace.createElement(Component, { className: classNames__default["default"](bsPrefix, className, 'row'), ref: ref, ...props }, children)));
});
FooterTopItemGroup.displayName = 'FooterTopItemGroup';
FooterTopItemGroup.propTypes = propTypes$F;

const FooterTop = React__namespace.forwardRef(({ as: Component = 'section', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-top');
    return (React__namespace.createElement(Component, { ref: ref, className: classNames__default["default"](bsPrefix, className), ...props },
        React__namespace.createElement("div", { className: "container-fluid" }, children)));
});
var FooterSection = Object.assign(FooterTop, {
    Header: FooterTopHeader,
    ItemGroup: FooterTopItemGroup,
    Item: FooterTopItem,
    ContactLinks: FooterTopContactLinks,
});

const propTypes$E = {
    as: PropTypes__default["default"].elementType,
    bsPrefix: PropTypes__default["default"].string,
};
const Footer = React__namespace.forwardRef(({ as: Component = 'footer', bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer');
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, className: classNames__default["default"](className, bsPrefix), ...props }));
});
Footer.displayName = 'Footer';
Footer.propTypes = propTypes$E;
var Footer$1 = Object.assign(Footer, {
    Top: FooterSection,
    Bottom: FooterBottom$1,
});

const containerSizes = PropTypes__default["default"].oneOfType([
    PropTypes__default["default"].bool,
    PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),
]);
const propTypes$D = {
    /**
     * @default 'container'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Allow the Container to fill all of its available horizontal space.
     * @type {(true|"sm"|"md"|"lg"|"xl"|"xxl")}
     */
    fluid: containerSizes,
    /**
     * You can use a custom element for this component
     */
    as: PropTypes__default["default"].elementType,
};
const defaultProps$i = {
    fluid: false,
};
const Container = React__namespace.forwardRef(({ bsPrefix, fluid, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', className, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'container');
    const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, fluid ? `${prefix}${suffix}` : prefix) }));
});
Container.displayName = 'Container';
Container.propTypes = propTypes$D;
Container.defaultProps = defaultProps$i;

const InputGroupText = createWithBsPrefix('input-group-text', {
    Component: 'span',
});

const InputGroupCheckbox = (props) => (React__namespace.createElement(InputGroupText, null,
    React__namespace.createElement(FormCheckInput, { type: "checkbox", ...props })));
const InputGroupRadio = (props) => (React__namespace.createElement(InputGroupText, null,
    React__namespace.createElement(FormCheckInput, { type: "radio", ...props })));

const propTypes$C = {
    /** @default 'input-group' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Control the size of buttons and form elements from the top-level.
     *
     * @type {('sm'|'lg')}
     */
    size: PropTypes__default["default"].string,
    /**
     * Handles the input's rounded corners when using form validation.
     *
     * Use this when your input group contains both an input and feedback element.
     */
    hasValidation: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
    variant: PropTypes__default["default"].oneOf(['quantity-toggle'])
};
/**
 *
 * @property {InputGroupText} Text
 * @property {InputGroupRadio} Radio
 * @property {InputGroupCheckbox} Checkbox
 */
const InputGroup = React__namespace.forwardRef(({ bsPrefix, size, hasValidation, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...InputGroupProps }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');
    // Intentionally an empty object. Used in detecting if a dropdown
    // exists under an input group.
    const contextValue = React.useMemo(() => ({}), []);
    return (React__namespace.createElement(context$4.Provider, { value: contextValue },
        React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...InputGroupProps, className: classNames__default["default"](className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation') })));
});
InputGroup.propTypes = propTypes$C;
InputGroup.displayName = 'InputGroup';
var InputGroup$1 = Object.assign(InputGroup, {
    Text: InputGroupText,
    Radio: InputGroupRadio,
    Checkbox: InputGroupCheckbox,
});

const Selector = {
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top',
    NAVBAR_TOGGLER: '.navbar-toggler',
};
class BootstrapModalManager extends ModalManager__default["default"] {
    adjustAndStore(prop, element, adjust) {
        const actual = element.style[prop];
        // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible
        // @ts-ignore
        element.dataset[prop] = actual;
        css__default["default"](element, {
            [prop]: `${parseFloat(css__default["default"](element, prop)) + adjust}px`,
        });
    }
    restore(prop, element) {
        const value = element.dataset[prop];
        if (value !== undefined) {
            delete element.dataset[prop];
            css__default["default"](element, { [prop]: value });
        }
    }
    setContainerStyle(containerState) {
        super.setContainerStyle(containerState);
        const container = this.getElement();
        addClass__default["default"](container, 'modal-open');
        if (!containerState.scrollBarWidth)
            return;
        const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
        const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
        qsa__default["default"](container, Selector.FIXED_CONTENT).forEach((el) => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));
        qsa__default["default"](container, Selector.STICKY_CONTENT).forEach((el) => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));
        qsa__default["default"](container, Selector.NAVBAR_TOGGLER).forEach((el) => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));
    }
    removeContainerStyle(containerState) {
        super.removeContainerStyle(containerState);
        const container = this.getElement();
        removeClass__default["default"](container, 'modal-open');
        const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
        const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
        qsa__default["default"](container, Selector.FIXED_CONTENT).forEach((el) => this.restore(paddingProp, el));
        qsa__default["default"](container, Selector.STICKY_CONTENT).forEach((el) => this.restore(marginProp, el));
        qsa__default["default"](container, Selector.NAVBAR_TOGGLER).forEach((el) => this.restore(marginProp, el));
    }
}
let sharedManager;
function getSharedManager(options) {
    if (!sharedManager)
        sharedManager = new BootstrapModalManager(options);
    return sharedManager;
}

const ModalBody = createWithBsPrefix('modal-body');

const ModalContext = React__namespace.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onHide() { },
});

const propTypes$B = {
    /** @default 'modal' */
    bsPrefix: PropTypes__default["default"].string,
    contentClassName: PropTypes__default["default"].string,
    /**
     * Render a large, extra large or small modal.
     *
     * @type ('sm'|'lg','xl')
     */
    size: PropTypes__default["default"].string,
    /**
     * Renders a fullscreen modal. Specifying a breakpoint will render the modal
     * as fullscreen __below__ the breakpoint size.
     *
     * @type (true|'sm-down'|'md-down'|'lg-down'|'xl-down'|'xxl-down')
     */
    fullscreen: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].string]),
    /**
     * Specify whether the Component should be vertically centered
     */
    centered: PropTypes__default["default"].bool,
    /**
     * Allows scrolling the `<Modal.Body>` instead of the entire Modal when overflowing.
     */
    scrollable: PropTypes__default["default"].bool,
};
const ModalDialog = React__namespace.forwardRef(({ bsPrefix, className, contentClassName, centered, size, fullscreen, children, scrollable, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');
    const dialogClass = `${bsPrefix}-dialog`;
    const fullScreenClass = typeof fullscreen === 'string'
        ? `${bsPrefix}-fullscreen-${fullscreen}`
        : `${bsPrefix}-fullscreen`;
    return (React__namespace.createElement("div", { ...props, ref: ref, className: classNames__default["default"](dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass) },
        React__namespace.createElement("div", { className: classNames__default["default"](`${bsPrefix}-content`, contentClassName) }, children)));
});
ModalDialog.displayName = 'ModalDialog';
ModalDialog.propTypes = propTypes$B;

const ModalFooter = createWithBsPrefix('modal-footer');

const propTypes$A = {
    /**
     * Provides an accessible label for the close
     * button. It is used for Assistive Technology when the label text is not
     * readable.
     */
    closeLabel: PropTypes__default["default"].string,
    /**
     * Sets the variant for close button.
     */
    closeVariant: PropTypes__default["default"].oneOf(['white']),
    /**
     * Specify whether the Component should contain a close button
     */
    closeButton: PropTypes__default["default"].bool,
    /**
     * A Callback fired when the close button is clicked. If used directly inside
     * a ModalContext, the onHide will automatically be propagated up
     * to the parent `onHide`.
     */
    onHide: PropTypes__default["default"].func,
};
const defaultProps$h = {
    closeLabel: 'Close',
    closeButton: false,
};
const AbstractModalHeader = React__namespace.forwardRef(({ closeLabel, closeVariant, closeButton, onHide, children, ...props }, ref) => {
    const context = React.useContext(ModalContext);
    const handleClick = useEventCallback__default["default"](() => {
        context?.onHide();
        onHide?.();
    });
    return (React__namespace.createElement("div", { ref: ref, ...props },
        children,
        closeButton && (React__namespace.createElement(CloseButton, { "aria-label": closeLabel, variant: closeVariant, onClick: handleClick }))));
});
AbstractModalHeader.propTypes = propTypes$A;
AbstractModalHeader.defaultProps = defaultProps$h;

const propTypes$z = {
    /**
     * @default 'modal-header'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Provides an accessible label for the close
     * button. It is used for Assistive Technology when the label text is not
     * readable.
     */
    closeLabel: PropTypes__default["default"].string,
    /**
     * Sets the variant for close button.
     */
    closeVariant: PropTypes__default["default"].oneOf(['white']),
    /**
     * Specify whether the Component should contain a close button
     */
    closeButton: PropTypes__default["default"].bool,
    /**
     * A Callback fired when the close button is clicked. If used directly inside
     * a Modal component, the onHide will automatically be propagated up to the
     * parent Modal `onHide`.
     */
    onHide: PropTypes__default["default"].func,
};
const defaultProps$g = {
    closeLabel: 'Close',
    closeButton: false,
};
const ModalHeader = React__namespace.forwardRef(({ bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-header');
    return (React__namespace.createElement(AbstractModalHeader, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) }));
});
ModalHeader.displayName = 'ModalHeader';
ModalHeader.propTypes = propTypes$z;
ModalHeader.defaultProps = defaultProps$g;

const ModalTitle = createWithBsPrefix('modal-title', {
    Component: 'h3',
});

const propTypes$y = {
    /**
     * @default 'modal'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Render a large, extra large or small modal.
     * When not provided, the modal is rendered with medium (default) size.
     * @type ('sm'|'lg'|'xl')
     */
    size: PropTypes__default["default"].string,
    /**
     * Renders a fullscreen modal. Specifying a breakpoint will render the modal
     * as fullscreen __below__ the breakpoint size.
     *
     * @type (true|'sm-down'|'md-down'|'lg-down'|'xl-down'|'xxl-down')
     */
    fullscreen: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].string]),
    /**
     * vertically center the Dialog in the window
     */
    centered: PropTypes__default["default"].bool,
    /**
     * Include a backdrop component. Specify 'static' for a backdrop that doesn't
     * trigger an "onHide" when clicked.
     */
    backdrop: PropTypes__default["default"].oneOf(['static', true, false]),
    /**
     * Add an optional extra class name to .modal-backdrop
     * It could end up looking like class="modal-backdrop foo-modal-backdrop in".
     */
    backdropClassName: PropTypes__default["default"].string,
    /**
     * Close the modal when escape key is pressed
     */
    keyboard: PropTypes__default["default"].bool,
    /**
     * Allows scrolling the `<Modal.Body>` instead of the entire Modal when overflowing.
     */
    scrollable: PropTypes__default["default"].bool,
    /**
     * Open and close the Modal with a slide and fade animation.
     */
    animation: PropTypes__default["default"].bool,
    /**
     * A css class to apply to the Modal dialog DOM node.
     */
    dialogClassName: PropTypes__default["default"].string,
    /**
     * Add an optional extra class name to .modal-content
     */
    contentClassName: PropTypes__default["default"].string,
    /**
     * A Component type that provides the modal content Markup. This is a useful
     * prop when you want to use your own styles and markup to create a custom
     * modal component.
     */
    dialogAs: PropTypes__default["default"].elementType,
    /**
     * When `true` The modal will automatically shift focus to itself when it
     * opens, and replace it to the last focused element when it closes.
     * Generally this should never be set to false as it makes the Modal less
     * accessible to assistive technologies, like screen-readers.
     */
    autoFocus: PropTypes__default["default"].bool,
    /**
     * When `true` The modal will prevent focus from leaving the Modal while
     * open. Consider leaving the default value here, as it is necessary to make
     * the Modal work well with assistive technologies, such as screen readers.
     */
    enforceFocus: PropTypes__default["default"].bool,
    /**
     * When `true` The modal will restore focus to previously focused element once
     * modal is hidden
     */
    restoreFocus: PropTypes__default["default"].bool,
    /**
     * Options passed to focus function when `restoreFocus` is set to `true`
     *
     * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters
     */
    restoreFocusOptions: PropTypes__default["default"].shape({
        preventScroll: PropTypes__default["default"].bool,
    }),
    /**
     * When `true` The modal will show itself.
     */
    show: PropTypes__default["default"].bool,
    /**
     * A callback fired when the Modal is opening.
     */
    onShow: PropTypes__default["default"].func,
    /**
     * A callback fired when the header closeButton or non-static backdrop is
     * clicked. Required if either are specified.
     */
    onHide: PropTypes__default["default"].func,
    /**
     * A callback fired when the escape key, if specified in `keyboard`, is pressed.
     */
    onEscapeKeyDown: PropTypes__default["default"].func,
    /**
     * Callback fired before the Modal transitions in
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired as the Modal begins to transition in
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the Modal finishes transitioning in
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired right before the Modal transitions out
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired as the Modal begins to transition out
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the Modal finishes transitioning out
     */
    onExited: PropTypes__default["default"].func,
    /**
     * A ModalManager instance used to track and manage the state of open
     * Modals. Useful when customizing how modals interact within a container
     */
    manager: PropTypes__default["default"].object,
    /**
     * @private
     */
    container: PropTypes__default["default"].any,
    'aria-labelledby': PropTypes__default["default"].string,
    'aria-describedby': PropTypes__default["default"].string,
    'aria-label': PropTypes__default["default"].string,
    /**
     * Conveys centered align style to Modal
     */
    centeredAlignVariant: PropTypes__default["default"].bool,
};
const defaultProps$f = {
    show: false,
    backdrop: true,
    keyboard: true,
    autoFocus: true,
    enforceFocus: true,
    restoreFocus: true,
    animation: true,
    dialogAs: ModalDialog,
    centeredAlignVariant: false,
};
function DialogTransition(props) {
    return React__namespace.createElement(Fade, { ...props, timeout: null });
}
function BackdropTransition(props) {
    return React__namespace.createElement(Fade, { ...props, timeout: null });
}
/* eslint-enable no-use-before-define */
const Modal = React__namespace.forwardRef(({ bsPrefix, className, style, dialogClassName, contentClassName, children, dialogAs: Dialog = ModalDialog, 'aria-labelledby': ariaLabelledby, 'aria-describedby': ariaDescribedby, 'aria-label': ariaLabel, centeredAlignVariant, 
/* BaseModal props */
show, animation, backdrop, keyboard, onEscapeKeyDown, onShow, onHide, container, autoFocus, enforceFocus, restoreFocus, restoreFocusOptions, onEntered, onExit, onExiting, onEnter, onEntering, onExited, backdropClassName, manager: propsManager, ...props }, ref) => {
    const [modalStyle, setStyle] = React.useState({});
    const [animateStaticModal, setAnimateStaticModal] = React.useState(false);
    const waitingForMouseUpRef = React.useRef(false);
    const ignoreBackdropClickRef = React.useRef(false);
    const removeStaticModalAnimationRef = React.useRef(null);
    const [modal, setModalRef] = useCallbackRef__default["default"]();
    const mergedRef = useMergedRefs__default["default"](ref, setModalRef);
    const handleHide = useEventCallback__default["default"](onHide);
    const isRTL = useIsRTL();
    bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');
    const modalContext = React.useMemo(() => ({
        onHide: handleHide,
    }), [handleHide]);
    function getModalManager() {
        if (propsManager)
            return propsManager;
        return getSharedManager({ isRTL });
    }
    function updateDialogStyle(node) {
        if (!canUseDOM__default["default"])
            return;
        const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;
        const modalIsOverflowing = node.scrollHeight >
            ownerDocument__default["default"](node).documentElement.clientHeight;
        setStyle({
            paddingRight: containerIsOverflowing && !modalIsOverflowing
                ? getScrollbarSize__default["default"]()
                : undefined,
            paddingLeft: !containerIsOverflowing && modalIsOverflowing
                ? getScrollbarSize__default["default"]()
                : undefined,
        });
    }
    const handleWindowResize = useEventCallback__default["default"](() => {
        if (modal) {
            updateDialogStyle(modal.dialog);
        }
    });
    useWillUnmount__default["default"](() => {
        removeEventListener__default["default"](window, 'resize', handleWindowResize);
        removeStaticModalAnimationRef.current?.();
    });
    // We prevent the modal from closing during a drag by detecting where the
    // the click originates from. If it starts in the modal and then ends outside
    // don't close.
    const handleDialogMouseDown = () => {
        waitingForMouseUpRef.current = true;
    };
    const handleMouseUp = (e) => {
        if (waitingForMouseUpRef.current &&
            modal &&
            e.target === modal.dialog) {
            ignoreBackdropClickRef.current = true;
        }
        waitingForMouseUpRef.current = false;
    };
    const handleStaticModalAnimation = () => {
        setAnimateStaticModal(true);
        removeStaticModalAnimationRef.current = transitionEnd__default["default"](modal.dialog, () => {
            setAnimateStaticModal(false);
        });
    };
    const handleStaticBackdropClick = (e) => {
        if (e.target !== e.currentTarget) {
            return;
        }
        handleStaticModalAnimation();
    };
    const handleClick = (e) => {
        if (backdrop === 'static') {
            handleStaticBackdropClick(e);
            return;
        }
        if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
            ignoreBackdropClickRef.current = false;
            return;
        }
        onHide?.();
    };
    const handleEscapeKeyDown = (e) => {
        if (!keyboard && backdrop === 'static') {
            // Call preventDefault to stop modal from closing in restart ui,
            // then play our animation.
            e.preventDefault();
            handleStaticModalAnimation();
        }
        else if (keyboard && onEscapeKeyDown) {
            onEscapeKeyDown(e);
        }
    };
    const handleEnter = (node, isAppearing) => {
        if (node) {
            node.style.display = 'block';
            updateDialogStyle(node);
        }
        onEnter?.(node, isAppearing);
    };
    const handleExit = (node) => {
        removeStaticModalAnimationRef.current?.();
        onExit?.(node);
    };
    const handleEntering = (node, isAppearing) => {
        onEntering?.(node, isAppearing);
        // FIXME: This should work even when animation is disabled.
        addEventListener__default["default"](window, 'resize', handleWindowResize);
    };
    const handleExited = (node) => {
        if (node)
            node.style.display = ''; // RHL removes it sometimes
        onExited?.(node);
        // FIXME: This should work even when animation is disabled.
        removeEventListener__default["default"](window, 'resize', handleWindowResize);
    };
    const renderBackdrop = React.useCallback((backdropProps) => (React__namespace.createElement("div", { ...backdropProps, className: classNames__default["default"](`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show') })), [animation, backdropClassName, bsPrefix]);
    const baseModalStyle = { ...style, ...modalStyle };
    // Sets `display` always block when `animation` is false
    if (!animation) {
        baseModalStyle.display = 'block';
    }
    const renderDialog = (dialogProps) => (React__namespace.createElement(SGDSWrapper, { role: "dialog", ...dialogProps, style: baseModalStyle, className: classNames__default["default"](className, bsPrefix, animateStaticModal && `${bsPrefix}-static`), onClick: backdrop ? handleClick : undefined, onMouseUp: handleMouseUp, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, variant: centeredAlignVariant ? 'centered-align-icon' : undefined },
        React__namespace.createElement(Dialog, { ...props, onMouseDown: handleDialogMouseDown, className: dialogClassName, contentClassName: contentClassName }, children)));
    return (React__namespace.createElement(ModalContext.Provider, { value: modalContext },
        React__namespace.createElement(BaseModal__default["default"], { show: show, ref: mergedRef, backdrop: backdrop, container: container, keyboard // Always set true - see handleEscapeKeyDown
            : true, autoFocus: autoFocus, enforceFocus: enforceFocus, restoreFocus: restoreFocus, restoreFocusOptions: restoreFocusOptions, onEscapeKeyDown: handleEscapeKeyDown, onShow: onShow, onHide: onHide, onEnter: handleEnter, onEntering: handleEntering, onEntered: onEntered, onExit: handleExit, onExiting: onExiting, onExited: handleExited, manager: getModalManager(), transition: animation
                ? DialogTransition
                : undefined, backdropTransition: animation
                ? BackdropTransition
                : undefined, renderBackdrop: renderBackdrop, renderDialog: renderDialog })));
});
Modal.displayName = 'Modal';
Modal.propTypes = propTypes$y;
Modal.defaultProps = defaultProps$f;
var Modal$1 = Object.assign(Modal, {
    Body: ModalBody,
    Header: ModalHeader,
    Title: ModalTitle,
    Footer: ModalFooter,
    Dialog: ModalDialog,
    TRANSITION_DURATION: 300,
    BACKDROP_TRANSITION_DURATION: 150,
});

const NavItem = createWithBsPrefix('nav-item', {
    Component: "li",
    displayName: 'NavItem'
});

const propTypes$x = {
    /**
     * @default 'nav-link'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The active state of the NavItem item.
     */
    active: PropTypes__default["default"].bool,
    /**
     * The disabled state of the NavItem item.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * The ARIA role for the `NavLink`, In the context of a 'tablist' parent Nav,
     * the role defaults to 'tab'
     * */
    role: PropTypes__default["default"].string,
    /** The HTML href attribute for the `NavLink` */
    href: PropTypes__default["default"].string,
    /**
     * Uniquely identifies the `NavItem` amongst its siblings,
     * used to determine and control the active state of the parent `Nav`
     */
    eventKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /** @default 'a' */
    as: PropTypes__default["default"].elementType,
};
const defaultProps$e = {
    disabled: false,
};
const NavLink = React__namespace.forwardRef(({ bsPrefix, className, as: Component = Anchor__default["default"], active, eventKey, 
// onClick,
...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'nav-link');
    const [navItemProps, meta] = NavItem$1.useNavItem({
        key: SelectableContext.makeEventKey(eventKey, props.href),
        active,
        ...props,
    });
    return (React__namespace.createElement(Component, { ...props, ...navItemProps, ref: ref, className: classNames__default["default"](className, bsPrefix, props.disabled && 'disabled', meta.isActive && 'active'), "aria-current": meta.isActive ? "page" : "false" }));
});
NavLink.displayName = 'NavLink';
NavLink.propTypes = propTypes$x;
NavLink.defaultProps = defaultProps$e;

const NavContext = React__namespace.createContext(null);
NavContext.displayName = 'NavContext';

const propTypes$w = {
    /**
     * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
     * @type {string}
     */
    id: PropTypes__default["default"].string,
    /** An `onClick` handler passed to the Toggle component */
    onClick: PropTypes__default["default"].func,
    /** The content of the non-toggle Button.  */
    title: PropTypes__default["default"].node.isRequired,
    /** Disables the toggle NavLink  */
    disabled: PropTypes__default["default"].bool,
    /** Style the toggle NavLink as active  */
    active: PropTypes__default["default"].bool,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */
    menuRole: PropTypes__default["default"].string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */
    renderMenuOnMount: PropTypes__default["default"].bool,
    /**
     *  Which event when fired outside the component will cause it to be closed.
     *
     * _see [DropdownMenu](#menu-props) for more details_
     */
    rootCloseEvent: PropTypes__default["default"].string,
    /**
     * Menu color variant.
     *
     * Omitting this will use the default light color.
     */
    menuVariant: PropTypes__default["default"].oneOf(['dark']),
    /** @ignore */
    bsPrefix: PropTypes__default["default"].string,
    /** When true, applies mega menu stylings */
    isMegaMenu: PropTypes__default["default"].bool,
    eventKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
};
const NavDropdown = React__namespace.forwardRef(({ id, title, children, bsPrefix, className, rootCloseEvent, menuRole, disabled, active, renderMenuOnMount, menuVariant, isMegaMenu, eventKey, align, ...props }, ref) => {
    /* NavItem has no additional logic, it's purely presentational. Can set nav item class here to support "as" */
    const navContext = React.useContext(NavContext);
    const navItemPrefix = useBootstrapPrefix(undefined, 'nav-item');
    const dropDownClass = classNames__default["default"](className, navItemPrefix, isMegaMenu ? 'has-megamenu' : undefined);
    return (React__namespace.createElement(Dropdown$1, { ref: ref, as: "li", ...props, className: dropDownClass, align: align },
        React__namespace.createElement(Dropdown$1.Toggle, { id: id, eventKey: null, active: active || navContext?.activeKey === eventKey, disabled: disabled, childBsPrefix: bsPrefix, as: NavLink },
            title,
            React__namespace.createElement("i", { className: "bi bi-chevron-down" })),
        React__namespace.createElement(Dropdown$1.Menu, { role: menuRole, renderOnMount: renderMenuOnMount, rootCloseEvent: rootCloseEvent, variant: menuVariant, isNav: true, align: align, as: isMegaMenu ? 'div' : undefined, className: isMegaMenu ? 'mega-menu' : undefined }, children)));
});
NavDropdown.displayName = 'NavDropdown';
NavDropdown.propTypes = propTypes$w;
var NavDropdown$1 = Object.assign(NavDropdown, {
    Item: Dropdown$1.Item,
    ItemText: Dropdown$1.ItemText,
    Divider: Dropdown$1.Divider,
    Header: Dropdown$1.Header,
});

const propTypes$v = {
    /**
     * @default 'nav'
     */
    bsPrefix: PropTypes__default["default"].string,
    /** @private */
    // navbarBsPrefix: PropTypes.string,
    /** @private */
    // cardHeaderBsPrefix: PropTypes.string,
    /**
     * The visual variant of the nav items.
     *
     * @type {('tabs-basic-toggle' | 'tabs-info-toggle')}
     */
    variant: PropTypes__default["default"].string,
    /**
     * The default active key that is selected on start.
     */
    defaultActiveKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /**
     * Marks the NavItem with a matching `eventKey` (or `href` if present) as active.
     */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /**
     * A callback fired when a NavItem is selected.
     *
     * ```js
     * function (
     *  Any eventKey,
     *  SyntheticEvent event?
     * )
     * ```
     */
    onSelect: PropTypes__default["default"].func,
    /**
     * ARIA role for the Nav, in the context of a TabContainer, the default will
     * be set to "tablist", but can be overridden by the Nav when set explicitly.
     *
     * When the role is "tablist", NavLink focus is managed according to
     * the ARIA authoring practices for tabs:
     * https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel
     */
    role: PropTypes__default["default"].string,
    /**
     * Apply styling an alignment for use in a Navbar. This prop will be set
     * automatically when the Nav is used inside a Navbar.
     */
    // navbar: PropTypes.bool,
    /**
     * Enable vertical scrolling within the toggleable contents of a collapsed Navbar.
     */
    navbarScroll: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
    /** @private */
    onKeyDown: PropTypes__default["default"].func,
};
const Nav = React__namespace.forwardRef((uncontrolledProps, ref) => {
    const { as = 'ul', bsPrefix: initialBsPrefix, navbarScroll, className, activeKey, ...props } = uncontrollable.useUncontrolled(uncontrolledProps, { activeKey: 'onSelect' });
    const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'nav');
    const contextValue = React.useMemo(() => ({
        activeKey,
    }), [activeKey]);
    const navbarContext = React.useContext(context$3);
    return (React__namespace.createElement(NavContext.Provider, { value: contextValue },
        React__namespace.createElement(BaseNav__default["default"], { as: as, ref: ref, activeKey: activeKey, className: classNames__default["default"](className, {
                [bsPrefix]: !navbarContext,
                [`${navbarContext?.bsPrefix}-nav`]: navbarContext,
                [`${navbarContext?.bsPrefix}-nav-scroll`]: navbarContext && navbarScroll,
                ['sgds']: !navbarContext,
                ['nav-tabs']: !navbarContext,
            }), ...props })));
});
Nav.displayName = 'Nav';
Nav.propTypes = propTypes$v;
var Nav$1 = Object.assign(Nav, {
    Item: NavItem,
    Link: NavLink,
    Dropdown: NavDropdown$1,
});

const propTypes$u = {
    /** @default 'navbar' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * An href, when provided the Brand will render as an `<a>` element (unless `as` is provided).
     */
    href: PropTypes__default["default"].string,
    /**
     * Set a custom element for this component.
     */
    as: PropTypes__default["default"].elementType,
};
const NavbarBrand = React__namespace.forwardRef(({ bsPrefix, className, as, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-brand');
    const Component = as || (props.href ? 'a' : 'span');
    return (React__namespace.createElement(Component, { ...props, ref: ref, className: classNames__default["default"](className, bsPrefix) }));
});
NavbarBrand.displayName = 'NavbarBrand';
NavbarBrand.propTypes = propTypes$u;

const propTypes$t = {
    /** @default 'navbar-collapse' */
    bsPrefix: PropTypes__default["default"].string,
};
const NavbarCollapse = React__namespace.forwardRef(({ children, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-collapse');
    const context = React.useContext(context$3);
    return (React__namespace.createElement(Collapse, { in: !!(context && context.expanded), ...props },
        React__namespace.createElement("div", { ref: ref, className: bsPrefix }, children)));
});
NavbarCollapse.displayName = 'NavbarCollapse';
NavbarCollapse.propTypes = propTypes$t;

const propTypes$s = {
    /** @default 'navbar-toggler' */
    bsPrefix: PropTypes__default["default"].string,
    /** An accessible ARIA label for the toggler button. */
    label: PropTypes__default["default"].string,
    /** @private */
    onClick: PropTypes__default["default"].func,
    /**
     * The toggle content. When empty, the default toggle will be rendered.
     */
    children: PropTypes__default["default"].node,
    as: PropTypes__default["default"].elementType,
};
const defaultProps$d = {
    label: 'Toggle navigation',
};
const NavbarToggle = React__namespace.forwardRef(({ bsPrefix, className, children, label, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'button', onClick, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-toggler');
    const { onToggle, expanded } = React.useContext(context$3) || {};
    const handleClick = useEventCallback__default["default"]((e) => {
        if (onClick)
            onClick(e);
        if (onToggle)
            onToggle();
    });
    if (Component === 'button') {
        props.type = 'button';
    }
    return (React__namespace.createElement(Component, { ...props, ref: ref, onClick: handleClick, "aria-label": label, className: classNames__default["default"](className, bsPrefix, !expanded && 'collapsed'), "aria-expanded": expanded }, children || React__namespace.createElement("span", { className: `${bsPrefix}-icon` })));
});
NavbarToggle.displayName = 'NavbarToggle';
NavbarToggle.propTypes = propTypes$s;
NavbarToggle.defaultProps = defaultProps$d;

const NavbarText = createWithBsPrefix('navbar-text', {
    Component: 'span',
});

const propTypes$r = {
    /** @default 'navbar' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The breakpoint, below which, the Navbar will collapse.
     * When `true` the Navbar will always be expanded regardless of screen size.
     */
    expand: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].bool,
        PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),
    ]).isRequired,
    /**
     * A convenience prop for adding `bg-*` utility classes since they are so commonly used here.
     * `light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.
     *
     * Pairs nicely with the `variant` prop.
     */
    bg: PropTypes__default["default"].string,
    /**
     * Create a fixed navbar along the top or bottom of the screen, that scrolls with the
     * page. A convenience prop for the `fixed-*` positioning classes.
     */
    fixed: PropTypes__default["default"].oneOf(['top', 'bottom']),
    /**
     * Position the navbar at the top of the viewport, but only after scrolling past it.
     * A convenience prop for the `sticky-top` positioning class.
     *
     *  __Not supported in <= IE11 and other older browsers without a polyfill__
     */
    sticky: PropTypes__default["default"].oneOf(['top']),
    /**
     * Set a custom element for this component.
     */
    as: PropTypes__default["default"].elementType,
    /**
     * A callback fired when the `<Navbar>` body collapses or expands. Fired when
     * a `<Navbar.Toggle>` is clicked and called with the new `expanded`
     * boolean value.
     *
     * @controllable expanded
     */
    onToggle: PropTypes__default["default"].func,
    /**
     * A callback fired when a descendant of a child `<Nav>` is selected. Should
     * be used to execute complex closing or other miscellaneous actions desired
     * after selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`
     * descendants exist. The callback is called with an eventKey, which is a
     * prop from the selected `<Nav>` descendant, and an event.
     *
     * ```js
     * function (
     *  eventKey: mixed,
     *  event?: SyntheticEvent
     * )
     * ```
     *
     * For basic closing behavior after all `<Nav>` descendant onSelect events in
     * mobile viewports, try using collapseOnSelect.
     *
     * Note: If you are manually closing the navbar using this `OnSelect` prop,
     * ensure that you are setting `expanded` to false and not *toggling* between
     * true and false.
     */
    onSelect: PropTypes__default["default"].func,
    /**
     * Toggles `expanded` to `false` after the onSelect event of a descendant of a
     * child `<Nav>` fires. Does nothing if no `<Nav>` or `<Nav>` descendants exist.
     *
     * Manually controlling `expanded` via the onSelect callback is recommended instead,
     * for more complex operations that need to be executed after
     * the `select` event of `<Nav>` descendants.
     */
    collapseOnSelect: PropTypes__default["default"].bool,
    /**
     * Controls the visiblity of the navbar body
     *
     * @controllable onToggle
     */
    expanded: PropTypes__default["default"].bool,
    /**
     * The ARIA role for the navbar, will default to 'navigation' for
     * Navbars whose `as` is something other than `<nav>`.
     *
     * @default 'navigation'
     */
    role: PropTypes__default["default"].string,
    hasBorderBottom: PropTypes__default["default"].bool,
};
const defaultProps$c = {
    expand: true,
    collapseOnSelect: false,
};
const Navbar = React__namespace.forwardRef((props, ref) => {
    const { bsPrefix: initialBsPrefix, expand, bg, fixed, sticky, className, hasBorderBottom, 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'nav', expanded, onToggle, onSelect, collapseOnSelect, ...controlledProps } = uncontrollable.useUncontrolled(props, {
        expanded: 'onToggle',
    });
    const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');
    const handleCollapse = React.useCallback((...args) => {
        onSelect?.(...args);
        if (collapseOnSelect && expanded) {
            onToggle?.(false);
        }
    }, [onSelect, collapseOnSelect, expanded, onToggle]);
    // will result in some false positives but that seems better
    // than false negatives. strict `undefined` check allows explicit
    // "nulling" of the role if the user really doesn't want one
    if (controlledProps.role === undefined && Component !== 'nav') {
        controlledProps.role = 'navigation';
    }
    let expandClass = `${bsPrefix}-expand`;
    if (typeof expand === 'string')
        expandClass = `${expandClass}-${expand}`;
    const navbarContext = React.useMemo(() => ({
        onToggle: () => onToggle?.(!expanded),
        bsPrefix,
        expanded: !!expanded,
    }), [bsPrefix, expanded, onToggle]);
    return (React__namespace.createElement(context$3.Provider, { value: navbarContext },
        React__namespace.createElement(SelectableContext__default["default"].Provider, { value: handleCollapse },
            React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...controlledProps, className: classNames__default["default"](className, bsPrefix, expand && expandClass, 'navbar-light', bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`, hasBorderBottom && 'border-bottom') }))));
});
Navbar.propTypes = propTypes$r;
Navbar.defaultProps = defaultProps$c;
Navbar.displayName = 'Navbar';
var Navbar$1 = Object.assign(Navbar, {
    Brand: NavbarBrand,
    Collapse: NavbarCollapse,
    // Offcanvas: NavbarOffcanvas,
    Text: NavbarText,
    Toggle: NavbarToggle,
});

var PopoverHeader = createWithBsPrefix('popover-header');

var PopoverBody = createWithBsPrefix('popover-body');

function getOverlayDirection(placement, isRTL) {
    let bsDirection = placement;
    if (placement === 'left') {
        bsDirection = isRTL ? 'end' : 'start';
    }
    else if (placement === 'right') {
        bsDirection = isRTL ? 'start' : 'end';
    }
    return bsDirection;
}

const propTypes$q = {
    /**
     * @default 'popover'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * An html id attribute, necessary for accessibility
     * @type {string}
     * @required
     */
    id: PropTypes__default["default"].string,
    /**
     * Sets the direction the Popover is positioned towards.
     *
     * > This is generally provided by the `Overlay` component positioning the popover
     */
    placement: PropTypes__default["default"].oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]),
    /**
     * An Overlay injected set of props for positioning the popover arrow.
     *
     * > This is generally provided by the `Overlay` component positioning the popover
     */
    arrowProps: PropTypes__default["default"].shape({
        ref: PropTypes__default["default"].any,
        style: PropTypes__default["default"].object,
    }),
    /**
     * When this prop is set, it creates a Popover with a Popover.Body inside
     * passing the children directly to it
     */
    body: PropTypes__default["default"].bool,
    /** @private */
    popper: PropTypes__default["default"].object,
    /** @private */
    show: PropTypes__default["default"].bool,
    hasArrow: PropTypes__default["default"].bool,
};
const defaultProps$b = {
    placement: 'right',
};
const Popover = React__namespace.forwardRef(({ bsPrefix, placement, className, style, children, body, arrowProps, hasArrow = false, popper: _, show: _1, ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'popover');
    const isRTL = useIsRTL();
    const [primaryPlacement] = placement?.split('-') || [];
    const bsDirection = getOverlayDirection(primaryPlacement, isRTL);
    return (React__namespace.createElement("div", { ref: ref, role: "tooltip", style: style, "x-placement": primaryPlacement, className: classNames__default["default"](className, decoratedBsPrefix, primaryPlacement && `bs-popover-${bsDirection}`), ...props },
        hasArrow && React__namespace.createElement("div", { className: "popover-arrow", ...arrowProps }),
        React__namespace.createElement(React__namespace.Fragment, null,
            " ",
            children)));
});
Popover.defaultProps = defaultProps$b;
Popover.propTypes = propTypes$q;
var Popover$1 = Object.assign(Popover, {
    Header: PopoverHeader,
    Body: PopoverBody,
    // Default popover offset.
    // https://github.com/twbs/bootstrap/blob/5c32767e0e0dbac2d934bcdee03719a65d3f1187/js/src/popover.js#L28
    POPPER_OFFSET: [0, 8],
});

// This is meant for internal use.
// This applies a custom offset to the overlay if it's a popover.
function useOverlayOffset(customOffset) {
    const overlayRef = React.useRef(null);
    const popoverClass = useBootstrapPrefix(undefined, 'popover');
    const offset = React.useMemo(() => ({
        name: 'offset',
        options: {
            offset: () => {
                if (overlayRef.current &&
                    hasClass__default["default"](overlayRef.current, popoverClass)) {
                    return customOffset || Popover$1.POPPER_OFFSET;
                }
                return customOffset || [0, 0];
            },
        },
    }), [customOffset, popoverClass]);
    return [overlayRef, [offset]];
}

const propTypes$p = {
    /**
     * A component instance, DOM node, or function that returns either.
     * The `container` element will have the Overlay appended to it via a React portal.
     */
    container: PropTypes__default["default"].oneOfType([propTypesExtra.componentOrElement, PropTypes__default["default"].func]),
    /**
     * A component instance, DOM node, or function that returns either.
     * The overlay will be positioned in relation to the `target`
     */
    target: PropTypes__default["default"].oneOfType([propTypesExtra.componentOrElement, PropTypes__default["default"].func]),
    /**
     * Set the visibility of the Overlay
     */
    show: PropTypes__default["default"].bool,
    /**
     * A set of popper options and props passed directly to Popper.
     */
    popperConfig: PropTypes__default["default"].object,
    /**
     * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
     */
    rootClose: PropTypes__default["default"].bool,
    /**
     * Specify event for triggering a "root close" toggle.
     */
    rootCloseEvent: PropTypes__default["default"].oneOf(['click', 'mousedown']),
    /**
     * A callback invoked by the overlay when it wishes to be hidden. Required if
     * `rootClose` is specified.
     */
    onHide: PropTypes__default["default"].func,
    /**
     * Animate the entering and exiting of the Overlay. `true` will use the `<Fade>` transition,
     * or a custom react-transition-group `<Transition>` component can be provided.
     */
    transition: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, propTypesExtra.elementType]),
    /**
     * Callback fired before the Overlay transitions in
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired as the Overlay begins to transition in
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the Overlay finishes transitioning in
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired right before the Overlay transitions out
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired as the Overlay begins to transition out
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the Overlay finishes transitioning out
     */
    onExited: PropTypes__default["default"].func,
    /**
     * The placement of the Overlay in relation to it's `target`.
     */
    placement: PropTypes__default["default"].oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]),
};
const defaultProps$a = {
    transition: Fade,
    rootClose: false,
    show: false,
    placement: 'top',
};
function wrapRefs(props, arrowProps) {
    const { ref } = props;
    const { ref: aRef } = arrowProps;
    props.ref = ref.__wrapped || (ref.__wrapped = (r) => ref(safeFindDOMNode(r)));
    arrowProps.ref =
        aRef.__wrapped || (aRef.__wrapped = (r) => aRef(safeFindDOMNode(r)));
}
const Overlay = React__namespace.forwardRef(({ children: overlay, transition, popperConfig = {}, ...outerProps }, outerRef) => {
    const popperRef = React.useRef({});
    const [ref, modifiers] = useOverlayOffset(outerProps.offset);
    const mergedRef = useMergedRefs__default["default"](outerRef, ref);
    const actualTransition = transition === true ? Fade : transition || undefined;
    return (React__namespace.createElement(BaseOverlay__default["default"], { ...outerProps, ref: mergedRef, popperConfig: {
            ...popperConfig,
            modifiers: modifiers.concat(popperConfig.modifiers || []),
        }, 
        //@ts-ignore
        transition: actualTransition }, (overlayProps, { arrowProps, popper: popperObj, show }) => {
        wrapRefs(overlayProps, arrowProps);
        // Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop
        const updatedPlacement = popperObj?.placement;
        const popper = Object.assign(popperRef.current, {
            state: popperObj?.state,
            scheduleUpdate: popperObj?.update,
            placement: updatedPlacement,
            outOfBoundaries: popperObj?.state?.modifiersData.hide?.isReferenceHidden || false,
        });
        if (typeof overlay === 'function')
            return overlay({
                ...overlayProps,
                placement: updatedPlacement,
                show,
                ...(!transition && show && { className: 'show' }),
                popper,
                arrowProps,
            });
        return React__namespace.cloneElement(overlay, {
            ...overlayProps,
            placement: updatedPlacement,
            arrowProps,
            popper,
            className: classNames__default["default"](overlay.props.className, !transition && show && 'show'),
            style: {
                ...overlay.props.style,
                ...overlayProps.style,
            },
        });
    }));
});
Overlay.displayName = 'Overlay';
Overlay.propTypes = propTypes$p;
Overlay.defaultProps = defaultProps$a;

function normalizeDelay(delay) {
    return delay && typeof delay === 'object'
        ? delay
        : {
            show: delay,
            hide: delay,
        };
}
// Simple implementation of mouseEnter and mouseLeave.
// React's built version is broken: https://github.com/facebook/react/issues/4251
// for cases when the trigger is disabled and mouseOut/Over can cause flicker
// moving from one child element to another.
function handleMouseOverOut(
// eslint-disable-next-line @typescript-eslint/no-shadow
handler, args, relatedNative) {
    const [e] = args;
    const target = e.currentTarget;
    const related = e.relatedTarget || e.nativeEvent[relatedNative];
    if ((!related || related !== target) && !contains__default["default"](target, related)) {
        handler(...args);
    }
}
const triggerType = PropTypes__default["default"].oneOf(['click', 'hover', 'focus']);
const propTypes$o = {
    children: PropTypes__default["default"].oneOfType([PropTypes__default["default"].element, PropTypes__default["default"].func]).isRequired,
    /**
     * Specify which action or actions trigger Overlay visibility
     *
     * @type {'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>}
     */
    trigger: PropTypes__default["default"].oneOfType([triggerType, PropTypes__default["default"].arrayOf(triggerType)]),
    /**
     * A millisecond delay amount to show and hide the Overlay once triggered
     */
    delay: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].number,
        PropTypes__default["default"].shape({
            show: PropTypes__default["default"].number,
            hide: PropTypes__default["default"].number,
        }),
    ]),
    /**
     * The visibility of the Overlay. `show` is a _controlled_ prop so should be paired
     * with `onToggle` to avoid breaking user interactions.
     *
     * Manually toggling `show` does **not** wait for `delay` to change the visibility.
     *
     * @controllable onToggle
     */
    show: PropTypes__default["default"].bool,
    /**
     * The initial visibility state of the Overlay.
     */
    defaultShow: PropTypes__default["default"].bool,
    /**
     * A callback that fires when the user triggers a change in tooltip visibility.
     *
     * `onToggle` is called with the desired next `show`, and generally should be passed
     * back to the `show` prop. `onToggle` fires _after_ the configured `delay`
     *
     * @controllable `show`
     */
    onToggle: PropTypes__default["default"].func,
    /**
      The initial flip state of the Overlay.
     */
    flip: PropTypes__default["default"].bool,
    /**
     * An element or text to overlay next to the target.
     */
    overlay: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].element.isRequired]),
    /**
     * A Popper.js config object passed to the the underlying popper instance.
     */
    popperConfig: PropTypes__default["default"].object,
    // Overridden props from `<Overlay>`.
    /**
     * @private
     */
    target: PropTypes__default["default"].oneOf([null]),
    /**
     * @private
     */
    onHide: PropTypes__default["default"].oneOf([null]),
    /**
     * The placement of the Overlay in relation to it's `target`.
     */
    placement: PropTypes__default["default"].oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]),
};
const defaultProps$9 = {
    defaultShow: false,
    trigger: ['hover', 'focus'],
};
function OverlayTrigger({ trigger, overlay, children, popperConfig = {}, show: propsShow, defaultShow = false, onToggle, delay: propsDelay, placement, flip = placement && placement.indexOf('auto') !== -1, ...props }) {
    const triggerNodeRef = React.useRef(null);
    const mergedRef = useMergedRefs__default["default"](triggerNodeRef, children.ref);
    const timeout = useTimeout__default["default"]();
    const hoverStateRef = React.useRef('');
    const [show, setShow] = uncontrollable.useUncontrolledProp(propsShow, defaultShow, onToggle);
    const delay = normalizeDelay(propsDelay);
    const { onFocus, onBlur, onClick } = typeof children !== 'function'
        ? React__namespace.Children.only(children).props
        : {};
    const attachRef = (r) => {
        mergedRef(safeFindDOMNode(r));
    };
    const handleShow = React.useCallback(() => {
        timeout.clear();
        hoverStateRef.current = 'show';
        if (!delay.show) {
            setShow(true);
            return;
        }
        timeout.set(() => {
            if (hoverStateRef.current === 'show')
                setShow(true);
        }, delay.show);
    }, [delay.show, setShow, timeout]);
    const handleHide = React.useCallback(() => {
        timeout.clear();
        hoverStateRef.current = 'hide';
        if (!delay.hide) {
            setShow(false);
            return;
        }
        timeout.set(() => {
            if (hoverStateRef.current === 'hide')
                setShow(false);
        }, delay.hide);
    }, [delay.hide, setShow, timeout]);
    const handleFocus = React.useCallback((...args) => {
        handleShow();
        onFocus?.(...args);
    }, [handleShow, onFocus]);
    const handleBlur = React.useCallback((...args) => {
        handleHide();
        onBlur?.(...args);
    }, [handleHide, onBlur]);
    const handleClick = React.useCallback((...args) => {
        setShow(!show);
        onClick?.(...args);
    }, [onClick, setShow, show]);
    const handleMouseOver = React.useCallback((...args) => {
        handleMouseOverOut(handleShow, args, 'fromElement');
    }, [handleShow]);
    const handleMouseOut = React.useCallback((...args) => {
        handleMouseOverOut(handleHide, args, 'toElement');
    }, [handleHide]);
    const triggers = trigger == null ? [] : [].concat(trigger);
    const triggerProps = {
        ref: attachRef,
    };
    if (triggers.indexOf('click') !== -1) {
        triggerProps.onClick = handleClick;
    }
    if (triggers.indexOf('focus') !== -1) {
        triggerProps.onFocus = handleFocus;
        triggerProps.onBlur = handleBlur;
    }
    if (triggers.indexOf('hover') !== -1) {
        warning__default["default"](triggers.length > 1, '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.');
        triggerProps.onMouseOver = handleMouseOver;
        triggerProps.onMouseOut = handleMouseOut;
    }
    return (React__namespace.createElement(React__namespace.Fragment, null,
        typeof children === 'function'
            ? children(triggerProps)
            : React.cloneElement(children, triggerProps),
        React__namespace.createElement(Overlay, { ...props, show: show, onHide: handleHide, flip: flip, placement: placement, popperConfig: popperConfig, target: triggerNodeRef.current }, overlay)));
}
OverlayTrigger.defaultProps = defaultProps$9;
OverlayTrigger.propTypes = propTypes$o;

/* eslint-disable react/no-multi-comp */
const propTypes$n = {
    /** Disables the PageItem */
    disabled: PropTypes__default["default"].bool,
    /** Styles PageItem as active, and renders a `<span>` instead of an `<a>`. */
    active: PropTypes__default["default"].bool,
    /** A callback function for when this component is clicked */
    onClick: PropTypes__default["default"].func,
    /** An accessible label indicating the active state.. */
    activeLabel: PropTypes__default["default"].string,
};
const defaultProps$8 = {
    active: false,
    disabled: false,
    activeLabel: '(current)',
};
const PageItem = React__namespace.forwardRef(({ active, disabled, className, style, children, activeLabel, ...props }, ref) => {
    const Component = active || disabled ? 'span' : Anchor__default["default"];
    return (React__namespace.createElement("li", { ref: ref, style: style, className: classNames__default["default"](className, 'page-item', { active, disabled }) },
        React__namespace.createElement(Component, { className: "page-link", disabled: disabled, ...props },
            children,
            active && activeLabel && (React__namespace.createElement("span", { className: "visually-hidden" }, activeLabel)))));
});
PageItem.propTypes = propTypes$n;
PageItem.defaultProps = defaultProps$8;
PageItem.displayName = 'PageItem';
function createButton(name, defaultValue, label = name) {
    const Button = React__namespace.forwardRef(({ children, ...props }, ref) => (React__namespace.createElement(PageItem, { ...props, ref: ref },
        React__namespace.createElement("span", { "aria-hidden": "true" }, children || defaultValue),
        React__namespace.createElement("span", { className: "visually-hidden" }, label))));
    Button.displayName = name;
    return Button;
}
const First = createButton('First', '«');
const Prev = createButton('Previous', '‹');
const Ellipsis = createButton('Ellipsis', '…');
const Next = createButton('Next', '›');
const Last = createButton('Last', '»');

const propTypes$m = {
    /**
     * @default 'pagination'
     * */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Set's the size of all PageItems.
     *
     * @type {('sm' | 'md' | lg')}
     */
    size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),
};
/**
 * @property {PageItem} Item
 * @property {PageItem} First
 * @property {PageItem} Prev
 * @property {PageItem} Ellipsis
 * @property {PageItem} Next
 * @property {PageItem} Last
 */
const PaginationBase = React__namespace.forwardRef(({ bsPrefix, className, size, ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'pagination');
    return (React__namespace.createElement(SGDSWrapper, { as: 'nav', "aria-label": 'Page Navigation' },
        React__namespace.createElement("ul", { ref: ref, ...props, className: classNames__default["default"](className, decoratedBsPrefix, size && `${decoratedBsPrefix}-${size}`) })));
});
PaginationBase.propTypes = propTypes$m;
PaginationBase.displayName = 'PaginationBase';
var PaginationBase$1 = Object.assign(PaginationBase, {
    First,
    Prev,
    Ellipsis,
    Item: PageItem,
    Next,
    Last,
});

const Pagination = ({ dataLength = 0, currentPage = 1, itemsPerPage = 5, limit = 3, setCurrentPage, directionVariant = 'icon-text', size = 'sm', ellipsisOn = false, ellipsisJump = 3, }) => {
    // set the id of page item clicked to currentPage
    const handlePageClick = (event) => {
        const liTarget = event.target;
        setCurrentPage(Number(liTarget.id));
    };
    const pages = [];
    for (let i = 1; i <= Math.ceil(dataLength / itemsPerPage); i++) {
        pages.push(i);
    }
    const sanitizeLimit = limit >= pages.length ? pages.length : limit;
    const renderPgNumbers = () => {
        const pagesToShow = [];
        let sanitizeStartPage = 1;
        let endPage;
        if (limit < pages.length)
            sanitizeStartPage = currentPage - Math.floor(sanitizeLimit / 2);
        if (pages.length - sanitizeStartPage < limit)
            sanitizeStartPage = pages.length + 1 - limit;
        if (sanitizeStartPage <= 0)
            sanitizeStartPage = 1;
        endPage = sanitizeStartPage + sanitizeLimit - 1;
        if (endPage > pages.length)
            endPage = pages.length;
        if (currentPage === pages.length)
            sanitizeStartPage = pages.length - sanitizeLimit + 1;
        for (let i = sanitizeStartPage; i <= endPage; i++) {
            pagesToShow.push(i);
        }
        return pagesToShow.map((number) => (React__namespace.createElement(PaginationBase$1.Item, { key: number, id: number.toString(), onClick: handlePageClick, className: currentPage == number ? 'active' : undefined }, number)));
    };
    const handleNextButton = () => {
        setCurrentPage(currentPage + 1);
    };
    const handlePrevButton = () => {
        setCurrentPage(currentPage - 1);
    };
    // handleclick for ellipsisOn
    const handleNextEllipsisButton = () => {
        setCurrentPage(currentPage + ellipsisJump);
        if (currentPage + ellipsisJump > pages.length)
            setCurrentPage(pages.length);
    };
    const handlePrevEllipsisButton = () => {
        setCurrentPage(currentPage - ellipsisJump);
        if (currentPage - ellipsisJump < 1)
            setCurrentPage(1);
    };
    const renderLastEllipsis = () => {
        const isEvenLimit = sanitizeLimit % 2 === 0;
        const differentialLimitCondition = isEvenLimit
            ? currentPage + Math.floor(sanitizeLimit / 2) <= pages.length
            : currentPage + Math.floor(sanitizeLimit / 2) < pages.length;
        if (pages.length !== sanitizeLimit && differentialLimitCondition)
            return (React__namespace.createElement(PaginationBase$1.Ellipsis, { onClick: handleNextEllipsisButton, disabled: !ellipsisOn }));
        else
            return null;
    };
    const renderFirstEllipsis = () => {
        if (pages.length !== sanitizeLimit &&
            currentPage - Math.floor(sanitizeLimit / 2) > 1)
            return React__namespace.createElement(PaginationBase$1.Ellipsis, { onClick: handlePrevEllipsisButton });
        else
            return null;
    };
    const directionBtnContent = (directionLabel, iconClass) => {
        return (React__namespace.createElement(React__namespace.Fragment, null,
            directionVariant !== 'icon' &&
                directionLabel === 'Next' &&
                directionLabel,
            directionVariant === 'text' ? null : React__namespace.createElement("i", { className: iconClass }),
            directionVariant !== 'icon' &&
                directionLabel === 'Previous' &&
                directionLabel));
    };
    return (React__namespace.createElement(PaginationBase$1, { size: size },
        React__namespace.createElement(PaginationBase$1.Prev, { onClick: handlePrevButton, disabled: currentPage <= 1 }, directionBtnContent('Previous', 'bi bi-chevron-left')),
        ellipsisOn ? renderFirstEllipsis() : null,
        renderPgNumbers(),
        renderLastEllipsis(),
        React__namespace.createElement(PaginationBase$1.Next, { onClick: handleNextButton, disabled: currentPage >= pages.length }, directionBtnContent('Next', 'bi bi-chevron-right'))));
};
Pagination.displayName = 'Pagination';

/**
 * Iterates through children that are typically specified as `props.children`,
 * but only maps over children that are "valid elements".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 */
function map(children, func) {
    let index = 0;
    return React__namespace.Children.map(children, (child) => React__namespace.isValidElement(child) ? func(child, index++) : child);
}
/**
 * Iterates through children that are "valid elements".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 */
function forEach(children, func) {
    let index = 0;
    React__namespace.Children.forEach(children, (child) => {
        if (React__namespace.isValidElement(child))
            func(child, index++);
    });
}

const ROUND_PRECISION = 1000;
/**
 * Validate that children, if any, are instances of `<ProgressBar>`.
 */
function onlyProgressBar(props, propName, componentName) {
    const children = props[propName];
    if (!children) {
        return null;
    }
    let error = null;
    React__namespace.Children.forEach(children, (child) => {
        if (error) {
            return;
        }
        /**
         * Compare types in a way that works with libraries that patch and proxy
         * components like react-hot-loader.
         *
         * see https://github.com/gaearon/react-hot-loader#checking-element-types
         */
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        const element = React__namespace.createElement(ProgressBar, null);
        if (child.type === element.type)
            return;
        const childType = child.type;
        const childIdentifier = React__namespace.isValidElement(child)
            ? childType.displayName || childType.name || childType
            : child;
        error = new Error(`Children of ${componentName} can contain only ProgressBar ` +
            `components. Found ${childIdentifier}.`);
    });
    return error;
}
const propTypes$l = {
    /**
     * Minimum value progress can begin from
     */
    min: PropTypes__default["default"].number,
    /**
     * Current value of progress
     */
    now: PropTypes__default["default"].number,
    /**
     * Maximum value progress can reach
     */
    max: PropTypes__default["default"].number,
    /**
     * Show label that represents visual percentage.
     * EG. 60%
     */
    label: PropTypes__default["default"].node,
    /**
     * Forwards to aria-label attribute on element with role="progressbar"
     *
     */
    ariaLabel: PropTypes__default["default"].string,
    /**
     * Hide's the label visually.
     */
    visuallyHidden: PropTypes__default["default"].bool,
    /**
     * Uses a gradient to create a striped effect.
     */
    striped: PropTypes__default["default"].bool,
    /**
     * Animate's the stripes from right to left
     */
    animated: PropTypes__default["default"].bool,
    /**
     * @private
     * @default 'progress-bar'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Sets the background class of the progress bar.
     *
     * @type ('success'|'danger'|'warning'|'info')
     */
    variant: PropTypes__default["default"].string,
    /**
     * Child elements (only allows elements of type <ProgressBar />)
     */
    children: onlyProgressBar,
    /**
     * @private
     */
    isChild: PropTypes__default["default"].bool,
};
const defaultProps$7 = {
    min: 0,
    max: 100,
    animated: false,
    isChild: false,
    visuallyHidden: false,
    striped: false,
    ariaLabel: 'progressbar',
};
function getPercentage(now, min, max) {
    const percentage = ((now - min) / (max - min)) * 100;
    return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar({ min, now, max, label, visuallyHidden, striped, animated, className, style, variant, bsPrefix, ariaLabel = 'progressbar', ...props }, ref) {
    return (React__namespace.createElement("div", { ref: ref, ...props, role: "progressbar", className: classNames__default["default"](className, `${bsPrefix}-bar`, {
            [`bg-${variant}`]: variant,
            [`${bsPrefix}-bar-animated`]: animated,
            [`${bsPrefix}-bar-striped`]: animated || striped,
        }), style: { width: `${getPercentage(now, min, max)}%`, ...style }, "aria-valuenow": now, "aria-valuemin": min, "aria-valuemax": max, "aria-label": ariaLabel }, visuallyHidden ? (React__namespace.createElement("span", { className: "visually-hidden" }, label)) : (label)));
}
renderProgressBar.propTypes = propTypes$l;
const ProgressBar = React__namespace.forwardRef(({ isChild, ...props }, ref) => {
    props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');
    if (isChild) {
        return renderProgressBar(props, ref);
    }
    const { min, now, max, label, visuallyHidden, striped, animated, bsPrefix, variant, className, children, ariaLabel, ...wrapperProps } = props;
    return (React__namespace.createElement(SGDSWrapper, { ref: ref, ...wrapperProps, className: classNames__default["default"](className, bsPrefix) }, children
        ? map(children, (child) => React.cloneElement(child, { isChild: true }))
        : renderProgressBar({
            min,
            now,
            max,
            label,
            visuallyHidden,
            striped,
            animated,
            bsPrefix,
            variant,
            ariaLabel,
        }, ref)));
});
ProgressBar.displayName = 'ProgressBar';
ProgressBar.propTypes = propTypes$l;
ProgressBar.defaultProps = defaultProps$7;

const defaultProps$6 = {
    size: 'sm',
    step: 1,
};
const propTypes$k = {
    step: PropTypes__default["default"].number,
    size: PropTypes__default["default"].oneOf(['sm', 'lg']),
    count: PropTypes__default["default"].number.isRequired,
    setCount: PropTypes__default["default"].func.isRequired,
    disabled: PropTypes__default["default"].bool,
    variant: PropTypes__default["default"].oneOf([
        'primary',
        'secondary',
        'success',
        'danger',
        'warning',
        'info',
        'dark',
        'light',
        'link',
        'outline-primary',
        'outline-secondary',
        'outline-success',
        'outline-danger',
        'outline-warning',
        'outline-info',
        'outline-dark',
        'outline-light',
    ]),
};
const QuantityToggle = React__namespace.forwardRef(({ size, step = 1, disabled, variant, count, setCount, ...props }, ref) => {
    const buttonProps = { disabled, variant };
    const onPlus = () => {
        setCount(count + step);
    };
    const onMinus = () => {
        if (count < 1)
            setCount(0);
        else
            setCount(count - step);
    };
    React__namespace.useEffect(() => {
        if (count < 0)
            setCount(0);
    }, []);
    return (React__namespace.createElement(React__namespace.Fragment, null,
        React__namespace.createElement(FormLabel, { className: "visually-hidden" }, "quantity-toggle"),
        React__namespace.createElement(InputGroup$1, { size: size, variant: "quantity-toggle" },
            React__namespace.createElement(Button, { onClick: onMinus, ...buttonProps, "aria-label": `decrease by ${step}` },
                React__namespace.createElement("i", { className: "bi bi-dash" })),
            React__namespace.createElement(FormControl$1, { ...props, disabled: disabled, ref: ref, type: "number", className: "text-center", value: count, name: "quantity", onChange: (e) => {
                    setCount(parseInt(e.target.value));
                }, min: 0 }),
            React__namespace.createElement("div", { id: "quantitytoggle-announcer", role: "region", "aria-live": "assertive", className: "visually-hidden" }, count),
            React__namespace.createElement(Button, { onClick: onPlus, ...buttonProps, "aria-label": `increase by ${step}` },
                React__namespace.createElement("i", { className: "bi bi-plus" })))));
});
QuantityToggle.displayName = 'QuantityToggle';
QuantityToggle.defaultProps = defaultProps$6;
QuantityToggle.propTypes = propTypes$k;

const DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const rowColWidth = PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]);
const rowColumns = PropTypes__default["default"].oneOfType([
    rowColWidth,
    PropTypes__default["default"].shape({
        cols: rowColWidth,
    }),
]);
const propTypes$j = {
    /**
     * @default 'row'
     */
    bsPrefix: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    /**
     * The number of columns that will fit next to each other on extra small devices (<576px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xs: rowColumns,
    /**
     * The number of columns that will fit next to each other on small devices (≥576px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    sm: rowColumns,
    /**
     * The number of columns that will fit next to each other on medium devices (≥768px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    md: rowColumns,
    /**
     * The number of columns that will fit next to each other on large devices (≥992px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    lg: rowColumns,
    /**
     * The number of columns that will fit next to each other on extra large devices (≥1200px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xl: rowColumns,
    /**
     * The number of columns that will fit next to each other on extra extra large devices (≥1400px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xxl: rowColumns,
};
const Row = React__namespace.forwardRef(({ bsPrefix, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    DEVICE_SIZES.forEach((brkPoint) => {
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let cols;
        if (propValue != null && typeof propValue === 'object') {
            ({ cols } = propValue);
        }
        else {
            cols = propValue;
        }
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (cols != null)
            classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, decoratedBsPrefix, ...classes) }));
});
Row.displayName = 'Row';
Row.propTypes = propTypes$j;

function isSideNavItemSelected(activeEventKey, eventKey) {
    return Array.isArray(activeEventKey)
        ? activeEventKey.includes(eventKey)
        : activeEventKey === eventKey;
}
const context$1 = React__namespace.createContext({});
context$1.displayName = 'SideNavContext';

const context = React__namespace.createContext({
    eventKey: '',
});
context.displayName = 'SideNavItemContext';

const propTypes$i = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'sidenav-button' */
    bsPrefix: PropTypes__default["default"].string,
    /** A callback function for when this component is clicked */
    onClick: PropTypes__default["default"].func,
    /** Providing a `href` will render an `<a>` element, _styled_ as a button. */
    href: PropTypes__default["default"].string,
};
function useSideNavButton(eventKey, onClick) {
    const { activeEventKey, onSelect, alwaysOpen } = React.useContext(context$1);
    return (e) => {
        /*
          Compare the event key in context with the given event key.
          If they are the same, then collapse the component.
        */
        let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
        if (alwaysOpen) {
            if (Array.isArray(activeEventKey)) {
                if (activeEventKey.includes(eventKey)) {
                    eventKeyPassed = activeEventKey.filter((k) => k !== eventKey);
                }
                else {
                    eventKeyPassed = [...activeEventKey, eventKey];
                }
            }
            else {
                // activeEventKey is undefined.
                eventKeyPassed = [eventKey];
            }
        }
        onSelect?.(eventKeyPassed, e);
        onClick?.(e);
    };
}
const setCollapseCSS = (activeEventKey, eventKey) => {
    if (Array.isArray(activeEventKey)) {
        return !activeEventKey.includes(eventKey) && 'collapsed';
    }
    if (typeof activeEventKey === 'string') {
        return activeEventKey !== eventKey && 'collapsed';
    }
    return 'collapsed';
};
const SideNavButton = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = Button, bsPrefix, className, onClick, children, ...props }, ref) => {
    const btnRef = React__namespace.useRef(null);
    const mergedRef = useMergedRefs__default["default"](ref, btnRef);
    const { eventKey } = React.useContext(context);
    const sideNavOnClick = useSideNavButton(eventKey, onClick);
    const { activeEventKey } = React.useContext(context$1);
    if (Component === 'button') {
        props.type = 'button';
    }
    return (React__namespace.createElement(Component, { ref: mergedRef, variant: '', onClick: sideNavOnClick, ...props, "aria-expanded": eventKey === activeEventKey, "aria-haspopup": "menu", className: classNames__default["default"](className, setCollapseCSS(activeEventKey, eventKey)) },
        children,
        !props.href && React__namespace.createElement("i", { className: "bi bi-chevron-down" })));
});
SideNavButton.propTypes = propTypes$i;
SideNavButton.displayName = 'SideNavButton';

const propTypes$h = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** Children prop should only contain a single child, and is enforced as such */
    children: PropTypes__default["default"].node,
};
const SideNavCollapse = React__namespace.forwardRef(({ as: Component = 'div', bsPrefix, className, children, ...props }, ref) => {
    const { activeEventKey } = React.useContext(context$1);
    const { eventKey: itemEventKey } = React.useContext(context);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'sidenav-collapse');
    return (React__namespace.createElement(Collapse, { ref: ref, in: isSideNavItemSelected(activeEventKey, itemEventKey), ...props, className: classNames__default["default"](className, bsPrefix) },
        React__namespace.createElement(Component, null,
            React__namespace.createElement("ul", { className: "list-unstyled" }, React__namespace.Children.map(children, child => (React__namespace.createElement("li", null, React__namespace.cloneElement(child))))))));
});
SideNavCollapse.propTypes = propTypes$h;
SideNavCollapse.displayName = 'SideNavCollapse';

const propTypes$g = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'accordion-item' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * A unique key used to control this item's collapse/expand.
     * @required
     */
    eventKey: PropTypes__default["default"].string.isRequired,
};
const SideNavItem = React__namespace.forwardRef(({ 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'li', bsPrefix, className, eventKey, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'sidenav-item');
    const contextValue = React.useMemo(() => ({
        eventKey,
    }), [eventKey]);
    return (React__namespace.createElement(context.Provider, { value: contextValue },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, bsPrefix) })));
});
SideNavItem.propTypes = propTypes$g;
SideNavItem.displayName = 'SideNavItem';

const propTypes$f = {
    eventKey: PropTypes__default["default"].string.isRequired
};
const SideNavLink = React__namespace.forwardRef(({ eventKey, ...props }, ref) => {
    const { activeLinkKey } = React__namespace.useContext(context$1);
    return (React__namespace.createElement(NavLink, { ...props, ref: ref, eventKey: eventKey, active: activeLinkKey === eventKey }));
});
SideNavLink.displayName = 'SideNavLink';
SideNavLink.propTypes = propTypes$f;

const propTypes$e = {
    /** Set a custom element for this component */
    as: PropTypes__default["default"].elementType,
    /** @default 'sidenav' */
    bsPrefix: PropTypes__default["default"].string,
    /** The current active key that corresponds to the currently expanded card */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** The default active key that is expanded on start */
    defaultActiveKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].array]),
    /** Allow accordion items to stay open when another item is opened */
    alwaysOpen: PropTypes__default["default"].bool,
    /** The current active NavLink that corresponds to the currently expanded card */
    activeNavLinkKey: PropTypes__default["default"].string,
};
const SideNav = React__namespace.forwardRef((props, ref) => {
    const { 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'ul', activeKey, bsPrefix, className, onSelect, alwaysOpen, activeNavLinkKey = '', ...controlledProps } = uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect',
    });
    const prefix = useBootstrapPrefix(bsPrefix, 'sidenav');
    const contextValue = React.useMemo(() => ({
        activeEventKey: activeKey,
        onSelect,
        alwaysOpen,
        activeLinkKey: activeNavLinkKey,
    }), [activeKey, onSelect, alwaysOpen, activeNavLinkKey]);
    return (React__namespace.createElement(context$1.Provider, { value: contextValue },
        React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...controlledProps, className: classNames__default["default"](className, prefix, 'list-unstyled') })));
});
SideNav.displayName = 'SideNav';
SideNav.propTypes = propTypes$e;
var SideNav$1 = Object.assign(SideNav, {
    Button: SideNavButton,
    Collapse: SideNavCollapse,
    Item: SideNavItem,
    Link: SideNavLink,
});

const propTypes$d = {
    /**
     * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
     * @type {string}
     * @required
     */
    id: PropTypes__default["default"].string,
    /**
     * Accessible label for the toggle; the value of `title` if not specified.
     */
    toggleLabel: PropTypes__default["default"].string,
    /** An `href` passed to the non-toggle Button */
    href: PropTypes__default["default"].string,
    /** An anchor `target` passed to the non-toggle Button */
    target: PropTypes__default["default"].string,
    /** An `onClick` handler passed to the non-toggle Button */
    onClick: PropTypes__default["default"].func,
    /** The content of the non-toggle Button.  */
    title: PropTypes__default["default"].node.isRequired,
    /** A `type` passed to the non-toggle Button */
    type: PropTypes__default["default"].string,
    /** Disables both Buttons  */
    disabled: PropTypes__default["default"].bool,
    /**
     * Aligns the dropdown menu.
     *
     * _see [DropdownMenu](#dropdown-menu-props) for more details_
     *
     * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
     */
    align: alignPropType,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */
    menuRole: PropTypes__default["default"].string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */
    renderMenuOnMount: PropTypes__default["default"].bool,
    /**
     *  Which event when fired outside the component will cause it to be closed.
     *
     * _see [DropdownMenu](#dropdown-menu-props) for more details_
     */
    rootCloseEvent: PropTypes__default["default"].string,
    /** @ignore */
    bsPrefix: PropTypes__default["default"].string,
    /** @ignore */
    variant: PropTypes__default["default"].string,
    /** @ignore */
    size: PropTypes__default["default"].string,
};
const defaultProps$5 = {
    toggleLabel: 'Toggle dropdown',
    type: 'button',
};
/**
 * A convenience component for simple or general use split button dropdowns. Renders a
 * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`
 * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s
 * props](#dropdown-props).
 *
 * _All unknown props are passed through to the `Dropdown` component._
 * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,
 * and menu-related props are passed to the `Dropdown.Menu`
 */
const SplitButton = React__namespace.forwardRef(({ id, bsPrefix, size, variant, title, type, toggleLabel, children, onClick, href, target, menuRole, renderMenuOnMount, rootCloseEvent, ...props }, ref) => (React__namespace.createElement(Dropdown$1, { ref: ref, ...props, as: ButtonGroup },
    React__namespace.createElement(Button, { size: size, variant: variant, disabled: props.disabled, bsPrefix: bsPrefix, href: href, target: target, onClick: onClick, type: type }, title),
    React__namespace.createElement(Dropdown$1.Toggle, { split: true, id: id, size: size, variant: variant, disabled: props.disabled, childBsPrefix: bsPrefix },
        React__namespace.createElement("span", { className: "visually-hidden" }, toggleLabel),
        React__namespace.createElement("i", { className: "bi bi-chevron-down" })),
    React__namespace.createElement(Dropdown$1.Menu, { role: menuRole, renderOnMount: renderMenuOnMount, rootCloseEvent: rootCloseEvent }, children))));
SplitButton.propTypes = propTypes$d;
SplitButton.defaultProps = defaultProps$5;
SplitButton.displayName = 'SplitButton';

class WrappedStepMetadata {
    stepMetadata;
    index;
    constructor(stepMetadata, index) {
        this.stepMetadata = stepMetadata;
        this.index = index;
    }
    get component() {
        return this.stepMetadata.component;
    }
    get title() {
        return this.stepMetadata.title;
    }
    get step() {
        return this.index + 1;
    }
    get stepHeader() {
        return this.stepMetadata.stepHeader;
    }
    async onNextStep(onDone) {
        if (this.stepMetadata.onNextStep) {
            await this.stepMetadata.onNextStep(onDone);
        }
        else {
            await onDone();
        }
    }
    async onPreviousStep(onDone) {
        if (this.stepMetadata.onPreviousStep) {
            await this.stepMetadata.onPreviousStep(onDone);
        }
        else {
            await onDone();
        }
    }
    async onArrived() {
        if (this.stepMetadata.onArrived) {
            await this.stepMetadata.onArrived();
        }
    }
}
class WrappedStepsMetadata {
    wrappedStepMetadataArr;
    constructor(wrappedStepMetadataArr) {
        this.wrappedStepMetadataArr = wrappedStepMetadataArr;
    }
    get length() {
        return this.wrappedStepMetadataArr.length;
    }
    findByStep(step) {
        return this.wrappedStepMetadataArr.find((wrappedStepMetadata) => wrappedStepMetadata.step === step);
    }
    isFirstStep(step) {
        return step === 1;
    }
    isLastStep(step) {
        return step === this.length;
    }
    isWithinStepRange(step) {
        return step >= 1 && step <= this.length + 1;
    }
    get data() {
        return this.wrappedStepMetadataArr;
    }
}
function useStep(stepsMetadata) {
    const wrappedStepsMetadata = new WrappedStepsMetadata(stepsMetadata.map((stepMetadata, index) => new WrappedStepMetadata(stepMetadata, index)));
    const getStateMethod = () => {
        return React.useState({
            currentStep: 1,
        });
    };
    const [state, setState] = getStateMethod();
    React.useEffect(() => {
        runOnArrived();
    }, [state.currentStep]);
    const runOnArrived = async () => {
        const stepData = wrappedStepsMetadata.findByStep(state.currentStep);
        if (stepData) {
            await stepData.onArrived();
        }
    };
    const setStep = async (newStep) => {
        if (newStep === state.currentStep) {
            return;
        }
        const stepData = wrappedStepsMetadata.findByStep(state.currentStep);
        if (!stepData) {
            return;
        }
        if (!wrappedStepsMetadata.isWithinStepRange(newStep)) {
            return;
        }
        const onDoneMethod = async () => {
            setState({
                ...state,
                currentStep: newStep,
            });
        };
        if (newStep > state.currentStep) {
            await stepData.onNextStep(onDoneMethod);
        }
        if (newStep < state.currentStep) {
            await stepData.onPreviousStep(onDoneMethod);
        }
    };
    const nextStep = async () => {
        await setStep(state.currentStep + 1);
    };
    const prevStep = async () => {
        await setStep(state.currentStep - 1);
    };
    const getTitle = () => {
        const stepData = wrappedStepsMetadata.findByStep(state.currentStep);
        if (stepData) {
            return stepData.title;
        }
        return '';
    };
    const getComponent = () => {
        const stepData = wrappedStepsMetadata.findByStep(state.currentStep);
        if (stepData) {
            return stepData.component;
        }
    };
    const getNextButtonTitle = () => {
        if (wrappedStepsMetadata.isLastStep(state.currentStep)) {
            return 'Submit';
        }
        else {
            return 'Next';
        }
    };
    const getBackButtonTitle = () => {
        if (wrappedStepsMetadata.isFirstStep(state.currentStep)) {
            return null;
        }
        else {
            return 'Back';
        }
    };
    const reset = async () => {
        if (state.currentStep !== 1) {
            setState({
                ...state,
                currentStep: 1,
            });
        }
        else {
            await runOnArrived();
        }
    };
    return {
        state,
        stepsMetadata: wrappedStepsMetadata,
        nextStep,
        prevStep,
        setStep,
        getTitle,
        getComponent,
        getNextButtonTitle,
        getBackButtonTitle,
        reset,
    };
}

const propTypes$c = {
    methods: PropTypes__default["default"].shape({
        state: PropTypes__default["default"].shape({ currentStep: PropTypes__default["default"].number }),
        stepsMetadata: PropTypes__default["default"].instanceOf(WrappedStepsMetadata),
        nextStep: PropTypes__default["default"].func,
        prevStep: PropTypes__default["default"].func,
        setStep: PropTypes__default["default"].func,
        getTitle: PropTypes__default["default"].func,
        getComponent: PropTypes__default["default"].func,
        getNextButtonTitle: PropTypes__default["default"].func,
        getBackButtonTitle: PropTypes__default["default"].func,
        reset: PropTypes__default["default"].func,
    }).isRequired,
};
const Stepper = ({ methods }) => {
    const [stepperEl, stepperRef] = hooks.useCallbackRef();
    const { state, stepsMetadata, setStep } = methods;
    React.useEffect(() => {
        if (!stepperEl)
            return;
        stepperEl.querySelectorAll('.stepper-item').forEach(stepperItem => {
            stepperItem.addEventListener('keydown', e => {
                const keyDown = e.key;
                if (keyDown === 'Enter') {
                    e.preventDefault();
                    stepperItem.click();
                }
            });
        });
    }, [stepperEl]);
    const getClass = (stepMetadata) => {
        if (stepMetadata.step < state.currentStep) {
            return 'is-completed is-clickable';
        }
        if (stepMetadata.step === state.currentStep) {
            return 'is-active';
        }
        return '';
    };
    const back = (stepMetadata) => {
        return () => {
            if (stepMetadata.step < state.currentStep) {
                return setStep(stepMetadata.step);
            }
            return;
        };
    };
    return (React__default["default"].createElement(SGDSWrapper, { ref: stepperRef, className: "stepper" }, stepsMetadata.data.map((stepMetadata) => (React__default["default"].createElement("div", { "data-testid": "sgds-step", className: `stepper-item ${getClass(stepMetadata)}`, onClick: back(stepMetadata), key: stepMetadata.step, tabIndex: 0, "aria-current": stepMetadata.step === state.currentStep ? "step" : "false", "aria-disabled": stepMetadata.step >= state.currentStep },
        React__default["default"].createElement("div", { className: "stepper-marker" }, stepMetadata.step),
        React__default["default"].createElement("div", { className: "stepper-detail" },
            React__default["default"].createElement("p", null,
                React__default["default"].createElement("b", null, stepMetadata.stepHeader))))))));
};
Stepper.displayName = 'Stepper';
Stepper.propTypes = propTypes$c;

const TableRow = React__namespace.forwardRef(({ as: Component = 'tr', ...props }, ref) => {
    return (React__namespace.createElement(Component, { ...props, ref: ref }));
});
TableRow.displayName = 'TableRow';

const TableHeader = React__namespace.forwardRef(({ as: Component = 'thead', ...props }, ref) => {
    return (React__namespace.createElement(Component, { ...props, ref: ref }));
});
TableHeader.displayName = 'TableHeader';

const TableHeaderCell = React__namespace.forwardRef(({ as: Component = 'th', ...props }, ref) => {
    return (React__namespace.createElement(Component, { ...props, ref: ref }));
});
TableHeaderCell.displayName = 'TableHeaderCell';

const propTypes$b = {
    /**
     * Handles the click event on the sort label. User is expected to pass in the sort
     * handler function that will sort the respective table column.
     *
     * @param e The click event.
     */
    onClick: PropTypes__default["default"].func,
    /**
     * Whether sorting is currently active on the column.
     */
    active: PropTypes__default["default"].bool,
    /**
     * Whether the column is currently sorted by ascending ('asc') or descending ('desc') order.
     */
    direction: PropTypes__default["default"].oneOf(['asc', 'desc']),
    as: PropTypes__default["default"].elementType,
    bsPrefix: PropTypes__default["default"].string,
};
const TableSortLabel = React__namespace.forwardRef(({ onClick, direction = 'asc', active = false, as: Component = 'span', ...props }, ref) => {
    const getIcon = () => {
        if (!active) {
            return React__namespace.createElement("i", { className: "bi bi-arrow-down-up ms-2 align-self-center" });
        }
        return direction === 'asc' ? (React__namespace.createElement("i", { className: "bi bi-sort-up-alt ms-2 align-self-center" })) : (React__namespace.createElement("i", { className: "bi bi-sort-down ms-2 align-self-center" }));
    };
    return (React__namespace.createElement(Component, { ...props, ref: ref, role: "button", tabIndex: "0", onClick: onClick },
        props.children,
        " ",
        getIcon()));
});
TableSortLabel.displayName = 'TableSortLabel';
TableSortLabel.propTypes = propTypes$b;

const TableBody = React__namespace.forwardRef(({ as: Component = 'tbody', ...props }, ref) => {
    return React__namespace.createElement(Component, { ...props, ref: ref });
});
TableBody.displayName = 'TableBody';

const TableDataCell = React__namespace.forwardRef(({ as: Component = 'td', ...props }, ref) => {
    return (React__namespace.createElement(Component, { ...props, ref: ref }));
});
TableDataCell.displayName = 'TableDataCell';

const propTypes$a = {
    /**
     * @default 'table'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
   * Adds zebra-striping to any table row within the `<tbody>`.
   */
    striped: PropTypes__default["default"].bool,
    /**
     * Adds borders on all sides of the table and cells.
     */
    bordered: PropTypes__default["default"].bool,
    /**
     * Removes all borders on the table and cells, including table header.
     */
    borderless: PropTypes__default["default"].bool,
    /**
     * Enable a hover state on table rows within a `<tbody>`.
     */
    hover: PropTypes__default["default"].bool,
    /**
     * Make tables more compact by cutting cell padding in half by setting
     * size as `sm`.
     */
    size: PropTypes__default["default"].string,
    /**
     * Invert the colors of the table — with light text on dark backgrounds
     * by setting variant as `dark`.
     */
    variant: PropTypes__default["default"].string,
    /**
     * Responsive tables allow tables to be scrolled horizontally with ease.
     * Across every breakpoint, use `responsive` for horizontally
     * scrolling tables. Responsive tables are wrapped automatically in a `div`.
     * Use `responsive="sm"`, `responsive="md"`, `responsive="lg"`, or
     * `responsive="xl"` as needed to create responsive tables up to
     * a particular breakpoint. From that breakpoint and up, the table will
     * behave normally and not scroll horizontally.
     */
    responsive: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].string]),
};
const Table = React__namespace.forwardRef(({ bsPrefix, className, striped, bordered, borderless, hover, size, variant, responsive, ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');
    const classes = classNames__default["default"](className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);
    const table = (React__namespace.createElement(SGDSWrapper, { as: "table", ...props, className: classes, ref: ref }));
    if (responsive) {
        let responsiveClass = `${decoratedBsPrefix}-responsive`;
        if (typeof responsive === 'string') {
            responsiveClass = `${responsiveClass}-${responsive}`;
        }
        return (React__namespace.createElement("div", { className: responsiveClass, tabIndex: 0 }, table));
    }
    return table;
});
Table.displayName = 'Table';
Table.propTypes = propTypes$a;
var Table$1 = Object.assign(Table, {
    Row: TableRow,
    Header: TableHeader,
    HeaderCell: TableHeaderCell,
    SortLabel: TableSortLabel,
    Body: TableBody,
    DataCell: TableDataCell,
});

const TabContent = createWithBsPrefix('sgds tab-content');

function getTabTransitionComponent(transition) {
    if (typeof transition === 'boolean') {
        return transition ? Fade : NoopTransition__default["default"];
    }
    return transition;
}

const propTypes$9 = {
    /**
     * @default 'tab-pane'
     */
    bsPrefix: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    /**
     * A key that associates the `TabPane` with it's controlling `NavLink`.
     */
    eventKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /**
     * Toggles the active state of the TabPane, this is generally controlled by a
     * TabContainer.
     */
    active: PropTypes__default["default"].bool,
    /**
     * Use animation when showing or hiding `<TabPane>`s. Defaults to `<Fade>`
     * animation, else use `false` to disable or a react-transition-group
     * `<Transition/>` component.
     */
    transition: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].elementType]),
    /**
     * Transition onEnter callback when animation is not `false`
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Transition onEntering callback when animation is not `false`
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Transition onEntered callback when animation is not `false`
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Transition onExit callback when animation is not `false`
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Transition onExiting callback when animation is not `false`
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Transition onExited callback when animation is not `false`
     */
    onExited: PropTypes__default["default"].func,
    /**
     * Wait until the first "enter" transition to mount the tab (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the tab (remove it from the DOM) when it is no longer visible
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /** @ignore * */
    id: PropTypes__default["default"].string,
    /** @ignore * */
    'aria-labelledby': PropTypes__default["default"].string,
};
const TabPane = React__namespace.forwardRef(({ bsPrefix, transition, ...props }, ref) => {
    const [{ className, 
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div', ...rest }, { isActive, onEnter, onEntering, onEntered, onExit, onExiting, onExited, mountOnEnter, unmountOnExit, transition: Transition = Fade, },] = TabPanel.useTabPanel({
        ...props,
        transition: getTabTransitionComponent(transition),
    });
    const { mdxType, originalType, contentLeft, contentRight, contentBottom, variant, ...attrs } = rest;
    const prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');
    // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't
    // conflict with the top level one.
    return (React__namespace.createElement(TabContext__default["default"].Provider, { value: null },
        React__namespace.createElement(SelectableContext__default["default"].Provider, { value: null },
            React__namespace.createElement(Transition, { in: isActive, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit },
                React__namespace.createElement(Component, { ...attrs, ref: ref, className: classNames__default["default"](className, prefix, isActive && 'active') })))));
});
TabPane.displayName = 'TabPane';
TabPane.propTypes = propTypes$9;

const propTypes$8 = {
    /**
     * Mark the Tab with a matching `eventKey` as active.
     *
     * @controllable onSelect
     */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /** The default active key that is selected on start */
    defaultActiveKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /**
     * Navigation style
     *
     * @type {('tabs-basic-toggle'| 'tabs-info-toggle')}
     */
    variant: PropTypes__default["default"].string,
    /**
     * Sets a default animation strategy for all children `<TabPane>`s.<tbcont
     *
     * Defaults to `<Fade>` animation, else use `false` to disable or a
     * react-transition-group `<Transition/>` component.
     *
     * @type {Transition | false}
     * @default {Fade}
     */
    transition: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].oneOf([false]),
        PropTypes__default["default"].elementType,
    ]),
    /**
     * HTML id attribute, required if no `generateChildId` prop
     * is specified.
     *
     * @type {string}
     */
    id: PropTypes__default["default"].string,
    /**
     * Callback fired when a Tab is selected.
     *
     * ```js
     * function (
     *   Any eventKey,
     *   SyntheticEvent event?
     * )
     * ```
     *
     * @controllable activeKey
     */
    onSelect: PropTypes__default["default"].func,
    /**
     * Wait until the first "enter" transition to mount tabs (add them to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount tabs (remove it from the DOM) when it is no longer visible
     */
    unmountOnExit: PropTypes__default["default"].bool,
};
const defaultProps$4 = {
    // variant: 'tabs',
    mountOnEnter: false,
    unmountOnExit: false,
};
function getDefaultActiveKey(children) {
    let defaultActiveKey;
    forEach(children, (child) => {
        if (defaultActiveKey == null) {
            defaultActiveKey = child.props.eventKey;
        }
    });
    return defaultActiveKey;
}
function renderTab(variant) {
    return (child) => {
        const { title, eventKey, disabled, tabClassName, tabAttrs, id, contentLeft, contentRight, contentBottom, } = child.props;
        if (title == null) {
            return null;
        }
        const tabsBasic = (React__namespace.createElement(React__namespace.Fragment, null,
            contentLeft,
            title,
            contentRight));
        const tabsInfo = (React__namespace.createElement(React__namespace.Fragment, null,
            React__namespace.createElement("div", { className: `tabs-info-label ${contentLeft ? 'has-icon' : ''}` },
                contentLeft,
                title),
            React__namespace.createElement("div", { className: "tabs-info-count" }, contentBottom)));
        return (React__namespace.createElement(NavItem, { as: "li", role: "presentation" },
            React__namespace.createElement(NavLink, { as: "button", type: "button", eventKey: eventKey, disabled: disabled, id: id, className: tabClassName, ...tabAttrs }, variant === 'tabs-info-toggle' ? tabsInfo : tabsBasic)));
    };
}
const Tabs = (props) => {
    const { id, variant, onSelect, transition, mountOnEnter, unmountOnExit, children, activeKey = getDefaultActiveKey(children), ...controlledProps } = uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect',
    });
    return (React__namespace.createElement(BaseTabs__default["default"], { id: id, activeKey: activeKey, onSelect: onSelect, transition: getTabTransitionComponent(transition), mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit },
        React__namespace.createElement(Nav$1, { ...controlledProps, role: "tablist", as: "ul", variant: props.variant }, map(children, renderTab(variant))),
        React__namespace.createElement(TabContent, null, map(children, (child) => {
            const childProps = { ...child.props };
            delete childProps.title;
            delete childProps.disabled;
            delete childProps.tabClassName;
            delete childProps.tabAttrs;
            return React__namespace.createElement(TabPane, { ...childProps });
        }))));
};
Tabs.propTypes = propTypes$8;
Tabs.defaultProps = defaultProps$4;
Tabs.displayName = 'Tabs';

const propTypes$7 = {
    /**
     * HTML id attribute, required if no `generateChildId` prop
     * is specified.
     *
     * @type {string}
     */
    id: PropTypes__default["default"].string,
    /**
     * Sets a default animation strategy for all children `<TabPane>`s.
     * Defaults to `<Fade>` animation; else, use `false` to disable, or a
     * custom react-transition-group `<Transition/>` component.
     *
     * @type {{Transition | false}}
     * @default {Fade}
     */
    transition: PropTypes__default["default"].oneOfType([
        PropTypes__default["default"].oneOf([false]),
        PropTypes__default["default"].elementType,
    ]),
    /**
     * Wait until the first "enter" transition to mount tabs (add them to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount tabs (remove it from the DOM) when they are no longer visible
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * A function that takes an `eventKey` and `type` and returns a unique id for
     * child tab `<NavItem>`s and `<TabPane>`s. The function _must_ be a pure
     * function, meaning it should always return the _same_ id for the same set
     * of inputs. The default value requires that an `id` to be set for the
     * `<TabContainer>`.
     *
     * The `type` argument will either be `"tab"` or `"pane"`.
     *
     * @defaultValue (eventKey, type) => `${props.id}-${type}-${eventKey}`
     */
    generateChildId: PropTypes__default["default"].func,
    /**
     * A callback fired when a tab is selected.
     *
     * @controllable activeKey
     */
    onSelect: PropTypes__default["default"].func,
    /**
     * The `eventKey` of the currently active tab.
     *
     * @controllable onSelect
     */
    activeKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
};
const TabContainer = ({ transition, ...props }) => (React__namespace.createElement(BaseTabs__default["default"], { ...props, transition: getTabTransitionComponent(transition) }));
TabContainer.propTypes = propTypes$7;
TabContainer.displayName = 'TabContainer';

/* eslint-disable react/no-unused-prop-types */
const propTypes$6 = {
    eventKey: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    /**
     * Content for the tab title.
     */
    title: PropTypes__default["default"].node.isRequired,
    /**
     * The disabled state of the tab.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * Class to pass to the underlying nav link.
     */
    tabClassName: PropTypes__default["default"].string,
    /**
     * Object containing attributes to pass to underlying nav link.
     */
    tabAttrs: PropTypes__default["default"].object,
    /**
    * Content to the left of title.
    */
    contentLeft: PropTypes__default["default"].node,
    /**
    * Content to the right of title. Not applicable to tabs-info-toggle variant.
    */
    contentRight: PropTypes__default["default"].node,
    /**
     * Content to the bottom of title. Applicable to tabs-info-toggle variant only.
     */
    contentBottom: PropTypes__default["default"].node,
};
const Tab = () => {
    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' +
        "It's an abstract component that is only valid as a direct Child of the `Tabs` Component. " +
        'For custom tabs components use TabPane and TabsContainer directly');
};
Tab.propTypes = propTypes$6;
var Tab$1 = Object.assign(Tab, {
    Container: TabContainer,
    Content: TabContent,
    Pane: TabPane,
});

const fadeStyles = {
    [Transition.ENTERING]: 'showing',
    [Transition.EXITING]: 'showing show',
};
const ToastFade = React__namespace.forwardRef((props, ref) => (React__namespace.createElement(Fade, { ...props, ref: ref, transitionClasses: fadeStyles })));
ToastFade.displayName = 'ToastFade';

const ToastContext = React__namespace.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onClose() { },
});

const propTypes$5 = {
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Provides an accessible label for the close
     * button. It is used for Assistive Technology when the label text is not
     * readable.
     */
    closeLabel: PropTypes__default["default"].string,
    /**
     * Sets the variant for close button.
     */
    closeVariant: PropTypes__default["default"].oneOf(['white']),
    /**
     * Specify whether the Component should contain a close button
     */
    closeButton: PropTypes__default["default"].bool,
};
const defaultProps$3 = {
    closeLabel: 'Close',
    closeButton: true,
};
const ToastHeader = React__namespace.forwardRef(({ bsPrefix, closeLabel, closeVariant, closeButton, className, children, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-header');
    const context = React.useContext(ToastContext);
    const handleClick = useEventCallback__default["default"]((e) => {
        context?.onClose?.(e);
    });
    return (React__namespace.createElement("div", { ref: ref, ...props, className: classNames__default["default"](bsPrefix, className) },
        children,
        closeButton && (React__namespace.createElement(CloseButton, { "aria-label": closeLabel, variant: closeVariant, onClick: handleClick, "data-dismiss": "toast" }))));
});
ToastHeader.displayName = 'ToastHeader';
ToastHeader.propTypes = propTypes$5;
ToastHeader.defaultProps = defaultProps$3;

const ToastBody = createWithBsPrefix('toast-body');

const propTypes$4 = {
    /**
     * @default 'toast'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Apply a CSS fade transition to the toast
     */
    animation: PropTypes__default["default"].bool,
    /**
     * Auto hide the toast
     */
    autohide: PropTypes__default["default"].bool,
    /**
     * Delay hiding the toast (ms)
     */
    delay: PropTypes__default["default"].number,
    /**
     * A Callback fired when the close button is clicked.
     */
    onClose: PropTypes__default["default"].func,
    /**
     * When `true` The toast will show itself.
     */
    show: PropTypes__default["default"].bool,
    /**
     * A `react-transition-group` Transition component used to animate the Toast on dismissal.
     */
    transition: PropTypes__default["default"].elementType,
    /**
     * Sets Toast background
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    bg: PropTypes__default["default"].string,
    isSGDS: PropTypes__default["default"].bool,
    status: PropTypes__default["default"].oneOf(['success', 'warning', 'danger']),
};
const Toast = React__namespace.forwardRef(({ bsPrefix, className, transition: Transition = ToastFade, show = true, animation = true, delay = 5000, autohide = false, onClose, bg, isSGDS = true, status, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');
    // We use refs for these, because we don't want to restart the autohide
    // timer in case these values change.
    const delayRef = React.useRef(delay);
    const onCloseRef = React.useRef(onClose);
    React.useEffect(() => {
        delayRef.current = delay;
        onCloseRef.current = onClose;
    }, [delay, onClose]);
    const autohideTimeout = useTimeout__default["default"]();
    const autohideToast = !!(autohide && show);
    const autohideFunc = React.useCallback(() => {
        if (autohideToast) {
            onCloseRef.current?.();
        }
    }, [autohideToast]);
    React.useEffect(() => {
        // Only reset timer if show or autohide changes.
        autohideTimeout.set(autohideFunc, delayRef.current);
    }, [autohideTimeout, autohideFunc]);
    const toastContext = React.useMemo(() => ({
        onClose,
    }), [onClose]);
    const hasAnimation = !!(Transition && animation);
    const toast = (React__namespace.createElement("div", { ...props, ref: ref, className: classNames__default["default"](bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide'), isSGDS && 'sgds', status && `is-${status}`), role: "alert", "aria-live": "assertive", "aria-atomic": "true" }));
    return (React__namespace.createElement(ToastContext.Provider, { value: toastContext }, hasAnimation && Transition ? (React__namespace.createElement(Transition, { in: show, unmountOnExit: true }, toast)) : (toast)));
});
Toast.propTypes = propTypes$4;
Toast.displayName = 'Toast';
var Toast$1 = Object.assign(Toast, {
    Body: ToastBody,
    Header: ToastHeader,
});

const propTypes$3 = {
    /**
     * @default 'toast-container'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**Position of toasts placed within the container. */
    position: PropTypes__default["default"].oneOf([
        'top-start',
        'top-center',
        'top-end',
        'middle-start',
        'middle-center',
        'middle-end',
        'bottom-start',
        'bottom-center',
        'bottom-end',
    ]),
};
const positionClasses = {
    'top-start': 'top-0 start-0',
    'top-center': 'top-0 start-50 translate-middle-x',
    'top-end': 'top-0 end-0',
    'middle-start': 'top-50 start-0 translate-middle-y',
    'middle-center': 'top-50 start-50 translate-middle',
    'middle-end': 'top-50 end-0 translate-middle-y',
    'bottom-start': 'bottom-0 start-0',
    'bottom-center': 'bottom-0 start-50 translate-middle-x',
    'bottom-end': 'bottom-0 end-0',
};
const ToastContainer = React__namespace.forwardRef(({ bsPrefix, position, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-container');
    return (React__namespace.createElement(SGDSWrapper, { ref: ref, ...props, className: classNames__default["default"](bsPrefix, position && `position-absolute ${positionClasses[position]}`, className) }));
});
ToastContainer.displayName = 'ToastContainer';
ToastContainer.propTypes = propTypes$3;

const propTypes$2 = {
    /**
     * @default 'tooltip'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * An html id attribute, necessary for accessibility
     * @type {string}
     * @required
     */
    id: PropTypes__default["default"].string,
    /**
     * Sets the direction the Tooltip is positioned towards.
     *
     * > This is generally provided by the `Overlay` component positioning the tooltip
     */
    placement: PropTypes__default["default"].oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]),
    /**
     * An Overlay injected set of props for positioning the tooltip arrow.
     *
     * > This is generally provided by the `Overlay` component positioning the tooltip
     *
     * @type {{ ref: ReactRef, style: Object }}
     */
    arrowProps: PropTypes__default["default"].shape({
        ref: PropTypes__default["default"].any,
        style: PropTypes__default["default"].object,
    }),
    /** @private */
    popper: PropTypes__default["default"].object,
    /** @private */
    show: PropTypes__default["default"].any,
    closeBtn: PropTypes__default["default"].element
};
const defaultProps$2 = {
    placement: 'right',
};
const TooltipBox = React__namespace.forwardRef(({ bsPrefix, placement, className, style, children, arrowProps, popper: _, show: _2, closeBtn, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'tooltip');
    const isRTL = useIsRTL();
    const [primaryPlacement] = placement?.split('-') || [];
    const bsDirection = getOverlayDirection(primaryPlacement, isRTL);
    return (React__namespace.createElement(SGDSWrapper, { ref: ref, style: style, role: "tooltip", "x-placement": primaryPlacement, className: classNames__default["default"](className, bsPrefix, `bs-tooltip-${bsDirection}`), ...props },
        React__namespace.createElement("div", { className: "tooltip-arrow", ...arrowProps }),
        React__namespace.createElement("div", { className: `${bsPrefix}-inner` },
            children,
            closeBtn)));
});
TooltipBox.defaultProps = defaultProps$2;
TooltipBox.displayName = 'Tooltip';
TooltipBox.propTypes = propTypes$2;

const propTypes$1 = {
    placement: PropTypes__default["default"].oneOf([
        'top-start',
        'bottom-start',
        'top',
        'bottom',
        'left',
        'right',
    ]),
    type: PropTypes__default["default"].oneOf(['hover', 'click']),
    content: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string]),
    children: PropTypes__default["default"].element,
};
const defaultProps$1 = {
    placement: 'top',
    type: 'hover',
    content: '',
};
const Tooltip = ((props = defaultProps$1) => {
    const { type, placement, content, children } = props;
    const [show, setShow] = React.useState(false);
    const target = React.useRef(null);
    const [tooltipId, setTooltipId] = React.useState("");
    React__namespace.useEffect(() => {
        setTooltipId(generateId('tooltip', 'div'));
    }, []);
    const clickToolTip = () => (React__namespace.createElement(React__namespace.Fragment, null,
        React__namespace.cloneElement(children, {
            onClick: () => setShow(!show),
            ref: target,
            'aria-describedby': tooltipId,
        }),
        React__namespace.createElement(Overlay, { target: target.current, show: show, placement: placement }, (props) => (React__namespace.createElement(TooltipBox, { ...props, closeBtn: React__namespace.createElement(CloseButton, { variant: "white", onClick: () => setShow(!show) }), id: tooltipId }, content)))));
    // console.log((children as React.ReactElement).props);
    const hoverTooltip = () => (React__namespace.createElement(OverlayTrigger, { placement: placement, overlay: React__namespace.createElement(TooltipBox, { id: tooltipId, ...props }, content) }, React__namespace.cloneElement(children, {
        onClick: () => setShow(!show),
        ref: target,
        'aria-describedby': tooltipId,
    })));
    return type === 'hover' ? hoverTooltip() : clickToolTip();
});
Tooltip.defaultProps = defaultProps$1;
Tooltip.propTypes = propTypes$1;

const propTypes = {
    initialValue: PropTypes__default["default"].string,
    onChangeInput: PropTypes__default["default"].func,
    menuPlacement: PropTypes__default["default"].oneOf(['up', 'down']),
    menuList: PropTypes__default["default"].arrayOf(PropTypes__default["default"].string).isRequired,
    label: PropTypes__default["default"].string,
    icon: PropTypes__default["default"].element
};
const defaultProps = {
    menuPlacement: 'down',
    initialValue: '',
};
const Combobox = React__namespace.forwardRef(({ menuPlacement = 'down', menuList, initialValue = '', onChangeInput, label = '', icon, ...props }, ref) => {
    const formControlRef = React.useRef(null);
    const inputRef = useMergedRefs__default["default"](ref, formControlRef);
    const [menuOpen, setIsMenuOpen] = React.useState(undefined);
    const initialState = {
        value: initialValue,
        invalid: false,
        menuList: initialValue
            ? menuList.filter((n) => n.toLowerCase().startsWith(initialValue.toLowerCase()))
            : menuList,
    };
    const [state, setState] = React.useState(initialState);
    const handleChange = (e) => {
        if (!menuOpen) {
            formControlRef.current?.click();
        }
        const filterMenuList = menuList.filter((n) => {
            const nLowerCase = n.toLowerCase();
            const valueLower = e.currentTarget.value.toLowerCase();
            return nLowerCase.startsWith(valueLower);
        });
        setState({
            ...state,
            value: e.currentTarget.value,
            menuList: filterMenuList,
        });
        if (onChangeInput)
            onChangeInput(e.currentTarget.value, e);
    };
    const controlProps = {
        onChange: handleChange,
        value: state.value,
        ref: inputRef,
        isInvalid: state.invalid,
        ...props,
    };
    const handleClickItem = (e) => {
        if (onChangeInput)
            onChangeInput(e.currentTarget.textContent, e);
        setState({
            ...state,
            value: e.currentTarget.textContent,
            menuList: state.menuList.filter((c) => c === e.currentTarget.textContent),
        });
    };
    const focusDropdownItem = (event) => {
        setState({
            ...state,
            value: event.currentTarget.textContent,
        });
    };
    const [comboboxMenuId, setComboboxMenuId] = React.useState("");
    React__namespace.useEffect(() => {
        setComboboxMenuId(generateId('combobox', 'ul'));
    }, []);
    return (React__namespace.createElement(React__namespace.Fragment, null,
        label && React__namespace.createElement(FormLabel, { htmlFor: props.id }, label),
        React__namespace.createElement(Dropdown$1, { className: icon && 'combobox', focusFirstItemOnShow: false, drop: menuPlacement },
            React__namespace.createElement(FormControlToggle, { ...controlProps, setIsMenuOpen: setIsMenuOpen, role: "combobox", "aria-autocomplete": "list", "aria-controls": comboboxMenuId }),
            icon &&
                React__namespace.cloneElement(icon, {
                    className: classNames__default["default"](icon.props.className, 'form-control-icon'),
                }),
            state.menuList.length > 0 && (React__namespace.createElement(DropdownMenu, { id: comboboxMenuId, role: "listbox" }, state.menuList.map((menuItem) => (React__namespace.createElement(DropdownItem, { as: "button", key: menuItem, onClick: handleClickItem, onFocus: focusDropdownItem }, menuItem))))))));
});
Combobox.displayName = 'Combobox';
Combobox.propTypes = propTypes;
Combobox.defaultProps = defaultProps;

exports.Accordion = Accordion$1;
exports.AccordionBody = AccordionBody;
exports.AccordionButton = AccordionButton;
exports.AccordionCollapse = AccordionCollapse;
exports.AccordionContext = context$8;
exports.AccordionHeader = AccordionHeader;
exports.AccordionItem = AccordionItem;
exports.Alert = Alert$1;
exports.AlertHeading = AlertHeading;
exports.AlertLink = AlertLink;
exports.Badge = Badge;
exports.Breadcrumb = Breadcrumb$1;
exports.BreadcrumbItem = BreadcrumbItem;
exports.Button = Button;
exports.ButtonGroup = ButtonGroup;
exports.Card = Card$1;
exports.CardBody = CardBody;
exports.CardFooter = CardFooter;
exports.CardGroup = CardGroup;
exports.CardHeader = CardHeader;
exports.CardImg = CardImg;
exports.CardImgOverlay = CardImgOverlay;
exports.CardLink = CardLink;
exports.CardStretchedLink = CardStretchedLink;
exports.CardSubtitle = CardSubtitle;
exports.CardText = CardText;
exports.CardTitle = CardTitle;
exports.CardUnit = CardUnit;
exports.CloseButton = CloseButton;
exports.Col = Col;
exports.Collapse = Collapse;
exports.Combobox = Combobox;
exports.Container = Container;
exports.DatePicker = DatePicker;
exports.Dropdown = Dropdown$1;
exports.DropdownButton = DropdownButton;
exports.DropdownDivider = DropdownDivider;
exports.DropdownHeader = DropdownHeader;
exports.DropdownItem = DropdownItem;
exports.DropdownItemText = DropdownItemText;
exports.DropdownMenu = DropdownMenu;
exports.DropdownToggle = DropdownToggle;
exports.Fade = Fade;
exports.Feedback = Feedback;
exports.FileUpload = FileUpload;
exports.Footer = Footer$1;
exports.FooterBottom = FooterBottom$1;
exports.FooterBottomCopyrights = FooterBottomCopyrights;
exports.FooterBottomLinks = FooterBottomLinks;
exports.FooterTop = FooterSection;
exports.FooterTopContactLinks = FooterTopContactLinks;
exports.FooterTopHeader = FooterTopHeader;
exports.FooterTopItem = FooterTopItem;
exports.FooterTopItemGroup = FooterTopItemGroup;
exports.Form = Form$1;
exports.FormCheck = FormCheck$1;
exports.FormCheckInput = FormCheckInput;
exports.FormCheckLabel = FormCheckLabel;
exports.FormControl = FormControl$1;
exports.FormControlGroup = FormControlGroup;
exports.FormGroup = FormGroup;
exports.FormLabel = FormLabel;
exports.FormSelect = FormSelect;
exports.FormSwitch = Switch$1;
exports.FormText = FormText;
exports.InputGroup = InputGroup$1;
exports.InputGroupCheckbox = InputGroupCheckbox;
exports.InputGroupRadio = InputGroupRadio;
exports.InputGroupText = InputGroupText;
exports.Modal = Modal$1;
exports.ModalBody = ModalBody;
exports.ModalDialog = ModalDialog;
exports.ModalFooter = ModalFooter;
exports.ModalHeader = ModalHeader;
exports.ModalTitle = ModalTitle;
exports.Nav = Nav$1;
exports.NavDropdown = NavDropdown$1;
exports.NavItem = NavItem;
exports.NavLink = NavLink;
exports.Navbar = Navbar$1;
exports.NavbarBrand = NavbarBrand;
exports.NavbarCollapse = NavbarCollapse;
exports.NavbarText = NavbarText;
exports.NavbarToggle = NavbarToggle;
exports.Overlay = Overlay;
exports.OverlayTrigger = OverlayTrigger;
exports.Pagination = Pagination;
exports.Popover = Popover$1;
exports.PopoverBody = PopoverBody;
exports.PopoverHeader = PopoverHeader;
exports.ProgressBar = ProgressBar;
exports.QuantityToggle = QuantityToggle;
exports.Row = Row;
exports.SelectableCard = SelectableCard;
exports.SideNav = SideNav$1;
exports.SideNavButton = SideNavButton;
exports.SideNavCollapse = SideNavCollapse;
exports.SideNavItem = SideNavItem;
exports.SideNavLink = SideNavLink;
exports.SplitButton = SplitButton;
exports.Stepper = Stepper;
exports.Tab = Tab$1;
exports.TabContainer = TabContainer;
exports.TabContent = TabContent;
exports.TabPane = TabPane;
exports.Table = Table$1;
exports.TableBody = TableBody;
exports.TableDataCell = TableDataCell;
exports.TableHeader = TableHeader;
exports.TableHeaderCell = TableHeaderCell;
exports.TableRow = TableRow;
exports.TableSortLabel = TableSortLabel;
exports.Tabs = Tabs;
exports.ThemeProvider = ThemeProvider;
exports.Toast = Toast$1;
exports.ToastBody = ToastBody;
exports.ToastContainer = ToastContainer;
exports.ToastHeader = ToastHeader;
exports.Tooltip = Tooltip;
exports.TooltipBox = TooltipBox;
exports.useAccordionButton = useAccordionButton;
exports.useStep = useStep;
