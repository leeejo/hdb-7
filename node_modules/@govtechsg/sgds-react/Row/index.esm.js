'use client';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import * as React from 'react';
import { useContext } from 'react';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const rowColWidth = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);
const rowColumns = PropTypes.oneOfType([
    rowColWidth,
    PropTypes.shape({
        cols: rowColWidth,
    }),
]);
const propTypes = {
    /**
     * @default 'row'
     */
    bsPrefix: PropTypes.string,
    as: PropTypes.elementType,
    /**
     * The number of columns that will fit next to each other on extra small devices (<576px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xs: rowColumns,
    /**
     * The number of columns that will fit next to each other on small devices (≥576px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    sm: rowColumns,
    /**
     * The number of columns that will fit next to each other on medium devices (≥768px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    md: rowColumns,
    /**
     * The number of columns that will fit next to each other on large devices (≥992px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    lg: rowColumns,
    /**
     * The number of columns that will fit next to each other on extra large devices (≥1200px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xl: rowColumns,
    /**
     * The number of columns that will fit next to each other on extra extra large devices (≥1400px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xxl: rowColumns,
};
const Row = React.forwardRef(({ bsPrefix, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    DEVICE_SIZES.forEach((brkPoint) => {
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let cols;
        if (propValue != null && typeof propValue === 'object') {
            ({ cols } = propValue);
        }
        else {
            cols = propValue;
        }
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (cols != null)
            classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return (React.createElement(Component, { ref: ref, ...props, className: classNames(className, decoratedBsPrefix, ...classes) }));
});
Row.displayName = 'Row';
Row.propTypes = propTypes;

export { Row };
