'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const rowColWidth = PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]);
const rowColumns = PropTypes__default["default"].oneOfType([
    rowColWidth,
    PropTypes__default["default"].shape({
        cols: rowColWidth,
    }),
]);
const propTypes = {
    /**
     * @default 'row'
     */
    bsPrefix: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    /**
     * The number of columns that will fit next to each other on extra small devices (<576px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xs: rowColumns,
    /**
     * The number of columns that will fit next to each other on small devices (≥576px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    sm: rowColumns,
    /**
     * The number of columns that will fit next to each other on medium devices (≥768px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    md: rowColumns,
    /**
     * The number of columns that will fit next to each other on large devices (≥992px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    lg: rowColumns,
    /**
     * The number of columns that will fit next to each other on extra large devices (≥1200px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xl: rowColumns,
    /**
     * The number of columns that will fit next to each other on extra extra large devices (≥1400px).
     * Use `auto` to give columns their natural widths.
     *
     * @type {(number|'auto'|{ cols: number|'auto' })}
     */
    xxl: rowColumns,
};
const Row = React__namespace.forwardRef(({ bsPrefix, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    DEVICE_SIZES.forEach((brkPoint) => {
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let cols;
        if (propValue != null && typeof propValue === 'object') {
            ({ cols } = propValue);
        }
        else {
            cols = propValue;
        }
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (cols != null)
            classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, decoratedBsPrefix, ...classes) }));
});
Row.displayName = 'Row';
Row.propTypes = propTypes;

exports.Row = Row;
