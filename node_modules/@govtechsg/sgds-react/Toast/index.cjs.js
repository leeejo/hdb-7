'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var classNames = require('classnames');
var useTimeout = require('@restart/hooks/useTimeout');
var Transition = require('react-transition-group/Transition');
var transitionEndListener = require('../utils/transitionEndListener');
var triggerBrowserReflow = require('../utils/triggerBrowserReflow');
var TransitionWrapper = require('../utils/TransitionWrapper');
var useEventCallback = require('@restart/hooks/useEventCallback');
var createWithBsPrefix = require('../utils/createWithBsPrefix');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var useTimeout__default = /*#__PURE__*/_interopDefaultLegacy(useTimeout);
var transitionEndListener__default = /*#__PURE__*/_interopDefaultLegacy(transitionEndListener);
var triggerBrowserReflow__default = /*#__PURE__*/_interopDefaultLegacy(triggerBrowserReflow);
var TransitionWrapper__default = /*#__PURE__*/_interopDefaultLegacy(TransitionWrapper);
var useEventCallback__default = /*#__PURE__*/_interopDefaultLegacy(useEventCallback);
var createWithBsPrefix__default = /*#__PURE__*/_interopDefaultLegacy(createWithBsPrefix);

const propTypes$4 = {
    /**
     * Show the component; triggers the fade in or fade out animation
     */
    in: PropTypes__default["default"].bool,
    /**
     * Wait until the first "enter" transition to mount the component (add it to the DOM)
     */
    mountOnEnter: PropTypes__default["default"].bool,
    /**
     * Unmount the component (remove it from the DOM) when it is faded out
     */
    unmountOnExit: PropTypes__default["default"].bool,
    /**
     * Run the fade in animation when the component mounts, if it is initially
     * shown
     */
    appear: PropTypes__default["default"].bool,
    /**
     * Duration of the fade animation in milliseconds, to ensure that finishing
     * callbacks are fired even if the original browser transition end events are
     * canceled
     */
    timeout: PropTypes__default["default"].number,
    /**
     * Callback fired before the component fades in
     */
    onEnter: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to fade in
     */
    onEntering: PropTypes__default["default"].func,
    /**
     * Callback fired after the has component faded in
     */
    onEntered: PropTypes__default["default"].func,
    /**
     * Callback fired before the component fades out
     */
    onExit: PropTypes__default["default"].func,
    /**
     * Callback fired after the component starts to fade out
     */
    onExiting: PropTypes__default["default"].func,
    /**
     * Callback fired after the component has faded out
     */
    onExited: PropTypes__default["default"].func,
    /**
     * You must provide a single JSX child element to this component and that element cannot be a \<React.Fragment\>
     */
    children: PropTypes__default["default"].element.isRequired,
    /**
     * Applies additional specified classes during the transition. Takes an object
     * where the keys correspond to the Transition status
     */
    transitionClasses: PropTypes__default["default"].object,
};
const defaultProps$2 = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
};
const fadeStyles$1 = {
    [Transition.ENTERING]: 'show',
    [Transition.ENTERED]: 'show',
};
const Fade = React__namespace.forwardRef(({ className, children, transitionClasses = {}, ...props }, ref) => {
    const handleEnter = React.useCallback((node, isAppearing) => {
        triggerBrowserReflow__default["default"](node);
        props.onEnter?.(node, isAppearing);
    }, [props]);
    return (React__namespace.createElement(TransitionWrapper__default["default"], { ref: ref, addEndListener: transitionEndListener__default["default"], ...props, onEnter: handleEnter, childRef: children.ref }, (status, innerProps) => React__namespace.cloneElement(children, {
        ...innerProps,
        className: classNames__default["default"]('fade', className, children.props.className, 
        //@ts-ignore
        fadeStyles$1[status], transitionClasses[status]),
    })));
});
Fade.propTypes = propTypes$4;
Fade.defaultProps = defaultProps$2;
Fade.displayName = 'Fade';

const fadeStyles = {
    [Transition.ENTERING]: 'showing',
    [Transition.EXITING]: 'showing show',
};
const ToastFade = React__namespace.forwardRef((props, ref) => (React__namespace.createElement(Fade, { ...props, ref: ref, transitionClasses: fadeStyles })));
ToastFade.displayName = 'ToastFade';

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const propTypes$3 = {
    'aria-label': PropTypes__default["default"].string,
    onClick: PropTypes__default["default"].func,
    /**
     * Render different color variant for the button.
     *
     * Omitting this will render the default dark color.
     */
    variant: PropTypes__default["default"].oneOf(['white']),
};
const defaultProps$1 = {
    'aria-label': 'Close',
};
const CloseButton = React__namespace.forwardRef(({ className, variant, ...props }, ref) => (React__namespace.createElement("button", { ref: ref, type: "button", className: classNames__default["default"]('btn-close', variant && `btn-close-${variant}`, className), ...props })));
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes$3;
CloseButton.defaultProps = defaultProps$1;

const ToastContext = React__namespace.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onClose() { },
});

const propTypes$2 = {
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Provides an accessible label for the close
     * button. It is used for Assistive Technology when the label text is not
     * readable.
     */
    closeLabel: PropTypes__default["default"].string,
    /**
     * Sets the variant for close button.
     */
    closeVariant: PropTypes__default["default"].oneOf(['white']),
    /**
     * Specify whether the Component should contain a close button
     */
    closeButton: PropTypes__default["default"].bool,
};
const defaultProps = {
    closeLabel: 'Close',
    closeButton: true,
};
const ToastHeader = React__namespace.forwardRef(({ bsPrefix, closeLabel, closeVariant, closeButton, className, children, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-header');
    const context = React.useContext(ToastContext);
    const handleClick = useEventCallback__default["default"]((e) => {
        context?.onClose?.(e);
    });
    return (React__namespace.createElement("div", { ref: ref, ...props, className: classNames__default["default"](bsPrefix, className) },
        children,
        closeButton && (React__namespace.createElement(CloseButton, { "aria-label": closeLabel, variant: closeVariant, onClick: handleClick, "data-dismiss": "toast" }))));
});
ToastHeader.displayName = 'ToastHeader';
ToastHeader.propTypes = propTypes$2;
ToastHeader.defaultProps = defaultProps;

const ToastBody = createWithBsPrefix__default["default"]('toast-body');

const propTypes$1 = {
    /**
     * @default 'toast'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Apply a CSS fade transition to the toast
     */
    animation: PropTypes__default["default"].bool,
    /**
     * Auto hide the toast
     */
    autohide: PropTypes__default["default"].bool,
    /**
     * Delay hiding the toast (ms)
     */
    delay: PropTypes__default["default"].number,
    /**
     * A Callback fired when the close button is clicked.
     */
    onClose: PropTypes__default["default"].func,
    /**
     * When `true` The toast will show itself.
     */
    show: PropTypes__default["default"].bool,
    /**
     * A `react-transition-group` Transition component used to animate the Toast on dismissal.
     */
    transition: PropTypes__default["default"].elementType,
    /**
     * Sets Toast background
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    bg: PropTypes__default["default"].string,
    isSGDS: PropTypes__default["default"].bool,
    status: PropTypes__default["default"].oneOf(['success', 'warning', 'danger']),
};
const Toast = React__namespace.forwardRef(({ bsPrefix, className, transition: Transition = ToastFade, show = true, animation = true, delay = 5000, autohide = false, onClose, bg, isSGDS = true, status, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');
    // We use refs for these, because we don't want to restart the autohide
    // timer in case these values change.
    const delayRef = React.useRef(delay);
    const onCloseRef = React.useRef(onClose);
    React.useEffect(() => {
        delayRef.current = delay;
        onCloseRef.current = onClose;
    }, [delay, onClose]);
    const autohideTimeout = useTimeout__default["default"]();
    const autohideToast = !!(autohide && show);
    const autohideFunc = React.useCallback(() => {
        if (autohideToast) {
            onCloseRef.current?.();
        }
    }, [autohideToast]);
    React.useEffect(() => {
        // Only reset timer if show or autohide changes.
        autohideTimeout.set(autohideFunc, delayRef.current);
    }, [autohideTimeout, autohideFunc]);
    const toastContext = React.useMemo(() => ({
        onClose,
    }), [onClose]);
    const hasAnimation = !!(Transition && animation);
    const toast = (React__namespace.createElement("div", { ...props, ref: ref, className: classNames__default["default"](bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide'), isSGDS && 'sgds', status && `is-${status}`), role: "alert", "aria-live": "assertive", "aria-atomic": "true" }));
    return (React__namespace.createElement(ToastContext.Provider, { value: toastContext }, hasAnimation && Transition ? (React__namespace.createElement(Transition, { in: show, unmountOnExit: true }, toast)) : (toast)));
});
Toast.propTypes = propTypes$1;
Toast.displayName = 'Toast';
var Toast$1 = Object.assign(Toast, {
    Body: ToastBody,
    Header: ToastHeader,
});

const propTypes = {
    /**
     * @default 'toast-container'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**Position of toasts placed within the container. */
    position: PropTypes__default["default"].oneOf([
        'top-start',
        'top-center',
        'top-end',
        'middle-start',
        'middle-center',
        'middle-end',
        'bottom-start',
        'bottom-center',
        'bottom-end',
    ]),
};
const positionClasses = {
    'top-start': 'top-0 start-0',
    'top-center': 'top-0 start-50 translate-middle-x',
    'top-end': 'top-0 end-0',
    'middle-start': 'top-50 start-0 translate-middle-y',
    'middle-center': 'top-50 start-50 translate-middle',
    'middle-end': 'top-50 end-0 translate-middle-y',
    'bottom-start': 'bottom-0 start-0',
    'bottom-center': 'bottom-0 start-50 translate-middle-x',
    'bottom-end': 'bottom-0 end-0',
};
const ToastContainer = React__namespace.forwardRef(({ bsPrefix, position, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-container');
    return (React__namespace.createElement(SGDSWrapper, { ref: ref, ...props, className: classNames__default["default"](bsPrefix, position && `position-absolute ${positionClasses[position]}`, className) }));
});
ToastContainer.displayName = 'ToastContainer';
ToastContainer.propTypes = propTypes;

exports.Toast = Toast$1;
exports.ToastBody = ToastBody;
exports.ToastContainer = ToastContainer;
exports.ToastHeader = ToastHeader;
