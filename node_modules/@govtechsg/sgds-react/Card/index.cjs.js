'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var createWithBsPrefix = require('../utils/createWithBsPrefix');
var divWithClassName = require('../utils/divWithClassName');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var createWithBsPrefix__default = /*#__PURE__*/_interopDefaultLegacy(createWithBsPrefix);
var divWithClassName__default = /*#__PURE__*/_interopDefaultLegacy(divWithClassName);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const propTypes$7 = {
    /**
     * @default 'card-img'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Defines image position inside
     * the card.
     *
     * @type {('top'|'bottom')}
     */
    variant: PropTypes__default["default"].oneOf(['top', 'bottom']),
    as: PropTypes__default["default"].elementType,
};
const CardImg = React__namespace.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
({ bsPrefix, className, variant, as: Component = 'img', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'card-img');
    return (React__namespace.createElement(Component, { ref: ref, className: classNames__default["default"](variant ? `${prefix}-${variant}` : prefix, className), ...props }));
});
CardImg.displayName = 'CardImg';
CardImg.propTypes = propTypes$7;

const context = React__namespace.createContext(null);
context.displayName = 'CardHeaderContext';

const propTypes$6 = {
    /**
     * @default 'card-header'
     */
    bsPrefix: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
};
const CardHeader = React__namespace.forwardRef(({ bsPrefix, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'card-header');
    const contextValue = React.useMemo(() => ({
        cardHeaderBsPrefix: prefix,
    }), [prefix]);
    return (React__namespace.createElement(context.Provider, { value: contextValue },
        React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](className, prefix) })));
});
CardHeader.displayName = 'CardHeader';
CardHeader.propTypes = propTypes$6;

const CardTitle = createWithBsPrefix__default["default"]('card-title', {
    Component: 'h3',
});
const DivStyledAsH6 = divWithClassName__default["default"]('h6');
const CardSubtitle = createWithBsPrefix__default["default"]('card-subtitle', {
    Component: DivStyledAsH6,
});
const CardLink = createWithBsPrefix__default["default"]('card-link', { Component: 'a' });
const CardStretchedLink = createWithBsPrefix__default["default"]('card-link stretched-link', {
    Component: 'a',
});
const CardText = createWithBsPrefix__default["default"]('card-text', { Component: 'p' });
const CardFooter = createWithBsPrefix__default["default"]('card-footer');
const CardImgOverlay = createWithBsPrefix__default["default"]('card-img-overlay');
const CardUnit = createWithBsPrefix__default["default"]('card-unit', { Component: 'div' });
const CardBody = createWithBsPrefix__default["default"]('card-body');

const propTypes$5 = {
    /**
     * @default 'card'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Sets card background
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    bg: PropTypes__default["default"].string,
    /**
     * Sets card text color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light'|'white'|'muted')}
     */
    text: PropTypes__default["default"].string,
    /**
     * Sets card border color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    border: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
    variant: PropTypes__default["default"].oneOf([
        'card-action',
        'card-action-quantity-toggle',
    ]),
};
const Card = React__namespace.forwardRef(({ bsPrefix, className, bg, text, border, children, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'card');
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...props, className: classNames__default["default"](className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`) }, children));
});
Card.displayName = 'Card';
Card.propTypes = propTypes$5;
var Card$1 = Object.assign(Card, {
    Img: CardImg,
    Title: CardTitle,
    Subtitle: CardSubtitle,
    Body: CardBody,
    Link: CardLink,
    StretchedLink: CardStretchedLink,
    Text: CardText,
    Header: CardHeader,
    Footer: CardFooter,
    ImgOverlay: CardImgOverlay,
    Unit: CardUnit,
});

const propTypes$4 = {
    /**
     * Specify whether the feedback is for valid or invalid fields
     *
     * @type {('valid'|'invalid')}
     */
    type: PropTypes__default["default"].string,
    as: PropTypes__default["default"].elementType,
};
const Feedback = React__namespace.forwardRef(
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
({ as: Component = 'div', className, type = 'valid', ...props }, ref) => {
    return (React__namespace.createElement(Component, { ...props, ref: ref, className: classNames__default["default"](className, `${type}-feedback`) }));
});
Feedback.displayName = 'Feedback';
Feedback.propTypes = propTypes$4;

const FormContext = React__namespace.createContext({});

const propTypes$3 = {
    /**
     * @default 'form-check-input'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The underlying HTML element to use when rendering the FormCheckInput.
     *
     * @type {('input'|elementType)}
     */
    as: PropTypes__default["default"].elementType,
    /** A HTML id attribute, necessary for proper form accessibility. */
    id: PropTypes__default["default"].string,
    /** The type of checkable. */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox']).isRequired,
    /** Manually style the input as valid */
    isValid: PropTypes__default["default"].bool,
    /** Manually style the input as invalid */
    isInvalid: PropTypes__default["default"].bool,
};
const FormCheckInput = React__namespace.forwardRef(({ id, bsPrefix, className, type = 'checkbox', isValid = false, isInvalid = false, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input', ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');
    return (React__namespace.createElement(Component, { ...props, ref: ref, type: type, id: id || controlId, className: classNames__default["default"](className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid') }));
});
FormCheckInput.displayName = 'FormCheckInput';
FormCheckInput.propTypes = propTypes$3;

const propTypes$2 = {
    /**
     * @default 'form-check-label'
     */
    bsPrefix: PropTypes__default["default"].string,
    /** The HTML for attribute for associating the label with an input */
    htmlFor: PropTypes__default["default"].string,
};
const FormCheckLabel = React__namespace.forwardRef(({ bsPrefix, className, htmlFor, ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-label');
    return (React__namespace.createElement("label", { ...props, ref: ref, htmlFor: htmlFor || controlId, className: classNames__default["default"](className, bsPrefix) }));
});
FormCheckLabel.displayName = 'FormCheckLabel';
FormCheckLabel.propTypes = propTypes$2;

const propTypes$1 = {
    /**
     * @default 'form-check'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * bsPrefix override for the base switch class.
     *
     * @default 'form-switch'
     */
    bsSwitchPrefix: PropTypes__default["default"].string,
    /**
     * The FormCheck `ref` will be forwarded to the underlying input element,
     * which means it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes__default["default"].any,
    /**
     * The underlying HTML element to use when rendering the FormCheck.
     *
     * @type {('input'|elementType)}
     */
    as: PropTypes__default["default"].elementType,
    /**
     * A HTML id attribute, necessary for proper form accessibility.
     * An id is recommended for allowing label clicks to toggle the check control.
     *
     * This is **required** when `type="switch"` due to how they are rendered.
     */
    id: PropTypes__default["default"].string,
    /**
     * Groups controls horizontally with other `FormCheck`s.
     */
    inline: PropTypes__default["default"].bool,
    /**
     * Disables the control.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * `title` attribute for the underlying `FormCheckLabel`.
     */
    title: PropTypes__default["default"].string,
    /**
     * Label for the control.
     */
    label: PropTypes__default["default"].node,
    /**
     * aria-label for label element.
     */
    ariaLabel: PropTypes__default["default"].string,
    /**
     * The type of checkable.
     * @type {('radio' | 'checkbox' | 'switch')}
     */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox', 'switch']),
    /** Manually style the input as valid */
    isValid: PropTypes__default["default"].bool,
    /** Manually style the input as invalid */
    isInvalid: PropTypes__default["default"].bool,
    /** A message to display when the input is in a validation state */
    feedback: PropTypes__default["default"].node,
    feedbackType: PropTypes__default["default"].oneOf(['invalid', 'valid'])
};
const FormCheck = React__namespace.forwardRef(({ id, bsPrefix, bsSwitchPrefix, inline = false, disabled = false, isValid = false, isInvalid = false, feedback, feedbackType, className, style, title = '', type = 'checkbox', label, ariaLabel, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as = 'input', ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');
    bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');
    const { controlId } = React.useContext(FormContext);
    const innerFormContext = React.useMemo(() => ({
        controlId: id || controlId,
    }), [controlId, id]);
    const input = (React__namespace.createElement(FormCheckInput, { ...props, type: type === 'switch' ? 'checkbox' : type, ref: ref, isValid: isValid, isInvalid: isInvalid, disabled: disabled, as: as }));
    return (React__namespace.createElement(FormContext.Provider, { value: innerFormContext },
        React__namespace.createElement("div", { style: style, className: classNames__default["default"](className, label && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix) },
            input,
            React__namespace.createElement(FormCheckLabel, { title: title, "aria-label": ariaLabel }, label),
            feedback && React__namespace.createElement(Feedback, { type: feedbackType }, feedback))));
});
FormCheck.displayName = 'FormCheck';
FormCheck.propTypes = propTypes$1;
var FormCheck$1 = Object.assign(FormCheck, {
    Input: FormCheckInput,
    Label: FormCheckLabel,
});

const propTypes = {
    /**
     * The type of checkable.
     * @type {('radio' | 'checkbox' | 'switch')}
     */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox', 'switch']),
    /**
     * Disables the control.
     */
    disabled: PropTypes__default["default"].bool,
    /**
     * Sets card background
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    bg: PropTypes__default["default"].string,
    /**
     * Sets card text color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light'|'white'|'muted')}
     */
    text: PropTypes__default["default"].string,
    /**
     * Sets card border color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}
     */
    border: PropTypes__default["default"].string,
    /** Category title of the Card */
    categoryTitle: PropTypes__default["default"].node
};
const defaultProps = {
    disabled: false,
    type: 'checkbox',
};
const SelectableCard = ({ children, bg, text, border, categoryTitle, ...props }) => {
    const formCheckRef = React__namespace.useRef(null);
    const cardRef = React__namespace.useRef(null);
    const formCheckProps = props;
    const cardProps = { bg, text, border };
    const handleSelect = () => {
        formCheckRef?.current?.click();
    };
    return (React__namespace.createElement(Card$1, { ref: cardRef, onClick: handleSelect, tabIndex: 0, variant: "card-action", className: props.checked && !props.disabled
            ? 'is-active'
            : undefined, ...cardProps },
        React__namespace.createElement(Card$1.Body, null,
            React__namespace.createElement(Card$1.Subtitle, { as: "h6", className: "text-muted" },
                React__namespace.createElement("div", null, categoryTitle),
                React__namespace.createElement("div", { className: "card-input" },
                    React__namespace.createElement(FormCheck$1, { ref: formCheckRef, ...formCheckProps, onClick: handleSelect }))),
            children)));
};
SelectableCard.displayName = 'SelectableCard';
SelectableCard.defaultProps = defaultProps;
SelectableCard.propTypes = propTypes;

var CardGroup = createWithBsPrefix__default["default"]('card-group');

exports.Card = Card$1;
exports.CardBody = CardBody;
exports.CardFooter = CardFooter;
exports.CardGroup = CardGroup;
exports.CardHeader = CardHeader;
exports.CardImg = CardImg;
exports.CardImgOverlay = CardImgOverlay;
exports.CardLink = CardLink;
exports.CardStretchedLink = CardStretchedLink;
exports.CardSubtitle = CardSubtitle;
exports.CardText = CardText;
exports.CardTitle = CardTitle;
exports.CardUnit = CardUnit;
exports.SelectableCard = SelectableCard;
