'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const propTypes = {
    /**
     * @default 'btn-group'
     */
    bsPrefix: PropTypes.string,
    /**
     * Sets the size for all Buttons in the group.
     *
     * @type ('sm'|'lg')
     */
    size: PropTypes.string,
    /** Make the set of Buttons appear vertically stacked. */
    vertical: PropTypes.bool,
    /**
     * An ARIA role describing the button group. Usually the default
     * "group" role is fine. An `aria-label` or `aria-labelledby`
     * prop is also recommended.
     */
    role: PropTypes.string,
    as: PropTypes.elementType,
};
const defaultProps = {
    vertical: false,
    role: 'group',
};
const ButtonGroup = React.forwardRef(({ bsPrefix, size, vertical, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...rest }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');
    let baseClass = prefix;
    if (vertical)
        baseClass = `${prefix}-vertical`;
    return (React.createElement(Component, { ...rest, ref: ref, className: classNames(className, baseClass, size && `${prefix}-${size}`) }));
});
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.propTypes = propTypes;
ButtonGroup.defaultProps = defaultProps;

export { ButtonGroup };
