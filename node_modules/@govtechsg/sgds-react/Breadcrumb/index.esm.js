'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';
import Anchor from '@restart/ui/Anchor';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const propTypes$1 = {
    /**
     * @default 'breadcrumb-item'
     */
    bsPrefix: PropTypes.string,
    /**
     * Adds a visual "active" state to a Breadcrumb
     * Item and disables the link.
     */
    active: PropTypes.bool,
    /**
     * `href` attribute for the inner `a` element
     */
    href: PropTypes.string,
    /**
     * You can use a custom element type for this component's inner link.
     */
    linkAs: PropTypes.elementType,
    /**
     * `title` attribute for the inner `a` element
     */
    title: PropTypes.node,
    /**
     * `target` attribute for the inner `a` element
     */
    target: PropTypes.string,
    /**
     * Additional props passed as-is to the underlying link for non-active items.
     */
    linkProps: PropTypes.object,
    as: PropTypes.elementType,
};
const defaultProps$1 = {
    active: false,
    linkProps: {},
};
const BreadcrumbItem = React.forwardRef(({ bsPrefix, active, children, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'li', linkAs: LinkComponent = Anchor, linkProps, href, title, target, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');
    return (React.createElement(Component, { ref: ref, ...props, className: classNames(prefix, className, { active }), "aria-current": active ? 'page' : undefined }, active ? (children) : (React.createElement(LinkComponent, { ...linkProps, href: href, title: title, target: target }, children))));
});
BreadcrumbItem.displayName = 'BreadcrumbItem';
BreadcrumbItem.propTypes = propTypes$1;
BreadcrumbItem.defaultProps = defaultProps$1;

const propTypes = {
    /**
     * @default 'breadcrumb'
     */
    bsPrefix: PropTypes.string,
    /**
     * ARIA label for the nav element
     * https://www.w3.org/TR/wai-aria-practices/#breadcrumb
     */
    ariaLabel: PropTypes.string,
    /**
     * Additional props passed as-is to the underlying `<ol>` element
     */
    listProps: PropTypes.object,
    as: PropTypes.elementType,
};
const defaultProps = {
    ariaLabel: 'breadcrumb',
    listProps: {},
};
const Breadcrumb = React.forwardRef(({ bsPrefix, className, listProps, children, ariaLabel, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as = 'nav', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');
    return (React.createElement(SGDSWrapper, { as: as, "aria-label": ariaLabel, className: className, ref: ref, ...props },
        React.createElement("ol", { ...listProps, className: classNames(prefix, listProps?.className) }, children)));
});
Breadcrumb.displayName = 'Breadcrumb';
Breadcrumb.propTypes = propTypes;
Breadcrumb.defaultProps = defaultProps;
var Breadcrumb$1 = Object.assign(Breadcrumb, {
    Item: BreadcrumbItem,
});

export { Breadcrumb$1 as Breadcrumb, BreadcrumbItem };
