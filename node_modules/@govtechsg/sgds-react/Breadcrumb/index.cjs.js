'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var Anchor = require('@restart/ui/Anchor');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var Anchor__default = /*#__PURE__*/_interopDefaultLegacy(Anchor);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const propTypes$1 = {
    /**
     * @default 'breadcrumb-item'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Adds a visual "active" state to a Breadcrumb
     * Item and disables the link.
     */
    active: PropTypes__default["default"].bool,
    /**
     * `href` attribute for the inner `a` element
     */
    href: PropTypes__default["default"].string,
    /**
     * You can use a custom element type for this component's inner link.
     */
    linkAs: PropTypes__default["default"].elementType,
    /**
     * `title` attribute for the inner `a` element
     */
    title: PropTypes__default["default"].node,
    /**
     * `target` attribute for the inner `a` element
     */
    target: PropTypes__default["default"].string,
    /**
     * Additional props passed as-is to the underlying link for non-active items.
     */
    linkProps: PropTypes__default["default"].object,
    as: PropTypes__default["default"].elementType,
};
const defaultProps$1 = {
    active: false,
    linkProps: {},
};
const BreadcrumbItem = React__namespace.forwardRef(({ bsPrefix, active, children, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'li', linkAs: LinkComponent = Anchor__default["default"], linkProps, href, title, target, ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');
    return (React__namespace.createElement(Component, { ref: ref, ...props, className: classNames__default["default"](prefix, className, { active }), "aria-current": active ? 'page' : undefined }, active ? (children) : (React__namespace.createElement(LinkComponent, { ...linkProps, href: href, title: title, target: target }, children))));
});
BreadcrumbItem.displayName = 'BreadcrumbItem';
BreadcrumbItem.propTypes = propTypes$1;
BreadcrumbItem.defaultProps = defaultProps$1;

const propTypes = {
    /**
     * @default 'breadcrumb'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * ARIA label for the nav element
     * https://www.w3.org/TR/wai-aria-practices/#breadcrumb
     */
    ariaLabel: PropTypes__default["default"].string,
    /**
     * Additional props passed as-is to the underlying `<ol>` element
     */
    listProps: PropTypes__default["default"].object,
    as: PropTypes__default["default"].elementType,
};
const defaultProps = {
    ariaLabel: 'breadcrumb',
    listProps: {},
};
const Breadcrumb = React__namespace.forwardRef(({ bsPrefix, className, listProps, children, ariaLabel, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as = 'nav', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');
    return (React__namespace.createElement(SGDSWrapper, { as: as, "aria-label": ariaLabel, className: className, ref: ref, ...props },
        React__namespace.createElement("ol", { ...listProps, className: classNames__default["default"](prefix, listProps?.className) }, children)));
});
Breadcrumb.displayName = 'Breadcrumb';
Breadcrumb.propTypes = propTypes;
Breadcrumb.defaultProps = defaultProps;
var Breadcrumb$1 = Object.assign(Breadcrumb, {
    Item: BreadcrumbItem,
});

exports.Breadcrumb = Breadcrumb$1;
exports.BreadcrumbItem = BreadcrumbItem;
