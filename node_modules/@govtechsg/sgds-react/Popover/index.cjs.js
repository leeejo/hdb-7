'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var createWithBsPrefix = require('../utils/createWithBsPrefix');
var helpers = require('../utils/helpers');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var createWithBsPrefix__default = /*#__PURE__*/_interopDefaultLegacy(createWithBsPrefix);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
// `sgds-${defaultPrefix}`
function useIsRTL() {
    const { dir } = React.useContext(ThemeContext);
    return dir === 'rtl';
}
React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

var PopoverHeader = createWithBsPrefix__default["default"]('popover-header');

var PopoverBody = createWithBsPrefix__default["default"]('popover-body');

const propTypes = {
    /**
     * @default 'popover'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * An html id attribute, necessary for accessibility
     * @type {string}
     * @required
     */
    id: PropTypes__default["default"].string,
    /**
     * Sets the direction the Popover is positioned towards.
     *
     * > This is generally provided by the `Overlay` component positioning the popover
     */
    placement: PropTypes__default["default"].oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]),
    /**
     * An Overlay injected set of props for positioning the popover arrow.
     *
     * > This is generally provided by the `Overlay` component positioning the popover
     */
    arrowProps: PropTypes__default["default"].shape({
        ref: PropTypes__default["default"].any,
        style: PropTypes__default["default"].object,
    }),
    /**
     * When this prop is set, it creates a Popover with a Popover.Body inside
     * passing the children directly to it
     */
    body: PropTypes__default["default"].bool,
    /** @private */
    popper: PropTypes__default["default"].object,
    /** @private */
    show: PropTypes__default["default"].bool,
    hasArrow: PropTypes__default["default"].bool,
};
const defaultProps = {
    placement: 'right',
};
const Popover = React__namespace.forwardRef(({ bsPrefix, placement, className, style, children, body, arrowProps, hasArrow = false, popper: _, show: _1, ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'popover');
    const isRTL = useIsRTL();
    const [primaryPlacement] = placement?.split('-') || [];
    const bsDirection = helpers.getOverlayDirection(primaryPlacement, isRTL);
    return (React__namespace.createElement("div", { ref: ref, role: "tooltip", style: style, "x-placement": primaryPlacement, className: classNames__default["default"](className, decoratedBsPrefix, primaryPlacement && `bs-popover-${bsDirection}`), ...props },
        hasArrow && React__namespace.createElement("div", { className: "popover-arrow", ...arrowProps }),
        React__namespace.createElement(React__namespace.Fragment, null,
            " ",
            children)));
});
Popover.defaultProps = defaultProps;
Popover.propTypes = propTypes;
var Popover$1 = Object.assign(Popover, {
    Header: PopoverHeader,
    Body: PopoverBody,
    // Default popover offset.
    // https://github.com/twbs/bootstrap/blob/5c32767e0e0dbac2d934bcdee03719a65d3f1187/js/src/popover.js#L28
    POPPER_OFFSET: [0, 8],
});

exports.Popover = Popover$1;
exports.PopoverBody = PopoverBody;
exports.PopoverHeader = PopoverHeader;
