'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';
import createWithBsPrefix from '../utils/createWithBsPrefix';
import { getOverlayDirection } from '../utils/helpers';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
// `sgds-${defaultPrefix}`
function useIsRTL() {
    const { dir } = useContext(ThemeContext);
    return dir === 'rtl';
}
React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

var PopoverHeader = createWithBsPrefix('popover-header');

var PopoverBody = createWithBsPrefix('popover-body');

const propTypes = {
    /**
     * @default 'popover'
     */
    bsPrefix: PropTypes.string,
    /**
     * An html id attribute, necessary for accessibility
     * @type {string}
     * @required
     */
    id: PropTypes.string,
    /**
     * Sets the direction the Popover is positioned towards.
     *
     * > This is generally provided by the `Overlay` component positioning the popover
     */
    placement: PropTypes.oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]),
    /**
     * An Overlay injected set of props for positioning the popover arrow.
     *
     * > This is generally provided by the `Overlay` component positioning the popover
     */
    arrowProps: PropTypes.shape({
        ref: PropTypes.any,
        style: PropTypes.object,
    }),
    /**
     * When this prop is set, it creates a Popover with a Popover.Body inside
     * passing the children directly to it
     */
    body: PropTypes.bool,
    /** @private */
    popper: PropTypes.object,
    /** @private */
    show: PropTypes.bool,
    hasArrow: PropTypes.bool,
};
const defaultProps = {
    placement: 'right',
};
const Popover = React.forwardRef(({ bsPrefix, placement, className, style, children, body, arrowProps, hasArrow = false, popper: _, show: _1, ...props }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'popover');
    const isRTL = useIsRTL();
    const [primaryPlacement] = placement?.split('-') || [];
    const bsDirection = getOverlayDirection(primaryPlacement, isRTL);
    return (React.createElement("div", { ref: ref, role: "tooltip", style: style, "x-placement": primaryPlacement, className: classNames(className, decoratedBsPrefix, primaryPlacement && `bs-popover-${bsDirection}`), ...props },
        hasArrow && React.createElement("div", { className: "popover-arrow", ...arrowProps }),
        React.createElement(React.Fragment, null,
            " ",
            children)));
});
Popover.defaultProps = defaultProps;
Popover.propTypes = propTypes;
var Popover$1 = Object.assign(Popover, {
    Header: PopoverHeader,
    Body: PopoverBody,
    // Default popover offset.
    // https://github.com/twbs/bootstrap/blob/5c32767e0e0dbac2d934bcdee03719a65d3f1187/js/src/popover.js#L28
    POPPER_OFFSET: [0, 8],
});

export { Popover$1 as Popover, PopoverBody, PopoverHeader };
