'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classNames = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var createWithBsPrefix = require('../utils/createWithBsPrefix');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var createWithBsPrefix__default = /*#__PURE__*/_interopDefaultLegacy(createWithBsPrefix);

const InputGroupText = createWithBsPrefix__default["default"]('input-group-text', {
    Component: 'span',
});

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const context = React__namespace.createContext(null);
context.displayName = 'InputGroupContext';

const FormContext = React__namespace.createContext({});

const propTypes$1 = {
    /**
     * @default 'form-check-input'
     */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The underlying HTML element to use when rendering the FormCheckInput.
     *
     * @type {('input'|elementType)}
     */
    as: PropTypes__default["default"].elementType,
    /** A HTML id attribute, necessary for proper form accessibility. */
    id: PropTypes__default["default"].string,
    /** The type of checkable. */
    type: PropTypes__default["default"].oneOf(['radio', 'checkbox']).isRequired,
    /** Manually style the input as valid */
    isValid: PropTypes__default["default"].bool,
    /** Manually style the input as invalid */
    isInvalid: PropTypes__default["default"].bool,
};
const FormCheckInput = React__namespace.forwardRef(({ id, bsPrefix, className, type = 'checkbox', isValid = false, isInvalid = false, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input', ...props }, ref) => {
    const { controlId } = React.useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');
    return (React__namespace.createElement(Component, { ...props, ref: ref, type: type, id: id || controlId, className: classNames__default["default"](className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid') }));
});
FormCheckInput.displayName = 'FormCheckInput';
FormCheckInput.propTypes = propTypes$1;

const InputGroupCheckbox = (props) => (React__namespace.createElement(InputGroupText, null,
    React__namespace.createElement(FormCheckInput, { type: "checkbox", ...props })));
const InputGroupRadio = (props) => (React__namespace.createElement(InputGroupText, null,
    React__namespace.createElement(FormCheckInput, { type: "radio", ...props })));

const propTypes = {
    /** @default 'input-group' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * Control the size of buttons and form elements from the top-level.
     *
     * @type {('sm'|'lg')}
     */
    size: PropTypes__default["default"].string,
    /**
     * Handles the input's rounded corners when using form validation.
     *
     * Use this when your input group contains both an input and feedback element.
     */
    hasValidation: PropTypes__default["default"].bool,
    as: PropTypes__default["default"].elementType,
    variant: PropTypes__default["default"].oneOf(['quantity-toggle'])
};
/**
 *
 * @property {InputGroupText} Text
 * @property {InputGroupRadio} Radio
 * @property {InputGroupCheckbox} Checkbox
 */
const InputGroup = React__namespace.forwardRef(({ bsPrefix, size, hasValidation, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...InputGroupProps }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');
    // Intentionally an empty object. Used in detecting if a dropdown
    // exists under an input group.
    const contextValue = React.useMemo(() => ({}), []);
    return (React__namespace.createElement(context.Provider, { value: contextValue },
        React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...InputGroupProps, className: classNames__default["default"](className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation') })));
});
InputGroup.propTypes = propTypes;
InputGroup.displayName = 'InputGroup';
var InputGroup$1 = Object.assign(InputGroup, {
    Text: InputGroupText,
    Radio: InputGroupRadio,
    Checkbox: InputGroupCheckbox,
});

exports.InputGroup = InputGroup$1;
exports.InputGroupCheckbox = InputGroupCheckbox;
exports.InputGroupRadio = InputGroupRadio;
exports.InputGroupText = InputGroupText;
