'use client';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import * as React from 'react';
import { useContext, useMemo } from 'react';
import createWithBsPrefix from '../utils/createWithBsPrefix';

const InputGroupText = createWithBsPrefix('input-group-text', {
    Component: 'span',
});

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const context = React.createContext(null);
context.displayName = 'InputGroupContext';

const FormContext = React.createContext({});

const propTypes$1 = {
    /**
     * @default 'form-check-input'
     */
    bsPrefix: PropTypes.string,
    /**
     * The underlying HTML element to use when rendering the FormCheckInput.
     *
     * @type {('input'|elementType)}
     */
    as: PropTypes.elementType,
    /** A HTML id attribute, necessary for proper form accessibility. */
    id: PropTypes.string,
    /** The type of checkable. */
    type: PropTypes.oneOf(['radio', 'checkbox']).isRequired,
    /** Manually style the input as valid */
    isValid: PropTypes.bool,
    /** Manually style the input as invalid */
    isInvalid: PropTypes.bool,
};
const FormCheckInput = React.forwardRef(({ id, bsPrefix, className, type = 'checkbox', isValid = false, isInvalid = false, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input', ...props }, ref) => {
    const { controlId } = useContext(FormContext);
    bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');
    return (React.createElement(Component, { ...props, ref: ref, type: type, id: id || controlId, className: classNames(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid') }));
});
FormCheckInput.displayName = 'FormCheckInput';
FormCheckInput.propTypes = propTypes$1;

const InputGroupCheckbox = (props) => (React.createElement(InputGroupText, null,
    React.createElement(FormCheckInput, { type: "checkbox", ...props })));
const InputGroupRadio = (props) => (React.createElement(InputGroupText, null,
    React.createElement(FormCheckInput, { type: "radio", ...props })));

const propTypes = {
    /** @default 'input-group' */
    bsPrefix: PropTypes.string,
    /**
     * Control the size of buttons and form elements from the top-level.
     *
     * @type {('sm'|'lg')}
     */
    size: PropTypes.string,
    /**
     * Handles the input's rounded corners when using form validation.
     *
     * Use this when your input group contains both an input and feedback element.
     */
    hasValidation: PropTypes.bool,
    as: PropTypes.elementType,
    variant: PropTypes.oneOf(['quantity-toggle'])
};
/**
 *
 * @property {InputGroupText} Text
 * @property {InputGroupRadio} Radio
 * @property {InputGroupCheckbox} Checkbox
 */
const InputGroup = React.forwardRef(({ bsPrefix, size, hasValidation, className, 
// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div', ...InputGroupProps }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');
    // Intentionally an empty object. Used in detecting if a dropdown
    // exists under an input group.
    const contextValue = useMemo(() => ({}), []);
    return (React.createElement(context.Provider, { value: contextValue },
        React.createElement(SGDSWrapper, { as: Component, ref: ref, ...InputGroupProps, className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation') })));
});
InputGroup.propTypes = propTypes;
InputGroup.displayName = 'InputGroup';
var InputGroup$1 = Object.assign(InputGroup, {
    Text: InputGroupText,
    Radio: InputGroupRadio,
    Checkbox: InputGroupCheckbox,
});

export { InputGroup$1 as InputGroup, InputGroupCheckbox, InputGroupRadio, InputGroupText };
