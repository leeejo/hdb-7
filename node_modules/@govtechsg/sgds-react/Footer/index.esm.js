'use client';
import classNames from 'classnames';
import * as React from 'react';
import { useContext, forwardRef } from 'react';
import PropTypes from 'prop-types';
import warning from 'warning';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const propTypes$5 = {
    as: PropTypes.elementType,
    bsPrefix: PropTypes.string,
};
const FooterBottomCopyrights = React.forwardRef(({ as: Component = 'div', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-copyrights');
    return (React.createElement(Component, { ref: ref, className: classNames(className, bsPrefix, 'row'), ...props },
        React.createElement("div", { className: "col" },
            React.createElement("div", { className: "d-flex justify-content-lg-end" }, children))));
});
FooterBottomCopyrights.propTypes = propTypes$5;
FooterBottomCopyrights.displayName = 'FooterBottomCopyrights';

const propTypes$4 = {
    as: PropTypes.elementType,
    bsPrefix: PropTypes.string
};
const FooterBottomLinks = React.forwardRef(({ as: Component = 'div', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-mandatory-links');
    return (React.createElement(Component, { ref: ref, className: classNames(className, bsPrefix, 'row'), ...props },
        React.createElement("div", { className: "col" },
            React.createElement("ul", null, React.Children.map(children, (child) => (React.createElement("li", null, React.cloneElement(child))))))));
});
FooterBottomLinks.propTypes = propTypes$4;
FooterBottomLinks.displayName = 'FooterBottomLinks';

const FooterBottom = React.forwardRef(({ as: Component = 'section', children, bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-bottom');
    return (React.createElement(Component, { ref: ref, className: classNames(className, bsPrefix), ...props },
        React.createElement("div", { className: "container-fluid" }, children)));
});
var FooterBottom$1 = Object.assign(FooterBottom, {
    Links: FooterBottomLinks,
    Copyrights: FooterBottomCopyrights
});

const FooterTopContactLinks = React.forwardRef(({ as: Component = 'div', children, bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-contact-links');
    return (React.createElement(Component, { className: classNames(bsPrefix, 'row', className), ref: ref, ...props },
        React.createElement("div", { className: "col" },
            React.createElement("div", { className: "d-flex justify-content-lg-end" },
                React.createElement("ul", null,
                    " ",
                    React.Children.map(children, (child) => (React.createElement("li", null, React.cloneElement(child)))))))));
});

const propTypes$3 = {
    headerTitle: PropTypes.node,
    titleClass: PropTypes.string,
    descriptionClass: PropTypes.string,
    columnClass: PropTypes.string,
    as: PropTypes.elementType,
    bsPrefix: PropTypes.string
};
const defaultProps = {
    columnClass: 'col-lg-6',
};
const FooterTopHeader = forwardRef(({ as: Component = 'div', headerTitle, children, bsPrefix, className, titleClass, descriptionClass, columnClass = 'col-lg-6', ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-header');
    return (React.createElement(Component, { className: classNames(bsPrefix, className, 'row'), ref: ref, ...props },
        React.createElement("div", { className: classNames('col', columnClass) },
            React.createElement("div", { className: classNames('title', titleClass) }, headerTitle),
            React.createElement("div", { className: classNames('description', descriptionClass) }, children))));
});
FooterTopHeader.defaultProps = defaultProps;
FooterTopHeader.propTypes = propTypes$3;
FooterTopHeader.displayName = 'FooterTopHeader';

const context = React.createContext({
    noOfItem: 0
});
context.displayName = 'FooterTopItemGrpContext';

const propTypes$2 = {
    itemTitle: PropTypes.node,
    titleClass: PropTypes.string,
    linksClass: PropTypes.string,
    as: PropTypes.elementType,
};
const FooterTopItem = React.forwardRef(({ as: Component = 'div', itemTitle, children, className, titleClass, linksClass, ...props }, ref) => {
    const { noOfItem } = React.useContext(context);
    const colSize = noOfItem < 5 ? 'col-lg-3' : 'col-lg-2';
    return (React.createElement(Component, { className: classNames(colSize, className), ref: ref, ...props },
        React.createElement("div", { className: classNames('title', titleClass) }, itemTitle),
        React.createElement("ul", { className: classNames('links', linksClass) }, React.Children.map(children, (child) => (React.createElement("li", null, React.cloneElement(child)))))));
});
FooterTopItem.displayName = 'FooterTopItem';
FooterTopItem.propTypes = propTypes$2;

const propTypes$1 = {
    as: PropTypes.elementType,
    bsPrefix: PropTypes.string,
};
const FooterTopItemGroup = React.forwardRef(({ as: Component = 'div', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-items');
    const noOfChildren = React.Children.count(children);
    const contextValue = React.useMemo(() => ({ noOfItem: noOfChildren }), [noOfChildren]);
    warning(noOfChildren <= 6, 'Number of Footer Items should not exceed 6');
    return (React.createElement(context.Provider, { value: contextValue },
        React.createElement(Component, { className: classNames(bsPrefix, className, 'row'), ref: ref, ...props }, children)));
});
FooterTopItemGroup.displayName = 'FooterTopItemGroup';
FooterTopItemGroup.propTypes = propTypes$1;

const FooterTop = React.forwardRef(({ as: Component = 'section', children, className, bsPrefix, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer-top');
    return (React.createElement(Component, { ref: ref, className: classNames(bsPrefix, className), ...props },
        React.createElement("div", { className: "container-fluid" }, children)));
});
var FooterSection = Object.assign(FooterTop, {
    Header: FooterTopHeader,
    ItemGroup: FooterTopItemGroup,
    Item: FooterTopItem,
    ContactLinks: FooterTopContactLinks,
});

const propTypes = {
    as: PropTypes.elementType,
    bsPrefix: PropTypes.string,
};
const Footer = React.forwardRef(({ as: Component = 'footer', bsPrefix, className, ...props }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, 'footer');
    return (React.createElement(SGDSWrapper, { as: Component, ref: ref, className: classNames(className, bsPrefix), ...props }));
});
Footer.displayName = 'Footer';
Footer.propTypes = propTypes;
var Footer$1 = Object.assign(Footer, {
    Top: FooterSection,
    Bottom: FooterBottom$1,
});

export { Footer$1 as Footer, FooterBottom$1 as FooterBottom, FooterBottomCopyrights, FooterBottomLinks, FooterSection as FooterTop, FooterTopContactLinks, FooterTopHeader, FooterTopItem, FooterTopItemGroup };
