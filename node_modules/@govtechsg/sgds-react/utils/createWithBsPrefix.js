import classNames from 'classnames';
import camelize from 'dom-helpers/camelize';
import * as React from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';

const ThemeContext = React.createContext({ prefixes: {} });
({
    prefixes: PropTypes.object,
    dir: PropTypes.string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
React.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React.createElement(Tag, { ref: ref, ...props, className: classNames(props.className, 'sgds') });
});

const pascalCase = (str) => str[0].toUpperCase() + camelize(str).slice(1);
// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`
function createWithBsPrefix(prefix, { displayName = pascalCase(prefix), Component, defaultProps, propTypes } = {}) {
    const BsComponent = React.forwardRef(({ className, bsPrefix, as: Tag = Component || 'div', ...props }, ref) => {
        const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);
        return (React.createElement(Tag, { ref: ref, className: classNames(className, resolvedPrefix), ...props }));
    });
    BsComponent.defaultProps = defaultProps;
    BsComponent.propTypes = propTypes;
    BsComponent.displayName = displayName;
    return BsComponent;
}

export { createWithBsPrefix as default };
