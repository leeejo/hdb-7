'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var classNames = require('classnames');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

const ThemeContext = React__namespace.createContext({ prefixes: {} });
({
    prefixes: PropTypes__default["default"].object,
    dir: PropTypes__default["default"].string,
});
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes } = React.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || `${defaultPrefix}`;
}
const SGDSWrapper = React__namespace.forwardRef(({ as: Tag = 'div', ...props }, ref) => {
    return React__namespace.createElement(Tag, { ref: ref, ...props, className: classNames__default["default"](props.className, 'sgds') });
});

const propTypes = {
    /** @default 'badge' */
    bsPrefix: PropTypes__default["default"].string,
    /**
     * The visual style of the badge
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}
     */
    bg: PropTypes__default["default"].string,
    /**
     * Add the `pill` modifier to make badges more rounded with
     * some additional horizontal padding
     */
    pill: PropTypes__default["default"].bool,
    /**
     * Sets badge text color
     *
     * @type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}
     */
    text: PropTypes__default["default"].string,
    /** @default span */
    as: PropTypes__default["default"].elementType,
    textIndicator: PropTypes__default["default"].bool,
    dotIndicator: PropTypes__default["default"].bool,
};
const defaultProps = {
    bg: 'primary',
    pill: false,
    textIndicator: false,
    dotIndicator: false
};
const Badge = React__namespace.forwardRef(({ bsPrefix, bg, pill, text, className, textIndicator, dotIndicator, as: Component = 'span', ...props }, ref) => {
    const prefix = useBootstrapPrefix(bsPrefix, 'badge');
    return (React__namespace.createElement(SGDSWrapper, { as: Component, ref: ref, ...props, className: classNames__default["default"](className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`, (textIndicator || dotIndicator) && 'position-absolute top-0 start-100 translate-middle', dotIndicator && 'p-2 border border-light rounded-circle') },
        dotIndicator && React__namespace.createElement("span", { className: 'visually-hidden' }, "New alerts"),
        props.children));
});
Badge.displayName = 'Badge';
Badge.propTypes = propTypes;
Badge.defaultProps = defaultProps;

exports.Badge = Badge;
